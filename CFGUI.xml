<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>CFGUI</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName>CFGUI</packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Communications</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>99</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Tell to console</name>
					<script>selectCurrentLine()
copy()
appendBuffer("TellConsole")
appendBuffer("CommunicationConsole")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+) tells you '(.*)'$</string>
						<string>^(.*) tells the group '(.*)'$</string>
						<string>^You tell (.*)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>CB to console</name>
					<script>selectCurrentLine()
copy()
appendBuffer("CabalConsole")
appendBuffer("CommunicationConsole")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\[(\w+)\] (.*): (.*)$</string>
						<string>^\[(\w+) LEADERS\] (.*): (.*)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Say yell music whisper to console</name>
					<script>selectCurrentLine()
copy()
appendBuffer("CommunicationConsole")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^([A-Z]\w*\s*\w*\s*\w*\s*\w*\s*\w*) says '(.*)'$</string>
						<string>^([A-Z]\w+\s*\w*\s*\w*\s*\w*\s*\w*) yells '(.*)'$</string>
						<string>^([A-Z]\w+\s*\w*\s*\w*\s*\w*\s*\w*) musics '(.*)'$</string>
						<string>^([A-Z]\w+\s*\w*\s*\w*\s*\w*\s*\w*) whispers '(.*)'$</string>
						<string>^([A-Z]\w+\s*\w*\s*\w*\s*\w*\s*\w*) yells wildly '(.*)'$</string>
						<string>^You yell '(.*)'$</string>
						<string>^You music '(.*)'$</string>
						<string>^You whisper '(.*)'$</string>
						<string>^You say '(.*)'$</string>
						<string>^You yell wildly '(.*)'$</string>
						<string>^([A-Z]\w*\s*\w*\s*\w*\s*\w*\s*\w*) kinspeaks '(.*)'$</string>
						<string>^You kinspeak '(.*)'$</string>
						<string>^You say (.*) '(.*)$</string>
						<string>^([A-Z]\w*\s*\w*\s*\w*\s*\w*\s*\w*) says (.*) '(.*)'$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Affects</name>
				<script>-- Updated Jan. 20, 2020, for v 1.0</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Affects Capture</name>
					<script>clearWindow("AffectConsole")

affects = {}
modifies = {}

enableTrigger("affects_begin")
enableTrigger("affects_nomod_begin")
enableTrigger("affects_newbie_begin")
enableTrigger("affects_end")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>4</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You are affected by:$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>affects_begin</name>
						<script>local affect_type = matches[2]
local affect_name = matches[3]
local affect_loc = matches[4]
local affect_modifier = tonumber(matches[5])
local affect_duration = tonumber(matches[6])
local affect_active = "active"
local affect_category = "unknown"

if affect_duration == -1 then
	affect_active = "permanent"
end

local affect = {affect_type, affect_name, affect_loc, affect_modifier, affect_duration, affect_active, affect_category}

table.insert(affects, affect)
setTriggerStayOpen("Affects Capture", 3)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(Physical effect|Skill|Spell|Commune|Rune Magic|Song|Timer|Power):\s*'(.*)' modifies (.*) by (-?\d+) for (-?\d+) hours.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>affects_end</name>
						<script>disableTrigger("affects_begin")
disableTrigger("affects_nomod_begin")
disableTrigger("affects_newbie_begin")
disableTrigger("affects_end")
setTriggerStayOpen("Affects Capture", 0)

updateAffects(affects)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>affects_nomod_begin</name>
						<script>local affect_type = matches[2]
local affect_name = matches[3]
local affect_duration = tonumber(matches[4])
local affect_loc = "none"
local affect_modifier = "0"
local affect_active = "active"

if affect_duration == -1 then
	affect_active = "permanent"
end

local affect = {affect_type, affect_name, affect_loc, affect_modifier, affect_duration, affect_active}
table.insert(affects, affect)
setTriggerStayOpen("Affects Capture", 1)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(Physical effect|Skill|Spell|Commune|Rune Magic|Song|Timer|Power):\s*'(.*)' for (-?\d+) hours.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>affects_newbie_begin</name>
						<script>local affect_type = matches[2]
local affect_name = matches[3]
local affect_loc = matches[4]
local affect_duration = matches[5]
local affect_modifier = "unknown"
local affect_active = true

local affect = {affect_type, affect_name, affect_loc, affect_modifier, affect_duration, affect_active}
table.insert(affects, affect)
setTriggerStayOpen("Affects Capture", 1)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(Physical effect|Skill|Spell|Commune|Rune Magic|Song|Timer|Power):\s*'(.*)' modifies (\w+\s*\w*\s*\w*\s*\w*(?&lt;! )by(?! )) for (-?\d+) hours.$</string>
							<string>^(Physical effect|Skill|Spell|Commune|Rune Magic|Song|Timer|Power):\s*'(.*)' modifies (.*) for a (\w+\s*\w*\s*time).$</string>
							<string>^(Physical effect|Skill|Spell|Commune|Rune Magic|Song|Timer|Power):\s*'(.*)' for a (\w+\s*\w*\s*time).$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Dispel Capture</name>
					<script>dispeled = matches[2]

for affect, _ in ipairs(affects) do
	if affects[affect][2] == dispeled then
		affects[affect][6] = "dispeled"
  end
end

updateAffects(affects)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ffaa00</mFgColor>
					<mBgColor>#000000</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^The \w+ of your (.*) (?:spell|power|supplication) unravels.$</string>
						<string>^Your cabal power (.*) unravels.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Score capture</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Level Gain Capture</name>
					<script>max_hp = tonumber(matches[2])
max_mana = tonumber(matches[3])
max_moves = tonumber(matches[4])
prac = tonumber(matches[5])

--echo("\nMaximum hp updated to "..max_hp.."\n")
--echo("Maximum mana updated to "..max_mana.."\n")
--echo("Maximum moves updated to "..max_moves.."\n")

vt.max_hp = max_hp
vt.max_mana = max_mana
vt.max_moves = max_moves
vt.practices = prac
vt.trains = trains
vt.level = vt.level + 1
table.save(PkgPath .. "vt.lua", vt)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You raise a level!!\s*Your gain is: \d+\/(\d+)\s*hp, \d+\/(\d+) m, \d+\/(\d+) mv \d+\/(\d+) prac.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Name, Title, Level, Sex, Race, Class, Age Capture</name>
					<script>--For debugging:
--showMultimatches()

--^Hit Point\s*:\s*(\d+)(?:%|\s*\/*(\d+))\s*Mana\s*:\s*(\d+)(?:%|\s*\/*(\d+))\s*Move\s*:\s*(\d+)(?:%|\s*\/*(\d+))

charname = multimatches[1][2]
lastname = multimatches[1][3]
title = multimatches[1][4]
level = tonumber(multimatches[2][2])
sex = multimatches[2][3]
race = multimatches[2][4]
ethos = multimatches[3][2]
align = multimatches[3][3]
class = multimatches[3][4]
practices = tonumber(multimatches[4][2])
trains = tonumber(multimatches[4][3])
hometown = multimatches[4][4]
sphere = multimatches[5][2]
age = multimatches[6][2]
years = multimatches[6][3]
hours = multimatches[6][4]


vt.charname = charname
vt.lastname = lastname
vt.title = title
vt.level = level
vt.sex = sex
vt.race = race
vt.ethos = ethos
vt.align = align
vt.class = class
vt. practices = practices
vt.trains = trains
vt.hometown = hometown
vt.sphere = sphere
vt.age = age
vt.years = years
vt.hours = hours
vt.max_hp = max_hp
vt.max_mana = max_mana
vt.max_moves = max_moves
table.save(PkgPath .. "vt.lua", vt)

GUI.NameLabel:echo("&lt;center&gt;"..charname)

disableAlias("Warrior")
disableAlias("Thief")
disableAlias("Necromancer")
disableAlias("Transmuter")
disableAlias("Shaman")
disableAlias("Healer")
disableAlias("Druid")
disableAlias("Ranger")
disableAlias("Assassin")
disableAlias("Bard")
disableAlias("Berserker")
disableAlias("Raider")
disableAlias("Invoker")
disableAlias("Conjurer")
disableAlias("Paladin")
disableAlias("Anti-Paladin")
disableAlias("Shapeshifter")

enableAlias(class:title())</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>14</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^([A-Z][a-z]+) (.*)(the .*)$</string>
						<string>^Level\s*:\s*(\d+)\s*Sex\s*:\s*(\w+)\s*Race\s*:\s*(\w+)\s*</string>
						<string>^Ethos\s*:\s*(\w+)\s*Align\s*:\s*(\w+)\s*Class\s*:\s*(\w+)</string>
						<string>^Practices\s*:\s*(\d+)\s*Trains\s*:\s*(\d+)\s*Hometown\s*:\s*(.*)\s*$</string>
						<string>^Exp\s*:\s*\d+\s*To Level\s*:\s*\d+\s*Sphere\s*:\s*(.*)$</string>
						<string>^Age\s*:\s*(.*),\s*(\d+)\s*years\s*old\s*\((\d+)\s*hours\)\s*$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>HP, Mana, Moves Raw Capture</name>
					<script>current_hp = tonumber(matches[2])
max_hp = tonumber(matches[3])
current_mana = tonumber(matches[4])
max_mana = tonumber(matches[5])
current_moves = tonumber(matches[6])
max_moves = tonumber(matches[7])

vt.max_hp = max_hp
vt.max_mana = max_mana
vt.max_moves = max_moves
table.save(PkgPath .. "vt.lua", vt)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Hit Point\s*:\s*(\d+)\s*\/(\d+)\s*Mana\s*:\s*(\d+)\s*\/(\d+)\s*Move\s*:\s*(\d+)\s*\/(\d+)</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Sphere</name>
					<script>sphere = matches[2]
vt.sphere = sphere
table.save(PkgPath .. "vt.lua", vt)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You have chosen to follow the path of (\w+).$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Warrior and Shaman Specs</name>
					<script>specialization = matches[2]
enableAlias(specialization)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You are specialized in (.*).$</string>
						<string>^You are now specialized in (.*).$</string>
						<string>^You have been imbued with the gifts of (.*).$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Shaman_remove</name>
					<script>disableAlias(matches[2])</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You have lost the gifts of (.*).$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Prompt Capture</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Main Prompt Capture</name>
					<script>if promptstyle ~= "9" then 
civilized = string.title(matches[2])
end

if promptstyle == "1" or promptstyle == "2" then
	tnl = tonumber(matches[6])
	exp = tonumber(matches[7])
elseif promptstyle == "3" then
	tnl = tonumber(matches[9])
	exp = tonumber(matches[10])
elseif promptstyle == "4" or promptstyle == "5" then
	moon = matches[3]
	indoor = matches[4]
	tnl = tonumber(matches[8])
	exp = tonumber(matches[9])	
elseif promptstyle == "6" then
	civilized = string.title(matches[2])
	moon = matches[3]
	indoor = matches[4]
	tnl = tonumber(matches[11])
	exp = tonumber(matches[12])
elseif promptstyle == "7" then
	drunk = matches[3]
	repertoire = matches[4]
	tnl = tonumber(matches[8])
	exp = tonumber(matches[9])
elseif promptstyle == "8" then
	tnl = tonumber(matches[9])
	exp = tonumber(matches[10])	
elseif promptstyle == "9" then
	tnl = tonumber(matches[8])
	indoor = matches[11]
	civilized = string.title(matches[12])
	age = matches[13]
elseif promptstyle == "0" then
	exp = tonumber(matches[5])
end

if promptstyle == "0" then
 GUI.Experience:setValue(exp, 100,"&lt;center&gt;"..exp..[[%]])
 else 
 GUI.Experience:setValue(exp, 100,"&lt;center&gt;"..tnl.." tnl: "..exp..[[%]])
end

--GUI.Terrain:echo("&lt;center&gt;"..civilized)

function terrainUpdate()
	if civilized == "Civilized" then
		terrainimg = "civilized"
		elseif civilized == "PROTECTED civilized" or civilized == "PROTECTED water" then
			terrainimg = "protected"
		elseif civilized == "Civilized graveyard" then
		terrainimg = "graveyard"
		elseif civilized == "Wilderness "
		or civilized == "Wilderness forest" 
		or civilized == "Wilderness FOREST" 
		or civilized == "Wilderness forest trail" 
		or civilized == "Wilderness FOREST TRAIL" then
			terrainimg = "forest"
		elseif civilized == "Wilderness graveyard" then
			terrainimg = "graveyard"
		elseif civilized == "Wilderness hills" or civilized == "Wilderness HILLS" then
			terrainimg = "hills"
		elseif civilized == "Wilderness mountain" or civilized == "Wilderness MOUNTAIN" then
			terrainimg = "mountains"
		elseif civilized == "Wilderness desert" or civilized == "Wilderness DESERT" then
			terrainimg = "desert"
		elseif civilized == "Wilderness cave" or civilized == "Wilderness CAVE" then
			terrainimg = "cave"
		elseif civilized == "Water" or civilized == "WATER" then
			terrainimg = "water"
		elseif civilized == "Wilderness field" or civilized == "Wilderness FIELD" then
			terrainimg = "field"
		elseif civilized == "Wilderness swamp" or civilized == "Wilderness SWAMP" then
			terrainimg = "swamp"
		else
		end
	GUI.InfoBoxCSS:set("border-image",[[url("]]..ImgPath..terrainimg..[[.png")]])
	GUI.InfoBoxCSS:set("font-color","black")
	GUI.Terrain:setStyleSheet(GUI.InfoBoxCSS:getCSS())
	GUI.Terrain:echo("&lt;center&gt;"..civilized)
	end
	
terrainUpdate()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>99</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+\s*\w*\s*\w*) &lt;(\d+)hp (\d+)m (\d+)mv (\d+)tnl \((-?\d+).*\) (\d+) (AM|PM)&gt;\s*$</string>
						<string>^(\w+\s*\w*\s*\w*) &lt;(\d+)%hp (\d+)%m (\d+)%mv (\d+)tnl \((-?\d+).*\) (\d+) (AM|PM)&gt;\s*$</string>
						<string>^(\w+\s*\w*\s*\w*) &lt;(\d+)\/(\d+)hp (\d+)\/(\d+)m (\d+)\/(\d+)mv (\d+)tnl \((-?\d+).*\) (\d+) (AM|PM)&gt;\s*$</string>
						<string>^(\w+\s*\w*\s*\w*) \| (\w+) \| (indoor|outdoor) &lt;(\d+)hp (\d+)m (\d+)mv (\d+)tnl \((-?\d+).*\) (\d+) (AM|PM)&gt;\s*$</string>
						<string>^(\w+\s*\w*\s*\w*) \| (\w+) \| (indoor|outdoor) &lt;(\d+)%hp (\d+)%m (\d+)%mv (\d+)tnl \((-?\d+).*\) (\d+) (AM|PM)&gt;\s*$</string>
						<string>^(\w+\s*\w*\s*\w*) \| (\w+) \| (indoor|outdoor) &lt;(\d+)\/(\d+)hp (\d+)\/(\d+)m (\d+)\/(\d+)mv (\d+)tnl \((-?\d+).*\) (\d+) (AM|PM)&gt;\s*$</string>
						<string>^(\w+\s*\w*\s*\w*) \| (\w+) \| (\w+) &lt;(\d+)hp (\d+)m (\d+)mv (\d+)tnl \((-?\d+).*\) (\d+) (AM|PM)&gt;\s*$</string>
						<string>^(\w+\s*\w*\s*\w*) &lt;(\d+)\|(\d+)%hp (\d+)\|(\d+)%m (\d+)\|(\d+)%mv (\d+)tnl \((-?\d+).*\) (\d+) (AM|PM)&gt;\s*$</string>
						<string>^&lt;(\d+)\/(\d+)hp (\d+)\/(\d+)m (\d+)\/(\d+)mv \((-?\d+)\..*tnl\) \((\d+) (AM|PM)\)\((\w+)\)\(\w+\)\((\w+\s*\w*\s*\w*\s*\w*)\)\((\d+)\)&gt;\s*$</string>
						<string>^&lt;(\d+)%h (\d+)%m (\d+)%v (-?\d+)\.\d+%xp (\d+) (AM|PM)&gt;\s*$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Invisible Prompt Capture</name>
					<script>-- prompt ||%h %H %e %m %M %f %v %V %g %E||%-%W &lt;%hhp %mm %vmv %Xtnl (%P) %T&gt; 
deleteLine()

time_old = time
current_hp = tonumber(matches[2])
max_hp = matches[3]
hp_percent = tonumber(matches[4])
current_mana = tonumber(matches[5])
max_mana = tonumber(matches[6])
mana_percent = tonumber(matches[7])
current_moves = tonumber(matches[8])
max_moves = tonumber(matches[9])
moves_percent = tonumber(matches[10])
time = tonumber(matches[11])


if tostring(max_hp) == "100%" then
GUI.Health:setValue(hp_percent, 100,"&lt;center&gt;"..hp_percent.."%")
GUI.Mana:setValue(mana_percent, 100,"&lt;center&gt;"..mana_percent.."%")
GUI.Movement:setValue(moves_percent, 100,"&lt;center&gt;"..moves_percent.."%")
else
max_hp = tonumber(max_hp)
GUI.Health:setValue(hp_percent, 100,"&lt;center&gt;"..current_hp.."/"..max_hp..": "..hp_percent.."%")
GUI.Mana:setValue(mana_percent, 100,"&lt;center&gt;"..current_mana.."/"..max_mana..": "..mana_percent.."%")
GUI.Movement:setValue(moves_percent, 100,"&lt;center&gt;"..current_moves.."/"..max_moves..": "..moves_percent.."%")
vt.max_hp = max_hp
vt.max_mana = max_mana
vt.max_moves = max_moves
end

if not time then
	time_old = time
	else
	local firsttime = true
end

if firsttime == true
and time_old == nil then
	time_old = time
	firsttime = false
end
	
if time_old ~= nil
and time ~= time_old then
--	echo("Time has changed.")

	if time &lt; time_old then
		timediff = ((time - time_old) + 24) -- formula for calculating time difference across midnight
	else
		timediff = time - time_old
	end

	if time &gt; 18
	or time &lt; 4 then
		GUI.GaugeFrontCSS:set("background-color","rgba(50,50,255,.2)")
		GUI.GaugeBackCSS:set("background-color","rgba(80,50,255,.5)")
		GUI.Time.front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())
		timeofday = "Night"
	elseif time &gt; 16 
	and time &lt; 19 then
		GUI.GaugeFrontCSS:set("background-color","rgba(50,80,255,.6)")
		GUI.Time.front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())
		timeofday = "Dusk"
	elseif time &gt; 4
	and time &lt; 6 then
		GUI.GaugeFrontCSS:set("background-color","rgba(80,50,255,.5)")
		GUI.Time.front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())
		timeofday = "Dawn"
	else
		GUI.GaugeFrontCSS:set("background-color","rgba(70,80,255,1)")
		GUI.Time.front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())
		timeofday = "Daytime"
	end

	GUI.Time:setValue(time, 24,"&lt;center&gt;"..time..":00 - "..timeofday)

if affects ~= nil then
	for affect, _ in ipairs(affects) do
		affects[affect][5] = (affects[affect][5] - timediff)
	end
end
updateAffects(affects)
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\|\|(.*) (.*) (\d+)% (.*) (.*) (\d+)% (.*) (.*) (\d+)% (\d+)\:00\|\|</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Group Capture</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Group Capture</name>
					<script>groupmate_name = matches[2]
groupmate_health = tonumber(matches[3])
groupmate_mana = tonumber(matches[4])
groupmate_moves = tonumber(matches[5])


if groupmate_health &lt; 41 
and groupmate_health &gt; 20 then
	selectString(groupmate_health,1)
	fg("yellow")
	deselect()
	selectString(groupmate_name,1)
	fg("yellow")
	deselect()
	resetformat()
elseif groupmate_health &lt; 21 then
	selectString(groupmate_health,1)
	fg("firebrick")
	deselect()
	selectString(groupmate_name,1)
	fg("firebrick")
	deselect()
	resetformat()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\[\d+\s*\w{3}\]\s*(\w+)\s*(\d+)%\s*hp\s*(\d+)%\s*mana\s*(\d+)%\s*mv\s*(\d+)\s*xp$</string>
						<string>^\[\s*NPC\s*\]\s*(.*)\s+ (\d+)%\s*hp\s*(\d+)%\s*mana\s*(\d+)%\s*mv\s*(\d+)\s*xp$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>misc</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>newbiegreeting</name>
					<script>cecho("\n\n&lt;white&gt;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n&lt;light_slate_blue&gt;Welcome to Carrion Fields! Type 'SCORE' to begin personalizing your client.\n\n&lt;white&gt;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n")
promptstyle = "1"
send([[prompt ||%h %H %e %m %M %f %v %V %g %E||%-%W &lt;%hhp %mm %vmv %Xtnl (%P) %T&gt;]])
cecho("&lt;gold&gt;The Default Prompt set. Basic isn't always basic.")
vt.promptstyle = promptstyle
send("telnetga")
send("color all")
table.save(PkgPath .. "vt.lua", vt)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^The Academy Prefect says 'Welcome to Thera!'$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Activate Help</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^              -&lt;!!!MMM$$$$$$$$$$$$$$$$X!:           The Carrion Fields$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Item Capture</name>
				<script>itemID = {}
</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>item_capture_open</name>
					<script>enableTrigger("item_capture_grab")
enableTrigger("item_capture_close")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>2</conditonLineDelta>
					<mStayOpen>1</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>-------------------------------------------------------------------------------</string>
						<string>^(.*) can be referred to as\s*(.*)</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>alduk_capture_open</name>
					<script>enableTrigger("alduk_capture_grab")
enableTrigger("alduk_capture_close")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>2</conditonLineDelta>
					<mStayOpen>1</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You give (?:.*) coins to Alduk.</string>
						<string>^Alduk tells you '.*</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>alduk_capture_grab</name>
					<script>Logger:Log("items", line)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^((?!Alduk gives you (?:.*)).)*$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>item_capture_grab</name>
					<script>Logger:Log("items", line)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^((?!-------------------------------------------------------------------------------).)*$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>item_capture_close</name>
					<script>Logger:Log("items",line)
disableTrigger("item_capture_grab")
disableTrigger("item_capture_close")
cecho("\n&lt;steel_blue&gt;Added to your item journal.")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^-------------------------------------------------------------------------------$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>alduk_capture_close</name>
					<script>disableTrigger("alduk_capture_grab")
disableTrigger("alduk_capture_close")
cecho("\n&lt;steel_blue&gt;Added to your item journal.")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Alduk gives you (?:.*)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Friends and Enemies</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>who/where</name>
					<script>local name = matches[2]
if people[name] then
    if people[name]["relationship"] == "friend" then
        selectString(name, 1)
        --setFgColor(150,255,255)
        setBold(true)
        --end
    elseif people[name]["relationship"] == "enemy" then
        selectString(name, 1)
        setFgColor(255,150,150)
        --end
   elseif people[name]["cabal"] == "Outlander" then
        selectString(name, 1)
        fg('green')
        --end
    elseif people[name]["cabal"] == "Herald" then
        selectString(name, 1)
        fg('purple')
        --end
    elseif people[name]["cabal"] == "Fortress" then
        selectString(name, 1)
        fg('white')
        --end
    elseif people[name]["cabal"] == "Battle" then
        selectString(name, 1)
        fg('SkyBlue')
        --end
    elseif people[name]["cabal"] == "Tribunal" then
        selectString(name, 1)
        fg('yellow')
        --end
    elseif people[name]["cabal"] == "Scarab" then
        selectString(name, 1)
        fg('red')
        elseif people[name]["cabal"] == "Grinning Skull" then
        selectString(name, 1)
        fg('red')
    elseif people[name]["cabal"] == "Empire" then
        selectString(name, 1)
        fg('saddle_brown')
    end
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^  ([A-Z][a-z]+)              </string>
						<string>^\(PK\) ([A-Z][a-z]+)              </string>
						<string>^\[\s*\d+ .* \w+\] (\w+)\s*.*\s*the .*</string>
						<string>^\[\s*\d+ .* \w+\].* \[[A-Z]+\]*\(*[A-Z]*\)*\s*[A-Z]* (\w+)\s*.*\s*the .*</string>
						<string>^[\s\d+ .* \w+].* ([A-Z]+)([A-Z])\s[A-Z]* (\w+)\s.*\sthe .*</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Logger</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName>Logger</packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Logging</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>99</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Killing Blow</name>
						<script>Logger:Log("killingblows", matches[1], { "timestamp" })</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You land the killing blow against (\w+)$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>IdentifyLog</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>IDlogStart</name>
							<script>Logger:LogSection("items")
enableTrigger("IDlogEnd")
disableTrigger("IDlogStart")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>-------------------------------------------------------------------------------</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>IDlogEnd</name>
							<script>Logger:StopLogging()
Logger:CloseLog("items")
disableTrigger("IdentifyLog")
disableTrigger("IdentifylogEnd")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Alduk</name>
							<script>Logger:LogSection("items")
enableTrigger("AldukEnd")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>1</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You give .* coins to Alduk.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>AldukEnd</name>
							<script>Logger:StopLogging()
Logger:CloseLog("items")
disableTrigger("AldukEnd")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Alduk gives you (.*)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
				</TriggerGroup>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Combat Color</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Incoming Damage</name>
					<script>selectString(matches[2],1)
fg("coral") 
resetFormat()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff4141</mFgColor>
					<mBgColor>#000000</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(.*)'s \w+\s*\w*\s*\w*\s*\w*(misses|scratches|grazes|hits|injures|wounds|mauls|decimates|devastates|maims|MUTILATES|EVISCERATES|DISMEMBERS|MASSACRES|MANGLES|\*\*\* DEMOLISHES \*\*\*|\*\*\* DEVASTATES \*\*\*|=== OBLITERATES ===|&gt;&gt;&gt; ANNIHILATES &lt;&lt;&lt;|&lt;&lt;&lt; ERADICATES &gt;&gt;&gt;|does UNSPEAKABLE things to) you(?:.|!)$</string>
						<string>^(.*)'s \w+\s*\w*\s*\w*\s*\w*(misses|toasts|parches|heats|blisters|burns|roasts|smolders|scalds|singes|BROILS|SEARS|CHARS|RAZES|TORCHES|\*\*\* BLASTS \*\*\*|\*\*\* SCORCHES \*\*\*|=== INCINERATES ===|&gt;&gt;&gt; CAUTERIZES &lt;&lt;&lt;|&lt;&lt;&lt; CREMATES &gt;&gt;&gt;) you(?:.|!)$</string>
						<string>^(.*)'s \w+\s*\w*\s*\w*\s*\w*(misses|concerns|disquiets|daunts|scares|jolts|startles|flusters|alarms|stupefies|DISTRESSES|DISTURBS|STAGGERS|RATTLES|FRIGHTENS|\*\*\* TRAUMATIZES \*\*\*|\*\*\* HARROWS \*\*\*|=== TERRIFIES ===|&gt;&gt;&gt; HORRIFIES &lt;&lt;&lt;|&lt;&lt;&lt; PETRIFIES &gt;&gt;&gt;) you(?:.|!)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Outgoing Damage</name>
					<script>selectString(matches[2],1)
fg("yellow") 
resetFormat()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff5500</mFgColor>
					<mBgColor>#000000</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Your \w+\s*\w*\s*\w*\s*\w*(misses|scratches|grazes|hits|injures|wounds|mauls|decimates|devastates|maims|MUTILATES|EVISCERATES|DISMEMBERS|MASSACRES|MANGLES|\*\*\* DEMOLISHES \*\*\*|\*\*\* DEVASTATES \*\*\*|=== OBLITERATES ===|&gt;&gt;&gt; ANNIHILATES &lt;&lt;&lt;|&lt;&lt;&lt; ERADICATES &gt;&gt;&gt;|does UNSPEAKABLE things to) (?:.*)(?:.|!)$</string>
						<string>^Your \w+\s*\w*\s*\w*\s*\w*(misses|toasts|parches|heats|blisters|burns|roasts|smolders|scalds|singes|BROILS|SEARS|CHARS|RAZES|TORCHES|\*\*\* BLASTS \*\*\*|\*\*\* SCORCHES \*\*\*|=== INCINERATES ===|&gt;&gt;&gt; CAUTERIZES &lt;&lt;&lt;|&lt;&lt;&lt; CREMATES &gt;&gt;&gt;) (?:.*)(?:.|!)$</string>
						<string>^Your \w+\s*\w*\s*\w*\s*\w*(misses|concerns|disquiets|daunts|scares|jolts|startles|flusters|alarms|stupefies|DISTRESSES|DISTURBS|STAGGERS|RATTLES|FRIGHTENS|\*\*\* TRAUMATIZES \*\*\*|\*\*\* HARROWS \*\*\*|=== TERRIFIES ===|&gt;&gt;&gt; HORRIFIES &lt;&lt;&lt;|&lt;&lt;&lt; PETRIFIES &gt;&gt;&gt;) (?:.*)(?:.|!)$</string>
						<string>^You (miss|scratch|graze|hit|injure|wound|maus|decimates|devastates|maims|MUTILATES|EVISCERATES|DISMEMBERS|MASSACRES|MANGLES|\*\*\* DEMOLISHES \*\*\*|\*\*\* DEVASTATES \*\*\*|=== OBLITERATES ===|&gt;&gt;&gt; ANNIHILATES &lt;&lt;&lt;|&lt;&lt;&lt; ERADICATES &gt;&gt;&gt;|does UNSPEAKABLE things to) (?:.*)(?:.|!)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Failure</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ffaa00</mFgColor>
					<mBgColor>#000000</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You lost your concentration.$</string>
						<string>^You failed.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Gear Capture</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Equipment Capture</name>
					<script>clearWindow("EquipmentConsole")
EquipmentConsole:echo("\r\n")
enableTrigger("equipment_begin")
enableTrigger("equipment_end")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>4</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You are using:$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>equipment_end</name>
						<script>disableTrigger("equipment_begin")
disableTrigger("equipment_end")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>equipment_begin</name>
						<script>local wearLocation = matches[2]
local itemName = matches[3]
EquipmentConsole:cecho("&lt;steel_blue&gt;"..wearLocation..":&lt;gray&gt; "..itemName.."\r\n")
setTriggerStayOpen("Equipment Capture", 1)
setTriggerStayOpen("equipment_begin", 1)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\&lt;worn (about body)\&gt;*\s*(.*)$</string>
							<string>^\&lt;(.*) wielded\&gt;\s*(.*)$</string>
							<string>^\&lt;worn\s*(?:around|on|as|about)*\s*(.*)\&gt;\s*(.*)$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Inventory Capture</name>
					<script>clearWindow("InventoryConsole")
InventoryConsole:echo("\r\n")
enableTrigger("inventory_begin")
enableTrigger("inventory_count_begin")
enableTrigger("inventory_end")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>4</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You are carrying:$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>inventory_end</name>
						<script>disableTrigger("inventory_count_begin")
disableTrigger("inventory_begin")
disableTrigger("inventory_end")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>inventory_count_begin</name>
						<script>local invCount = matches[2]
local invItem = matches[3]
InventoryConsole:cecho("&lt;steel_blue&gt;"..invCount.." &lt;gray&gt;"..invItem.."\r\n")
setTriggerStayOpen("Inventory Capture", 1)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\(\s*\d+\)) (.*)$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>inventory_begin</name>
						<script>local invItem = matches[2]
InventoryConsole:cecho("&lt;gray&gt;"..invItem.."\r\n")
setTriggerStayOpen("Inventory Capture", 1)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\s+(.*)$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Weapons</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>pickup_mainhand_check</name>
					<script>if matches[2] ~= "You see no" then
  send("wield "..mainhand)
elseif matches[2] == "You see no" and matches[3] == mainhand then
  cecho("\r\n&lt;white&gt;Your "..mainhand.." is gone! Canceling re-wield.\r\n")
  disableTrigger("pickup_mainhand_check")
else
  cecho("\r\n&lt;white&gt;Canceling auto-rewield if "..mainhand.." is not picked up within 10 seconds.\r\n")
  tempTimer(10, function() disableTrigger("pickup_mainhand_check") end)
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(You see no) (.*) here for you to take.$</string>
						<string>^You get (.*).$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>pickup_offhand_check</name>
					<script>if matches[2] ~= "You see no" then
  send("dual "..offhand)
elseif matches[2] == "You see no" and matches[3] == offhand then
  cecho("\r\n&lt;white&gt;Your "..offhand.." is gone! Canceling re-wield.\r\n")
  disableTrigger("pickup_offhand_check")
else
  disableTrigger("pickup_offhand_check")
  tempTimer(10, function() disableTrigger("pickup_offhand_check") end)
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(You see no) (.*) here for you to take.$</string>
						<string>^You get (.*).$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>CFGUI Map Triggers</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>CF Failed Move Trigger</name>
					<script>raiseEvent("onMoveFail")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Alas, you cannot go that way.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>CF Vision Fail Trigger</name>
					<script>raiseEvent("onVisionFail")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You can't see a thing!</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>CF Random Move Trigger</name>
					<script>raiseEvent("onRandomMove")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^.+ has summoned you!$</string>
						<string>^You feel the currents drag you along.$</string>
						<string>^You flee from combat!$</string>
						<string>^.* has transferred you.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Map Adds</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>CF Random Move Trigger</name>
					<script>raiseEvent("onRandomMove")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^.+ has summoned you!</string>
						<string>^You feel the currents drag you along.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>CF Vision Fail Trigger</name>
					<script>raiseEvent("onVisionFail")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You can't see a thing!</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
		</TriggerGroup>
	</TriggerPackage>
	<TimerPackage>
		<TimerGroup isActive="yes" isFolder="yes" isTempTimer="no" isOffsetTimer="no">
			<name>CFGUI</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<time>00:00:00.000</time>
			<TimerGroup isActive="yes" isFolder="yes" isTempTimer="no" isOffsetTimer="no">
				<name>Logger</name>
				<script></script>
				<command></command>
				<packageName>Logger</packageName>
				<time>00:00:00.000</time>
				<TimerGroup isActive="yes" isFolder="yes" isTempTimer="no" isOffsetTimer="no">
					<name>Logging</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<time>00:00:00.000</time>
					<Timer isActive="no" isFolder="no" isTempTimer="no" isOffsetTimer="no">
						<name>Check File Size</name>
						<script>if not Logger.logging_file or Logger.splitSize == 0 then return end -- something not set right

Logger:_checkFileSize(Logger.logging_file, Logger.splitSize)</script>
						<command></command>
						<packageName></packageName>
						<time>00:10:00.000</time>
					</Timer>
				</TimerGroup>
			</TimerGroup>
			<Timer isActive="yes" isFolder="no" isTempTimer="no" isOffsetTimer="no">
				<name>Save Variables</name>
				<script>table.save(PkgPath .. "vt.lua", vt)
--echo("\n\nSaving variables\n\n")</script>
				<command></command>
				<packageName></packageName>
				<time>00:05:00.000</time>
			</Timer>
			<Timer isActive="no" isFolder="no" isTempTimer="no" isOffsetTimer="no">
				<name>FormatReminderTimer</name>
				<script>enableAlias("FormatReminder")
disableTimer("FormatReminderTimer")</script>
				<command></command>
				<packageName></packageName>
				<time>02:00:00.000</time>
			</Timer>
		</TimerGroup>
	</TimerPackage>
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>CFGUI</name>
			<script></script>
			<command></command>
			<packageName>CFGUI</packageName>
			<regex></regex>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Targeting &amp; Reflexes</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Use Variables</name>
					<script>-- Use Variables
-- Last modified v0.9
-- 1/13/2020</script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>esay</name>
						<script>send("esay "..esay.." "..matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^es (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>get food from container</name>
						<script>send("get "..food.." "..container)</script>
						<command></command>
						<packageName></packageName>
						<regex>^gf$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>quaff potion</name>
						<script>send("quaff "..(matches[2] or potion))</script>
						<command></command>
						<packageName></packageName>
						<regex>^qq(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>eat food</name>
						<script>send("eat "..(matches[2] or food))</script>
						<command></command>
						<packageName></packageName>
						<regex>^eat(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>action -&gt; target</name>
						<script>send(action.." "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^aa(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>drink drinkcontainer</name>
						<script>send("drink "..(matches[2] or drink))</script>
						<command></command>
						<packageName></packageName>
						<regex>^dr(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>get from container</name>
						<script>send("get "..(matches[2]).." "..container)</script>
						<command></command>
						<packageName></packageName>
						<regex>^gg(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>put_into_container</name>
						<script>send("put '"..(matches[2]).." "..container)</script>
						<command></command>
						<packageName></packageName>
						<regex>^pc(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>aid -&gt; ally</name>
						<script>send(aid.." "..(matches[2] or ally))</script>
						<command></command>
						<packageName></packageName>
						<regex>^zz(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>quaff potion</name>
						<script>send("quaff "..potion)</script>
						<command></command>
						<packageName></packageName>
						<regex>^qq$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>get potion from container</name>
						<script>send("get "..potion.." "..container)</script>
						<command></command>
						<packageName></packageName>
						<regex>^gp$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Set Variables</name>
					<script>-- Set Variables
-- Last modified v0.9
-- 1/13/2020</script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>set_action</name>
						<script>action = matches[2]
print("----------------------------------------------------------------")
cecho("&lt;steel_blue&gt;Action is now: &lt;gold&gt;"..action.."\n")

if target == nil then
	cecho("&lt;gray&gt;Set a &lt;white&gt;Target &lt;gray&gt;using the &lt;white&gt;target&lt;gray&gt; command.\n")
else 
	cecho("&lt;white&gt;Aliases include:\n&lt;white&gt;'aa'&lt;gray&gt; to: &lt;gold&gt;"..action.." "..target.."&lt;gray&gt; (based on your &lt;white&gt;Target&lt;gray&gt; variable)\n")
	cecho("&lt;white&gt;aa &lt;steel_blue&gt;&lt;name&gt;&lt;gray&gt; will target someone other than your set &lt;white&gt;Target&lt;gray&gt; with your &lt;white&gt;Action&lt;gray&gt; command.\n")
	cecho("&lt;gray&gt;Warriors can dash and execute their &lt;white&gt;action&lt;gray&gt; on their &lt;white&gt;target&lt;gray&gt; if both variables are set.\n")
end
print("----------------------------------------------------------------")
GUI.ActionInput:echo("&lt;center&gt;" .. action)
vt.action = action
table.save(PkgPath .. "vt.lua", vt)</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:action|act) (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>set_offhand_dual</name>
						<script>send(matches[1])
offhand = matches[2]
offhand_command = "dual"
GUI.OffhandInput:echo("&lt;center&gt;" .. offhand)
vt.offhand = offhand
table.save(PkgPath .. "vt.lua", vt)
updateWeaponConsole()</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:dua|dual) (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>set_target</name>
						<script>target = string.title(matches[2])
if id then killTrigger(id) end
id = tempTrigger(target, [[selectString("]] .. target .. [[", 1) setBold(true) deselect() resetFormat()]])
print("----------------------------------------------------------------")
cecho("&lt;steel_blue&gt;Target is now: &lt;gold&gt;"..target.."\n\n")
cecho("&lt;white&gt;Aliases include:\n&lt;white&gt;'m' &lt;gray&gt;or &lt;white&gt;'mm': &lt;gold&gt;murder "..target.."\n&lt;white&gt;'k'&lt;gray&gt; or &lt;white&gt;'kk'&lt;gray&gt; to &lt;gold&gt;kill "..target.."&lt;gray&gt;\n")
if action == nil then 
	cecho("&lt;gray&gt;Set an &lt;white&gt;Action&lt;gray&gt; using the &lt;white&gt;action&lt;gray&gt; command.\n")
else
 cecho("&lt;white&gt;'aa'&lt;gray&gt; to: &lt;gold&gt;"..action.." "..target.."&lt;gray&gt; (based on your &lt;white&gt;Action&lt;gray&gt; variable)\n")
end
print("----------------------------------------------------------------")
GUI.TargetInput:echo("&lt;center&gt;&lt;b&gt;" .. target)
vt.target = target
table.save(PkgPath .. "vt.lua", vt)
table.load(PkgPath.."vt.lua",vt)</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:tg|tar|targ|target) (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>set_ally</name>
						<script>ally = string.title(matches[2])
if ad then killTrigger(ad) end
ad = tempTrigger(ally, [[selectString("]] .. ally .. [[", 1) setBold(true) deselect() resetFormat()]])
print("----------------------------------------------------------------")
cecho("&lt;gray&gt;Ally is now: &lt;steel_blue&gt;"..ally.."\n\n")
cecho("&lt;gray&gt;Depending on your class, some of your aliases will target your ally with beneficial abilities.\n")
cecho ("&lt;gray&gt;Examples: &lt;white&gt;rr&lt;gray&gt; to &lt;white&gt;'rescue ally'&lt;gray&gt; or &lt;white&gt;ma&lt;gray&gt; to &lt;white&gt;co 'mend wounds' ally&lt;gray&gt;.\n")
print("----------------------------------------------------------------")
GUI.AllyInput:echo("&lt;center&gt;&lt;b&gt;" .. ally)
vt.ally = ally
table.save(PkgPath .. "vt.lua", vt)
table.load(PkgPath.."vt.lua",vt)</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:ally) (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>set_highlight</name>
						<script>highlight = matches[2]
if(matches[2] == "CLEAR") then
	killTrigger(id)
	cecho("\n&lt;gold&gt;Highlight cleared.\n")
	GUI.HighlightInput:echo("&lt;center&gt; --")
	vt.highlight = nil
else
	if id then killTrigger(id) end
	id = tempTrigger(highlight, [[selectString("]] .. highlight .. [[", 1) setBold(true) fg("gold") deselect()]])
	cecho("&lt;gray&gt;----------------------------------------------------------------\n")
	cecho("&lt;steel_blue&gt;Highlighting: &lt;gold&gt;"..highlight.."\n")
	cecho("&lt;gray&gt;Please note this highlight is case-sensitive.\n")
	cecho("&lt;gray&gt;Enter&lt;white&gt; 'highlight CLEAR'&lt;gray&gt; to clear all highlights.\n")
	cecho("&lt;gray&gt;----------------------------------------------------------------\n")
	vt.highlight = highlight
end

table.save(getMudletHomeDir() .. "CFGUI/vt.lua", vt)
update_reflex_console()</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:highlight|high) (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>set_mainhand_wield</name>
						<script>send(matches[1])
mainhand = matches[2]
GUI.MainhandInput:echo("&lt;center&gt;&lt;b&gt;" .. mainhand)
vt.mainhand = mainhand
table.save(getMudletHomeDir() .. "/CFGUI/vt.lua", vt)
updateWeaponConsole()</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:wi|wie|wiel|wield) (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>set_food</name>
						<script>food = [[']]..matches[2]..[[']]
print("----------------------------------------------------------------")
cecho("&lt;maroon&gt;Food is now: &lt;gold&gt;"..food.."\n")
cecho("&lt;gray&gt;'gf' &lt;maroon&gt;to get "..food.." from your container, and &lt;gray&gt;'eat'&lt;maroon&gt; without argument to eat it.\n")
cecho([[&lt;maroon&gt;Tip: For best results, type '&lt;gray&gt;keyword &lt;item&gt;&lt;maroon&gt;' and enter all keywords without quotes.]].."\n")
cecho([[&lt;maroon&gt;Example: &lt;gray&gt;setfood whole roasted chicken]].."\n")
print("----------------------------------------------------------------")
vt.food = food
table.save(getMudletHomeDir() .. "/CFGUI/vt.lua", vt)
update_reflex_console()</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:food|setfood) (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>set_drink</name>
						<script>drink = [[']]..matches[2]..[[']]
print("----------------------------------------------------------------")
cecho("&lt;maroon&gt;Drink is now: &lt;gold&gt;"..drink.."\n")
cecho("&lt;gray&gt;'dr' &lt;maroon&gt;without argument to drink from "..drink..".\n")
cecho([[&lt;maroon&gt;Tip: For best results, type '&lt;gray&gt;keyword &lt;item&gt;&lt;maroon&gt;' and enter all keywords without quotes.]].."\n")
cecho([[&lt;maroon&gt;Example: &lt;gray&gt;setdrink water jug large]].."\n")
print("----------------------------------------------------------------")
vt.drink = drink
table.save(getMudletHomeDir() .. "/CFGUI/vt.lua", vt)
update_reflex_console()</script>
						<command></command>
						<packageName></packageName>
						<regex>^setdrink (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>set_potion</name>
						<script>potion = [[']]..matches[2]..[[']]
print("----------------------------------------------------------------")
cecho("&lt;maroon&gt;Ready to quaff: &lt;gold&gt;"..potion.."\n")
cecho("&lt;gray&gt;'qq' &lt;maroon&gt;to quaff "..potion.." and &lt;gray&gt;'gp' to get your potion from your container.\n")
cecho([[&lt;maroon&gt;Tip: For best results, type '&lt;gray&gt;keyword &lt;item&gt;&lt;maroon&gt;' and enter all keywords without quotes.]].."\n")
cecho([[&lt;maroon&gt;Example: &lt;gold&gt;potion return potion]].."\n")
print("----------------------------------------------------------------")
vt.potion = potion
table.save(getMudletHomeDir() .. "/CFGUI/vt.lua", vt)
update_reflex_console()</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:potion|pot) (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>set_container</name>
						<script>container = [[']]..matches[2]..[[']]
print("----------------------------------------------------------------")
cecho("&lt;gray&gt;Your container is now: &lt;gold&gt;"..container.."\n")
cecho("&lt;white&gt;'gf' &lt;gray&gt;to get your set food from your container. &lt;white&gt;'gp'&lt;gray&gt; to get your set potion from your container.\n")
cecho("&lt;white&gt;gg &lt;steel_blue&gt;&lt;item&gt; &lt;gray&gt;(example: 'gg potion') &lt;gray&gt;to get an item from your container, or &lt;gray&gt;'pc'&lt;maroon&gt; to put something in.\n")
cecho([[&lt;white&gt;Tip:&lt;gray&gt; For best results, type '&lt;white&gt;keyword &lt;steel_blue&gt;&lt;item&gt;&lt;gray&gt;' and enter all keywords.]].."\n")
cecho([[&lt;gray&gt;Example: &lt;white&gt;setcontainer leather knapsack sack]].."\n")
print("----------------------------------------------------------------")
vt.container = container
table.save(getMudletHomeDir() .. "/CFGUI/vt.lua", vt)
update_reflex_console()</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:setcontainer|container|cont) (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>set_esay</name>
						<script>esay = [[']]..matches[2]..[[']]
print("----------------------------------------------------------------")
cecho("&lt;maroon&gt;Esay is now: &lt;gold&gt;"..esay.."\n")
if charname ~= nil then
	cecho([[&lt;maroon&gt;Entering '&lt;gray&gt;es Hello!&lt;maroon&gt;' will output this:]].."\n\n&lt;yellow&gt;"..charname.." says "..matches[2].." 'Hello!'\n\n")
	else
	cecho([[&lt;maroon&gt;Entering '&lt;gray&gt;es Hello!&lt;maroon&gt;' will output this:]].."\n\n&lt;yellow&gt;(Your character) says "..matches[2].." 'Hello!'\n\n")
end
cecho([[&lt;maroon&gt;Single quotes are not necessary when using setesay.]].."\n")
cecho([[&lt;maroon&gt;Example 1: &lt;gray&gt;setesay sadly]].."\n")
cecho([[&lt;maroon&gt;Example 2: &lt;gray&gt;setesay through clenched teeth]].."\n")
print("----------------------------------------------------------------")
update_reflex_console()
vt.esay = esay
table.save(getMudletHomeDir() .. "/CFGUI/vt.lua", vt)
</script>
						<command></command>
						<packageName></packageName>
						<regex>^setesay (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>set_aid</name>
						<script>aid = matches[2]
print("----------------------------------------------------------------")
cecho("&lt;steel_blue&gt;Aid is now: &lt;white&gt;"..aid.."\n")

if ally == nil then
	cecho("&lt;gray&gt;Set an &lt;white&gt;Ally &lt;gray&gt;using the &lt;white&gt;ally&lt;gray&gt; command.\n")
else 
	cecho("&lt;white&gt;Aliases include:\n&lt;white&gt;'zz'&lt;gray&gt; without argument to: &lt;gold&gt;"..aid.." "..ally.."&lt;gray&gt; (based on your &lt;white&gt;Ally&lt;gray&gt; variable)\n")
	cecho("&lt;white&gt;zz &lt;steel_blue&gt;&lt;name&gt;&lt;gray&gt; will target someone other than your set &lt;white&gt;Ally&lt;gray&gt; with your &lt;white&gt;Assist&lt;gray&gt; command.\n")
end
print("----------------------------------------------------------------")
GUI.AidInput:echo("&lt;center&gt;" .. aid)
vt.aid = aid
table.save(PkgPath .. "vt.lua", vt)</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:aid) (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>target_alone</name>
						<script>if target == nil then cecho("&lt;steel_blue&gt;Your target is not set. Use &lt;white&gt;target &lt;name&gt;&lt;steel_blue&gt; to set one.\n")
else
cecho("&lt;steel_blue&gt;Your target is: &lt;white&gt;"..target.."\n")
end
cecho("&lt;gray&gt;Use the &lt;white&gt;t1&lt;gray&gt;, &lt;white&gt;t2&lt;gray&gt;, &lt;white&gt;t3&lt;gray&gt;, and &lt;white&gt;t4&lt;gray&gt; commands to set alternative targets.\n\n")
</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:tg|tar|targ|target)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>action_alone</name>
						<script>if action == nil then cecho("&lt;steel_blue&gt;Your action is not set. Use &lt;white&gt;action &lt;name&gt;&lt;steel_blue&gt; to set one.\n")
else
cecho("&lt;steel_blue&gt;Your action is: &lt;white&gt;"..action.."\n")
end
cecho("&lt;gray&gt;Use the &lt;white&gt;a5&lt;gray&gt;, &lt;white&gt;a6&lt;gray&gt;, and &lt;white&gt;a7&lt;gray&gt; commands to set alternative actions.\n\n")
</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:action|act)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>target_clear</name>
						<script>target = nil</script>
						<command></command>
						<packageName></packageName>
						<regex>^cleartarget$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>set_offhand_hold</name>
						<script>send(matches[1])
offhand = matches[2]
offhand_command = "hold"
GUI.OffhandInput:echo("&lt;center&gt;" .. offhand)
vt.offhand = offhand
table.save(PkgPath .. "vt.lua", vt)
updateWeaponConsole()</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:ho|hol|hold) (.*)$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Target Swapping</name>
					<script>-- Target Swapping
-- Last modified v0.9
-- 1/13/2020</script>
					<command></command>
					<packageName></packageName>
					<regex>^t1</regex>
					<Alias isActive="yes" isFolder="no">
						<name>Target1</name>
						<script>if matches[2] == nil or matches[2] == "" then
cecho("&lt;gray&gt;Syntax:&lt;white&gt; t1 &lt;steel_blue&gt;name\n&lt;gray&gt;Example: &lt;white&gt;t1 joe&lt;gray&gt;\nYou will be able to press F1 to change your &lt;white&gt;Target&lt;gray&gt; to the name you set.\n\n")
else
t1 = string.title(matches[2])
cecho("&lt;white&gt;F1 will change your target to &lt;firebrick&gt;"..t1.."&lt;white&gt;.\n\n")
GUI.IconCSS:set("background-color","rgba(150,0,0,.4)")
GUI.Icon1:echo("&lt;center&gt;F1: "..t1)
vt.t1 = t1
table.save(PkgPath .. "vt.lua", vt)
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^t1(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Target2</name>
						<script>if matches[2] == nil or matches[2] == "" then
cecho("&lt;gray&gt;Syntax:&lt;white&gt; t2 &lt;steel_blue&gt;name\n&lt;gray&gt;Example: &lt;white&gt;t2 joe&lt;gray&gt;\nYou will be able to press F2 to change your &lt;white&gt;Target&lt;gray&gt; to the name you set.\n\n")
else
t2 = string.title(matches[2])
cecho("&lt;white&gt;F2 will change your target to &lt;firebrick&gt;"..t2.."&lt;white&gt;.\n\n")
GUI.IconCSS:set("background-color","rgba(150,0,0,.4)")
GUI.Icon2:echo("&lt;center&gt;F2: "..t2)
vt.t2 = t2
table.save(PkgPath .. "vt.lua", vt)
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^t2(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Target3</name>
						<script>if matches[2] == nil or matches[2] == "" then
cecho("&lt;gray&gt;Syntax:&lt;white&gt; t3 &lt;steel_blue&gt;name\n&lt;gray&gt;Example: &lt;white&gt;t3 joe&lt;gray&gt;\nYou will be able to press F3 or click to change your &lt;white&gt;Target&lt;gray&gt; to the name you set.\n\n")
else
t3 = string.title(matches[2])
cecho("&lt;white&gt;F3 will change your target to &lt;firebrick&gt;"..t3.."&lt;white&gt;.\n\n")
GUI.IconCSS:set("background-color","rgba(150,0,0,.4)")
GUI.Icon3:echo("&lt;center&gt;F3: "..t3)
vt.t3 = t3
table.save(PkgPath .. "vt.lua", vt)
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^t3(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Target4</name>
						<script>if matches[2] == nil or matches[2] == "" then
cecho("&lt;gray&gt;Syntax:&lt;white&gt; t4 &lt;steel_blue&gt;name\n&lt;gray&gt;Example: &lt;white&gt;t4 joe&lt;gray&gt;\nYou will be able to press F4 to change your &lt;white&gt;Target&lt;gray&gt; to the name you set.\n\n")
else
t4 = string.title(matches[2])
cecho("&lt;white&gt;F4 will change your target to &lt;firebrick&gt;"..t4.."&lt;white&gt;.\n\n")
GUI.IconCSS:set("background-color","rgba(150,0,0,.4)")
GUI.Icon4:echo("&lt;center&gt;F4: "..t4)
vt.t4 = t4
table.save(PkgPath .. "vt.lua", vt)
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^t4(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Action5</name>
						<script>if matches[2] == nil or matches[2] == "" then
cecho("&lt;gray&gt;Syntax:&lt;white&gt; a5 &lt;steel_blue&gt;&lt;command&gt;\n&lt;gray&gt;Example: &lt;white&gt;a5 bash&lt;gray&gt;\nYou will be able to press F5 to change your &lt;white&gt;Action&lt;gray&gt; to the command you set.\n\n")
else
a5 = string.title(matches[2])
cecho("&lt;white&gt;F5 will change your action to &lt;steel_blue&gt;"..a5.."&lt;white&gt;.\n\n")
GUI.Icon5:echo("&lt;center&gt;F5: "..a5)
vt.a5 = a5
table.save(PkgPath .. "vt.lua", vt)
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^a5(?: (.+))?$</regex>
						<Alias isActive="yes" isFolder="no">
							<name>Target5</name>
							<script>if matches[2] == nil or matches[2] == "" then
cecho("&lt;gray&gt;Syntax:&lt;white&gt; t5 &lt;steel_blue&gt;name\n&lt;gray&gt;Example: &lt;white&gt;t5 joe&lt;gray&gt;\nYou will be able to press 5 to change your &lt;white&gt;Target&lt;gray&gt; to the name you set. Your previous target can be restored by pressing F5 again.\n\n")
else
t5 = string.title(matches[2])
cecho("&lt;white&gt;F5 will change your target to &lt;firebrick&gt;"..t5.."&lt;white&gt;.\n\n")
GUI.Icon5:echo("F5: "..t5)
GUI.Icon5:setStyleSheet([[
background-color: rgba(150,0,0,.3);
  border-style: inset;
  border-width: 1px;
  border-color: "#aa8822";
  border-radius: 5px;
  margin: 5px;
	font-family: 'IM Fell DW Pica', serif;
  qproperty-wordWrap: true;
]])
vt.t5 = t5
table.save(PkgPath .. "vt.lua", vt)
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^t5(?: (.+))?$</regex>
						</Alias>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Action6</name>
						<script>if matches[2] == nil or matches[2] == "" then
cecho("&lt;gray&gt;Syntax:&lt;white&gt; a6 &lt;steel_blue&gt;&lt;command&gt;\n&lt;gray&gt;Example: &lt;white&gt;a6 bash&lt;gray&gt;\nYou will be able to press F6 to change your &lt;white&gt;Action&lt;gray&gt; to the command you set.\n\n")
else
a6 = string.title(matches[2])
cecho("&lt;white&gt;F6 will change your action to &lt;steel_blue&gt;"..a6.."&lt;white&gt;.\n\n")
GUI.Icon6:echo("&lt;center&gt;F6: "..a6)
vt.a6 = a6
table.save(PkgPath .. "vt.lua", vt)
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^a6(?: (.+))?$</regex>
						<Alias isActive="yes" isFolder="no">
							<name>Target5</name>
							<script>if matches[2] == nil or matches[2] == "" then
cecho("&lt;gray&gt;Syntax:&lt;white&gt; t5 &lt;steel_blue&gt;name\n&lt;gray&gt;Example: &lt;white&gt;t5 joe&lt;gray&gt;\nYou will be able to press 5 to change your &lt;white&gt;Target&lt;gray&gt; to the name you set. Your previous target can be restored by pressing F5 again.\n\n")
else
t5 = string.title(matches[2])
cecho("&lt;white&gt;F5 will change your target to &lt;firebrick&gt;"..t5.."&lt;white&gt;.\n\n")
GUI.Icon5:echo("F5: "..t5)
GUI.Icon5:setStyleSheet([[
background-color: rgba(150,0,0,.3);
  border-style: inset;
  border-width: 1px;
  border-color: "#aa8822";
  border-radius: 5px;
  margin: 5px;
	font-family: 'IM Fell DW Pica', serif;
  qproperty-wordWrap: true;
]])
vt.t5 = t5
table.save(PkgPath .. "vt.lua", vt)
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^t5(?: (.+))?$</regex>
						</Alias>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Action7</name>
						<script>if matches[2] == nil or matches[2] == "" then
cecho("&lt;gray&gt;Syntax:&lt;white&gt; a7 &lt;steel_blue&gt;&lt;command&gt;\n&lt;gray&gt;Example: &lt;white&gt;a5 bash&lt;gray&gt;\nYou will be able to press F7 to change your &lt;white&gt;Action&lt;gray&gt; to the command you set.\n\n")
else
a7 = string.title(matches[2])
cecho("&lt;white&gt;F7 will change your action to &lt;steel_blue&gt;"..a7.."&lt;white&gt;.\n\n")
GUI.Icon7:echo("&lt;center&gt;F7: "..a7)
vt.a7 = a7
table.save(PkgPath .. "vt.lua", vt)
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^a7(?: (.+))?$</regex>
						<Alias isActive="yes" isFolder="no">
							<name>Target5</name>
							<script>if matches[2] == nil or matches[2] == "" then
cecho("&lt;gray&gt;Syntax:&lt;white&gt; t5 &lt;steel_blue&gt;name\n&lt;gray&gt;Example: &lt;white&gt;t5 joe&lt;gray&gt;\nYou will be able to press 5 to change your &lt;white&gt;Target&lt;gray&gt; to the name you set. Your previous target can be restored by pressing F5 again.\n\n")
else
t5 = string.title(matches[2])
cecho("&lt;white&gt;F5 will change your target to &lt;firebrick&gt;"..t5.."&lt;white&gt;.\n\n")
GUI.Icon5:echo("F5: "..t5)
GUI.Icon5:setStyleSheet([[
background-color: rgba(150,0,0,.3);
  border-style: inset;
  border-width: 1px;
  border-color: "#aa8822";
  border-radius: 5px;
  margin: 5px;
	font-family: 'IM Fell DW Pica', serif;
  qproperty-wordWrap: true;
]])
vt.t5 = t5
table.save(PkgPath .. "vt.lua", vt)
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^t5(?: (.+))?$</regex>
						</Alias>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Weapon Sets</name>
					<script>-- Weapon Sets
-- Last modified v0.9</script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>weaponset</name>
						<script>local weapon_data = {}
local weaponset = matches[2]
local position = matches[3]
local weaponname = matches[4]
local success = false

if weaponsets == nil or not weaponsets[weaponset] then 
  cecho("&lt;white&gt;New weapon set created: &lt;firebrick&gt;"..weaponset.."&lt;gray&gt;\r\n\r\n")
  weapon_data = {wield = "none", dual = "none", hold = "none"}
  weaponsets[weaponset] = weapon_data
  weaponsets[weaponset][position] = weaponname
  elseif position == "dual" and weaponsets[weaponset]["hold"] ~= "none" then
    cecho("&lt;steel_blue&gt;Replacing held object &lt;white&gt;"..weaponsets[weaponset]["hold"].."&lt;steel_blue&gt; with dual-wielded &lt;white&gt;"..weaponname.."&lt;steel_blue&gt;.\r\n\r\n")
    weaponsets[weaponset]["hold"] = "none"
    weaponsets[weaponset]["dual"] = weaponname
  elseif position == "hold" and weaponsets[weaponset]["dual"] ~= "none" then
    cecho("&lt;steel_blue&gt;Replacing dual-wielded &lt;white&gt;"..weaponsets[weaponset]["hold"].."&lt;steel_blue&gt; with held object &lt;white&gt;"..weaponname.."&lt;steel_blue&gt;.\r\n\r\n")
    weaponsets[weaponset]["hold"] = weaponname
    weaponsets[weaponset]["dual"] = "none"
  else
  weaponsets[weaponset][position] = weaponname
  end    

cecho("&lt;orange_red&gt;» &lt;white&gt;"..string.title(weaponset).."\r\n")
cecho("&lt;steel_blue&gt;Wield: &lt;gray&gt;"..weaponsets[weaponset]["wield"].."\r\n")
if weaponsets[weaponset]["hold"] == "none" then
  cecho("&lt;steel_blue&gt;Dual wield: &lt;gray&gt;"..weaponsets[weaponset]["dual"].."\r\n\r\n")
else
  cecho("&lt;steel_blue&gt;Hold: &lt;gray&gt;"..weaponsets[weaponset]["hold"].."\r\n\r\n")
end

updateWeaponConsole()

table.save(PkgPath.."vt.lua", weaponsets)</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:weaponset|ws) (.*) (wield|dual|hold) (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>weaponset wield</name>
						<script>local set = matches[2]

if weaponsets[set] then
  cecho("&lt;steel_blue&gt;Switching to &lt;orange_red&gt;"..string.title(set).."&lt;steel_blue&gt;.\r\n")
  if weaponsets[set]["wield"] ~= "none"
  and weaponsets[set]["wield"] ~= mainhand then
    mainhand = weaponsets[set]["wield"]
    enableTrigger("wieldcheck")
    send("wield "..weaponsets[set]["wield"])
    GUI.MainhandInput:echo("&lt;center&gt;" .. mainhand)
  end

  if weaponsets[set]["dual"] ~= "none" 
  and weaponsets[set]["dual"] ~= offhand then
    offhand = weaponsets[set]["dual"]
    enableTrigger("dualcheck")
    send("dual "..weaponsets[set]["dual"])
    GUI.OffhandInput:echo("&lt;center&gt;" .. offhand)
  end

  if weaponsets[set]["hold"] ~= "none" 
  and weaponsets[set]["hold"] ~= offhand then
    offhand = weaponsets[set]["hold"]
    enableTrigger("holdcheck")
    send("hold "..weaponsets[set]["hold"])
    GUI.OffhandInput:echo("&lt;center&gt;" .. offhand)
  end

activeset = set
updateWeaponConsole()

table.save(PkgPath.."vt.lua", mainhand)
table.save(PkgPath.."vt.lua", offhand)
table.save(PkgPath.."vt.lua", activeset)

elseif not weaponsets[set] then
cecho("&lt;white&gt;Set '&lt;orange_red&gt;"..set.."&lt;white&gt;' not found!\r\n\r\n")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:weaponset|weaponswap|ws) (\w+|\d+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>weaponset alone</name>
						<script>cecho("&lt;gray&gt;Syntax: &lt;white&gt;ws &lt;steel_blue&gt;&lt;weapon set name&gt; &lt;wield/dual/hold&gt; &lt;object name&gt;\r\n \r\n&lt;gray&gt;Examples: &lt;white&gt;ws iron wield 'iron battleaxe'\r\nws iron dual 'tiny iron dagger'\r\n\r\nws defense wield longsword\r\nws defense hold shield\r\n\r\n")
displayWeaponSets()
updateWeaponConsole()</script>
						<command></command>
						<packageName></packageName>
						<regex>(^weaponset$|^ws$)</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>weaponset remove</name>
						<script>local setname = matches[2]

if weaponsets[setname] then weaponsets[setname] = nil
	cecho("&lt;white&gt;"..setname.."&lt;gray&gt; has been removed.\r\n")
	else cecho("&lt;white&gt;"..setname.."&lt;gray&gt; was not found on your list.\r\n")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:weaponset|ws) remove (\w+|\d+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>weaponset clear</name>
						<script>weaponsets = {}
echo("All weapon sets cleared.")
table.save(PkgPath.."vt.lua", weaponsets)</script>
						<command></command>
						<packageName></packageName>
						<regex>^weaponset clear$</regex>
					</Alias>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Weapon Manipulation</name>
						<script>-- Weapon Manipulation
-- Last modified v0.9</script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>get mainhand + wield mainhand</name>
							<script>send("get "..mainhand)
enableTrigger("pickup_mainhand_check")</script>
							<command></command>
							<packageName></packageName>
							<regex>^gw$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>hold offhand</name>
							<script>send("hold "..offhand)</script>
							<command></command>
							<packageName></packageName>
							<regex>^ho$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>dual wield offhand</name>
							<script>send("dual "..(matches[2] or mainhand))</script>
							<command></command>
							<packageName></packageName>
							<regex>^du(?: (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>wield mainhand</name>
							<script>send("wield "..(matches[2] or mainhand))</script>
							<command></command>
							<packageName></packageName>
							<regex>^wi(?: (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>get offhand + dual offhand</name>
							<script>send("get "..offhand)
enableTrigger("pickup_offhand_check")</script>
							<command></command>
							<packageName></packageName>
							<regex>^gd$</regex>
						</Alias>
					</AliasGroup>
				</AliasGroup>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Class Aliases</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<AliasGroup isActive="no" isFolder="yes">
					<name>Warrior</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<AliasGroup isActive="no" isFolder="yes">
						<name>mace</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>cranial</name>
							<script>send("cranial "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^cc(?: (.+))?$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="no" isFolder="yes">
						<name>axe</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Pincer</name>
							<script>send("pincer "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^pp(?: (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Weaponbreaker</name>
							<script>send("weaponbreak")</script>
							<command></command>
							<packageName></packageName>
							<regex>^bb$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Overhead</name>
							<script>send("overhead "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^oo(?: (.+))?$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="no" isFolder="yes">
						<name>sword</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
					</AliasGroup>
					<AliasGroup isActive="no" isFolder="yes">
						<name>whip and flail</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Strip</name>
							<script>send("strip "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^str(?: (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Choke</name>
							<script>send("choke "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^ck(?: (.+))?$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="no" isFolder="yes">
						<name>spear and staff</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Impale</name>
							<script>send("impale "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^ii(?: (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Legsweep</name>
							<script>send("lash "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^leg(?: (.+))?$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="no" isFolder="yes">
						<name>polearm</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Legsweep</name>
							<script>send("lash "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^leg(?: (.+))?$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="no" isFolder="yes">
						<name>dagger</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Hamstring</name>
							<script>send("hamstring "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^hh(?: (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Artery</name>
							<script>send("artery "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^art(?: (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Hurl Forearm</name>
							<script>send("hurl forearm "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^hf(?: (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Hurl Torso</name>
							<script>send("hurl torso "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^ht(?: (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Hurl Leg</name>
							<script>send("hurl leg "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^hl(?: (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Hurl Throat</name>
							<script>send("hurl throat "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^hth(?: (.+))?$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="no" isFolder="yes">
						<name>hand to hand</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Vital</name>
							<script>send("vital "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^vv(?: (.+))?$</regex>
						</Alias>
					</AliasGroup>
					<Alias isActive="yes" isFolder="no">
						<name>Bash</name>
						<script>send("bash "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^bb(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Charge</name>
						<script>send("charge "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ch(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Trip</name>
						<script>send("trip "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^tt(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Lash</name>
						<script>send("lash "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ll(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Rescue</name>
						<script>send("rescue "..(matches[2] or ally))</script>
						<command></command>
						<packageName></packageName>
						<regex>^rr(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Dirt kicking</name>
						<script>send("dirt "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^dd(?: (.+))?$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="no" isFolder="yes">
					<name>Thief</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>trip</name>
						<script>send("trip "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^tt(?: (.+))?$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Shaman</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<AliasGroup isActive="no" isFolder="yes">
						<name>Pain</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>wrack</name>
							<script>send("co 'wrack' "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^kk(?: (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>spasms</name>
							<script>send("co 'spasm' "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^ss(?: (.+))?$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="no" isFolder="yes">
						<name>Anarchy</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>sicken</name>
							<script>send("co 'sicken' "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^si(?: (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>chromatic fire</name>
							<script>send("co 'chromatic fire' "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^chr(?: (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>havoc</name>
							<script>send("co 'havoc' "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^hh(?: (.+))?$</regex>
						</Alias>
					</AliasGroup>
					<Alias isActive="yes" isFolder="no">
						<name>protective shield</name>
						<script></script>
						<command>co 'protective shield'</command>
						<packageName></packageName>
						<regex>^prot$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Damnation</name>
						<script>send("co 'damnation' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^nn(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>mend wounds commune</name>
						<script>send("co 'mend wounds'"..matches[2]..matches[3])</script>
						<command></command>
						<packageName></packageName>
						<regex>^mend(\s*)(.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Wither</name>
						<script>send("co 'wither' "..(matches[2] or target))
</script>
						<command></command>
						<packageName></packageName>
						<regex>^ww(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Dispel commune</name>
						<script>send("co 'dispel' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^dd(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Afflict</name>
						<script>send("co 'afflict' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ff(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Energy drain commune</name>
						<script>send("co 'energy drain' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ee(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Blindness</name>
						<script>send("co 'blindness' "..(matches[2] or target))
</script>
						<command></command>
						<packageName></packageName>
						<regex>^bl(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Curse commune</name>
						<script>send("co 'curse' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^cu(?: (.+))?$</regex>
					</Alias>
					<AliasGroup isActive="no" isFolder="yes">
						<name>Breaker</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Fearful Mind</name>
							<script>send("co 'fearful mind' "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^fm(?: (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Questioning thoughts</name>
							<script>send("co 'questioning thoughts' "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^tt(?: (.+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Anguish</name>
							<script>send("co 'anguish' "..(matches[2] or target))</script>
							<command></command>
							<packageName></packageName>
							<regex>^ang(?: (.+))?$</regex>
						</Alias>
					</AliasGroup>
					<Alias isActive="yes" isFolder="no">
						<name>Demonfire</name>
						<script>send("co 'demonfire' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^df(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Poison commune</name>
						<script>send("co 'poison' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^po(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Summon commune</name>
						<script>send("co 'summon' "..(matches[2] or target))
</script>
						<command></command>
						<packageName></packageName>
						<regex>^sum(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Famish</name>
						<script>send("co 'famish' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^fam(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Fatigue</name>
						<script>send("co 'fatigue' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^fat(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Plague commune</name>
						<script>send("co 'plague' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^pp(?: (.+))?$</regex>
					</Alias>
					<AliasGroup isActive="no" isFolder="yes">
						<name>Divine Anger</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
					</AliasGroup>
					<AliasGroup isActive="no" isFolder="yes">
						<name>Demonspawn</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
					</AliasGroup>
					<AliasGroup isActive="no" isFolder="yes">
						<name>Hells Pact</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
					</AliasGroup>
					<AliasGroup isActive="no" isFolder="yes">
						<name>Lifes Champion</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
					</AliasGroup>
					<AliasGroup isActive="no" isFolder="yes">
						<name>Revelation</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
					</AliasGroup>
					<AliasGroup isActive="no" isFolder="yes">
						<name>Seraphs Wing</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
					</AliasGroup>
					<AliasGroup isActive="no" isFolder="yes">
						<name>Vengeance</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
					</AliasGroup>
					<AliasGroup isActive="no" isFolder="yes">
						<name>Venoms</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
					</AliasGroup>
					<AliasGroup isActive="no" isFolder="yes">
						<name>Desolation</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
					</AliasGroup>
				</AliasGroup>
				<AliasGroup isActive="no" isFolder="yes">
					<name>Healer</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Protective shield</name>
						<script></script>
						<command>co 'protective shield'</command>
						<packageName></packageName>
						<regex>^prot$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Mend wounds on Ally</name>
						<script>send("co 'mend wounds' "..(matches[2] or ally))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ma(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Gate to Ally</name>
						<script>send("co 'gate' "..(matches[2] or ally))</script>
						<command></command>
						<packageName></packageName>
						<regex>^gate(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Word of recall commune</name>
						<script>send("co 'word of recall'"..matches[2]..matches[3])</script>
						<command></command>
						<packageName></packageName>
						<regex>^word(\s*)(.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Mend wounds commune</name>
						<script>send("co 'mend wounds'"..matches[2]..matches[3])</script>
						<command></command>
						<packageName></packageName>
						<regex>^mend(\s*)(.*)$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="no" isFolder="yes">
					<name>Druid</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Mend wounds on Ally</name>
						<script>send("co 'mend wounds' "..(matches[2] or ally))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ma(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Dirt kicking</name>
						<script>send("dirt "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^dd(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Mend wounds commune</name>
						<script>send("co 'mend wounds'"..matches[2]..matches[3])</script>
						<command></command>
						<packageName></packageName>
						<regex>^mend(\s*)(.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Call Lightning</name>
						<script>send("c 'call lightning' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ll(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Forest haven</name>
						<script>send("co 'forest haven'")</script>
						<command></command>
						<packageName></packageName>
						<regex>^hh$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="no" isFolder="yes">
					<name>Paladin</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Lay hands</name>
						<script>send("layhands "..(matches[2] or ally))</script>
						<command></command>
						<packageName></packageName>
						<regex>^lay(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Mend wounds on Ally</name>
						<script>send("co 'mend wounds' "..(matches[2] or ally))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ma(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Call Lightning</name>
						<script>send("c 'call lightning' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ll(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Rescue</name>
						<script>send("rescue "..(matches[2] or ally))</script>
						<command></command>
						<packageName></packageName>
						<regex>^rr(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Word of recall commune</name>
						<script>send("co 'word of recall'"..matches[2]..matches[3])</script>
						<command></command>
						<packageName></packageName>
						<regex>^word(\s*)(.*)$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="no" isFolder="yes">
					<name>Anti-Paladin</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Trip</name>
						<script>send("trip "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^tt(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Vault</name>
						<script>send("vault "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^vv(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Plague spell</name>
						<script>send("c 'plague' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^pp(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Lash</name>
						<script>send("lash "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ll(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Sleep spell</name>
						<script>send("c 'sleep' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ss(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Magic missile spell</name>
						<script>send("c 'magic missile' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^mag(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Power word despondence spell</name>
						<script>send("c 'power word despondence' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^pd(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Poison spell</name>
						<script>send("c 'poison' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^po(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Summon spell</name>
						<script>send("c 'summon' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^sum(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Energy drain spell</name>
						<script>send("c 'energy drain' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ee(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Bash</name>
						<script>send("bash "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^bb(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Deafen spell</name>
						<script>send("c 'deafen' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^dd(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Worldbind spell</name>
						<script>send("c 'worldbind' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ww(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Dirt kicking</name>
						<script>send("dirt "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^dd(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Curse spell</name>
						<script>send("c 'curse' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^cu(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Iron grip</name>
						<script>send("c 'iron grip'")</script>
						<command></command>
						<packageName></packageName>
						<regex>^iron$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Bloodlust</name>
						<script>send("c 'bloodlust")</script>
						<command></command>
						<packageName></packageName>
						<regex>^blood$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Blindness</name>
						<script>send("c 'blindess' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^bl(?: (.+))?$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="no" isFolder="yes">
					<name>Transmuter</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Word of recall spell</name>
						<script>send("c 'word of recall'"..matches[2]..matches[3])</script>
						<command></command>
						<packageName></packageName>
						<regex>^word(\s*)(.*)$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="no" isFolder="yes">
					<name>Shapeshifter</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Word of recall spell</name>
						<script>send("c 'word of recall'"..matches[2]..matches[3])</script>
						<command></command>
						<packageName></packageName>
						<regex>^word(\s*)(.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Faerie fire spell</name>
						<script>send("c 'faerie fire' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ff(?: (.+))?$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="no" isFolder="yes">
					<name>Necromancer</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Curse spell</name>
						<script>send("c 'curse' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^cu(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Energy drain spell</name>
						<script>send("c 'energy drain' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ee(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Faerie fire spell</name>
						<script>send("c 'faerie fire' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ff(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Blindness</name>
						<script>send("c 'blindess' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^bl(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Power word decay</name>
						<script>send("c 'power word decay' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^pd(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Power word kill</name>
						<script>send("c 'power word kill' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^pk(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Summon spell</name>
						<script>send("c 'summon' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^sum(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Sleep spell</name>
						<script>send("c 'sleep' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ss(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Word of recall spell</name>
						<script>send("c 'word of recall'"..matches[2]..matches[3])</script>
						<command></command>
						<packageName></packageName>
						<regex>^word(\s*)(.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Crimson scourge spell</name>
						<script>send("c 'crimson scourge' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^cr(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Chill touch spell</name>
						<script>send("c 'chill touch' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ch(?: (.+))?$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="no" isFolder="yes">
					<name>Invoker</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Word of recall spell</name>
						<script>send("c 'word of recall'"..matches[2]..matches[3])</script>
						<command></command>
						<packageName></packageName>
						<regex>^word(\s*)(.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Flare spell</name>
						<script>send("c 'flare' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ff(?: (.+))?$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="no" isFolder="yes">
					<name>Conjurer</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Word of recall spell</name>
						<script>send("c 'word of recall'"..matches[2]..matches[3])</script>
						<command></command>
						<packageName></packageName>
						<regex>^word(\s*)(.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Magic missile spell</name>
						<script>send("c 'magic missile' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^mag(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Faerie fire spell</name>
						<script>send("c 'faerie fire' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ff(?: (.+))?$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="no" isFolder="yes">
					<name>Berserker</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Bash</name>
						<script>send("bash "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^bb(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Dirt kicking</name>
						<script>send("dirt "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^dd(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Trip</name>
						<script>send("trip "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^tt(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Grapple weapon</name>
						<script>send("grappleweapon")</script>
						<command></command>
						<packageName></packageName>
						<regex>^gw$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Offhand grapple</name>
						<script>send("offhandgrapple")</script>
						<command></command>
						<packageName></packageName>
						<regex>^og$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="no" isFolder="yes">
					<name>Raider</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Trip</name>
						<script>send("trip "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^tt(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Dirt kicking</name>
						<script>send("dirt "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^dd(?: (.+))?$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="no" isFolder="yes">
					<name>Ranger</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Bearcharge</name>
						<script>send("bearcharge "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^bb(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Ambush onslaught</name>
						<script>send("ambush "..(matches[2] or target).." onslaught")</script>
						<command></command>
						<packageName></packageName>
						<regex>^oo(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Call lightning</name>
						<script>send("c 'call lightning' "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ll(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Dirt kicking</name>
						<script>send("dirt "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^dd(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Ambush Fade</name>
						<script>send("ambush "..(matches[2] or target).." fade")</script>
						<command></command>
						<packageName></packageName>
						<regex>^ff(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Ambush Cripple</name>
						<script>send("ambush "..(matches[2] or target).." cripple")</script>
						<command></command>
						<packageName></packageName>
						<regex>^cc(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Ambush Dive</name>
						<script>send("ambush "..(matches[2] or target).." dive")</script>
						<command></command>
						<packageName></packageName>
						<regex>^dive(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Waylay</name>
						<script>send("waylay "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^ww(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Ambush Distract</name>
						<script>send("ambush "..(matches[2] or target).." distract")</script>
						<command></command>
						<packageName></packageName>
						<regex>^tt(?: (.+))?$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="no" isFolder="yes">
					<name>Bard</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>trip</name>
						<script>send("trip "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^tt(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Dirt kicking</name>
						<script>send("dirt "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^dd(?: (.+))?$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="no" isFolder="yes">
					<name>Assassin</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>trip</name>
						<script>send("trip "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^tt(?: (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Dirt kicking</name>
						<script>send("dirt "..(matches[2] or target))</script>
						<command></command>
						<packageName></packageName>
						<regex>^dd(?: (.+))?$</regex>
					</Alias>
				</AliasGroup>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Cabal Aliases</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Utilities</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>setprompt</name>
					<script>promptstyle = string.trim(matches[2])

if promptstyle == "1" then
	send([[prompt ||%h %H %e %m %M %f %v %V %g %E||%-%W &lt;%hhp %mm %vmv %Xtnl (%P) %T&gt;]])
	cecho("&lt;gold&gt;The Default Prompt set. Basic isn't always basic.")
	vt.promptstyle = promptstyle
	
elseif promptstyle == "2" then
	send([[prompt ||%h %H %e %m %M %f %v %V %g %E||%-%W &lt;%ehp %fm %gmv %Xtnl (%P) %T&gt;]])
	cecho("&lt;gold&gt;The Percentage Prompt set. If it wasn't broke pre-level 30, don't fix it.")
	vt.promptstyle = promptstyle

elseif promptstyle == "3" then
	send([[prompt ||%h %H %e %m %M %f %v %V %g %E||%-%W &lt;%h/%Hhp %m/%Mm %v/%Vmv %Xtnl (%P) %T&gt;]])
	cecho("&lt;gold&gt;The Current/Max Prompt set.\nNOTE: May not display HP, Mana, Moves and/or Experience correctly if your character is under level 30.\nPre-30, all HP/Mana/Move numbers show as percentages.")
	vt.promptstyle = promptstyle

elseif promptstyle == "4" then
	send([[prompt ||%h %H %e %m %M %f %v %V %g %E||%-%W | %n | %I &lt;%hhp %mm %vmv %Xtnl (%P) %T&gt;]])
	cecho("&lt;gold&gt;The Wildling's Prompt set. Watch that moon!")
	vt.promptstyle = promptstyle

elseif promptstyle == "5" then
	send([[prompt ||%h %H %e %m %M %f %v %V %g %E||%-%W | %n | %I &lt;%ehp %fm %gmv %Xtnl (%P) %T&gt;]])
	cecho("&lt;gold&gt;The Wildling's Prompt II set. Keep watching that moon!")
	vt.promptstyle = promptstyle

elseif promptstyle == "6" then
	send([[prompt ||%h %H %e %m %M %f %v %V %g %E||%-%W | %n | %I &lt;%h/%Hhp %m/%Mm %v/%Vmv %Xtnl (%P) %T&gt;]])
	cecho("&lt;gold&gt;The Wildling's Prompt III set. Don't stop, can't stop watching that moon!")
	vt.promptstyle = promptstyle

elseif promptstyle == "7" then
	send([[prompt ||%h %H %e %m %M %f %v %V %g %E||%-%W | %d | %o &lt;%hhp %mm %vmv %Xtnl (%P) %T&gt;]])
	cecho("&lt;gold&gt;The Bard's Prompt set. Drink irresponsibly.")
	vt.promptstyle = promptstyle
	
elseif promptstyle == "8" then
	send([[prompt ||%h %H %e %m %M %f %v %V %g %E||%-%W &lt;%h|%ehp %m|%fm %v|%gmv %Xtnl (%P) %T&gt;]])
	cecho("&lt;gold&gt;The Hybrid Prompt set. Best of both worlds.\nNOTE: May not display HP, Mana, Moves and/or Experience correctly if your character is under level 30.\nPre-30, all HP/Mana/Move numbers show as percentages.")
	vt.promptstyle = promptstyle

elseif promptstyle == "9" then
	send([[prompt &lt;%h/%Hhp %m/%Mm %v/%Vmv (%Ptnl) (%T)(%I)(%p)(%W)(%a)&gt;]])
	cecho("&lt;gold&gt;The Merelith Prompt set. I guess that's your thing.")
	vt.promptstyle = promptstyle

elseif promptstyle == "0" then
	send([[prompt ||%h %H %e %m %M %f %v %V %g %E||%-%W &lt;%eh %fm %gv %Pxp&gt;]])
	cecho("&lt;gold&gt;The Tiny Prompt set. How cute!")
	vt.promptstyle = promptstyle

else
cecho("\n&lt;steel_blue&gt;==========================================================================================\n\n")
cecho("&lt;gray&gt;Enter &lt;white&gt;setprompt &lt;number&gt;&lt;gray&gt; to select from the following options:\n\n")
cecho("&lt;dodger_blue&gt;1&lt;gray&gt; - &lt;white&gt;The Default Prompt:&lt;gray&gt; Simple, solid, default. What everyone starts with.\n")
cecho("&lt;dodger_blue&gt;2&lt;gray&gt; - &lt;white&gt;The Percentage Prompt:&lt;gray&gt; HP, Mana and Moves are displayed only as percentages.\n")
cecho("&lt;dodger_blue&gt;3&lt;gray&gt; - &lt;white&gt;The Current/Max Prompt&lt;orange_red&gt;*&lt;white&gt;:&lt;gray&gt; HP, Mana and Moves are displayed as raw numbers, ie '98/98hp'\n")
cecho("&lt;dodger_blue&gt;4&lt;gray&gt; - &lt;white&gt;The Wildling's Prompt:&lt;gray&gt; The Default Prompt, but with indoor/outdoor and moon info.\n")
cecho("&lt;dodger_blue&gt;5&lt;gray&gt; - &lt;white&gt;The Wildling's Prompt II:&lt;gray&gt; The Percentage Prompt, but with indoor/outdoor and moon info.\n")
cecho("&lt;dodger_blue&gt;6&lt;gray&gt; - &lt;white&gt;The Wildling's Prompt III&lt;orange_red&gt;*&lt;white&gt;:&lt;gray&gt; The Current/Max Prompt, but with indoor/outdoor and moon info.\n")
cecho("&lt;dodger_blue&gt;7&lt;gray&gt; - &lt;white&gt;The Bard Prompt:&lt;gray&gt; Default prompt, but with booze and repertoire info.\n")
cecho("&lt;dodger_blue&gt;8&lt;gray&gt; - &lt;white&gt;The Hybrid Prompt&lt;orange_red&gt;*&lt;white&gt;:&lt;gray&gt; Current HP/Mana/Moves, alongside the percent.\n")
cecho("&lt;dodger_blue&gt;9&lt;gray&gt; - &lt;white&gt;The Merelith Prompt&lt;orange_red&gt;*&lt;white&gt;:&lt;gray&gt; A... 'deluxe' prompt for the player who wants it all.\n")
cecho("&lt;dodger_blue&gt;0&lt;gray&gt; - &lt;white&gt;The Tiny Prompt:&lt;gray&gt; For smaller screens, pared down as much as possible.\n\n")
cecho("&lt;orange_red&gt;*&lt;white&gt; - not recommended for characters below level 30&lt;gray&gt;, as hp/mana/moves can only be displayed as percentages until then.\n\n")
cecho("&lt;gray&gt;If your gauges or other displayed information behaves strangely, type &lt;white&gt;score&lt;gray&gt; ingame to reset them.\n\n")
cecho("&lt;gray&gt;You can create your own prompt in-game (see &lt;white&gt;HELP PROMPT&lt;gray&gt;) but it might not work well with this GUI.\n\n")
cecho("&lt;steel_blue&gt;===========================================================================================\n\n")
end

table.save(getMudletHomeDir() .. "/CFGUI/vt.lua", vt)</script>
					<command></command>
					<packageName></packageName>
					<regex>^setprompt(.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>GUI Help</name>
					<script>helpselect = matches[2]
clearWindow("HelpConsole")

if helpselect == '1' then

  HelpConsole:cecho([[&lt;white&gt;The Targeting System&lt;gray&gt;

Syntax: &lt;white&gt;tg/tar/targ/target &lt;steel_blue&gt;&lt;name&gt; &lt;gray&gt;| &lt;white&gt;act/action &lt;steel_blue&gt;&lt;command&gt; 
&lt;white&gt;pot/potion &lt;steel_blue&gt;&lt;potion&gt; &lt;gray&gt;| &lt;white&gt;main/mainhand &lt;steel_blue&gt;&lt;weapon&gt; &lt;gray&gt;| &lt;white&gt;offhand &lt;steel_blue&gt;&lt;held item or shield&gt;")

On the bottom console, you will see six boxes labeled &lt;white&gt;Target, Action, Potion, Ally, Mainhand, &lt;gray&gt;and&lt;white&gt; Offhand.&lt;gray&gt; This is the core of your targeting system. Each of these is a variable that you can set in order to allow you to enter commands more quickly.")

For example: if you &lt;white&gt;target John&lt;gray&gt; and set &lt;white&gt;action bash&lt;gray&gt;, then you can enter the preset &lt;white&gt;aa&lt;gray&gt; alias to 'bash john'. You can change either at any time as your needs and strategies change.")

Potion, mainhand and offhand each refer to items. It is recommended that you use the in-game &lt;white&gt;KEYWORD&lt;gray&gt; command and copy all of the keywords into these variables to avoid accidentally using the wrong item.

]])

helpLinks()

	elseif helpselect == '2' then
	HelpConsole:cecho([[&lt;white&gt;Pre-Set Aliases and 'Reflexes'&lt;gray&gt;
  
Syntax: &lt;white&gt;high/highlight &lt;steel_blue&gt;&lt;word or phrase&gt; &lt;gray&gt;
&lt;white&gt;food/setfood &lt;steel_blue&gt;&lt;food&gt;
&lt;white&gt;setdrink &lt;steel_blue&gt;&lt;drink&gt;&lt;gray&gt;&lt;white&gt;cont/container/setcontainer &lt;steel_blue&gt;&lt;container&gt;&lt;gray&gt;
&lt;white&gt;setesay &lt;steel_blue&gt;&lt;emote&gt;

&lt;white&gt;Aliases&lt;gray&gt; are like shortcuts that allow you to enter a complex command by just typing a few letters. We've designed a few to make your life easier.&lt;gray&gt;

Click the 'Aliases' button at the top of your screen, or go to Toolbox-&gt;Scripts-&gt;Aliases, and expand the CFGUI folder. You'll see a folder labeled 'Class Aliases'. Expand that folder and unlock your class folder to unlock aliases for your class and specialization.

&lt;white&gt;Reflexes&lt;gray&gt; are just a secondary targeting system that can be used to make your life easier. You can set your typical food, drink, container and esay emotes (see HELP ESAY in-game) and even a highlight phrase. Click the "REFLEXES" tab above to learn more.
	
]])
	
	helpLinks()
	
  elseif helpselect == '3' then
	HelpConsole:cecho([[&lt;white&gt;The Friends and Enemies System&lt;gray&gt;
	
Syntax: &lt;white&gt;info
&lt;white&gt;info &lt;steel_blue&gt;&lt;name&gt;&lt;white&gt;friend/people/enemy remove &lt;steel_blue&gt;&lt;name&gt;
&lt;white&gt;friend/people/enemy add &lt;steel_blue&gt;&lt;character name&gt;
&lt;white&gt;friend/enemy/people &lt;steel_blue&gt;&lt;name&gt; &lt;data category&gt; &lt;data&gt;

&lt;gray&gt;The Friends and Enemies System exists to help you keep track of characters you encounter. You can add &lt;white&gt;friends&lt;gray&gt;, &lt;white&gt;enemies&lt;gray&gt;, or just neutral &lt;white&gt;people&lt;gray&gt; to the list, and then fill in details about them as you learn more about them in-game. This useful feature might help you remember an enemy's cabal, a warrior's specializations or a shapeshifter's forms. On the WHO and WHERE lists, names of friends will be tinted blue, while enemies' will be tinted red.

&lt;gray&gt;To add a friend, use &lt;white&gt;friend add &lt;steel_blue&gt;&lt;name&gt;&lt;gray&gt;. To add an enemy or neutral people, use the same syntax, but with &lt;white&gt;enemy add&lt;gray&gt; or &lt;white&gt;people add&lt;gray&gt;. If a friend becomes an enemy or vice versa, you can use these commands to recategorize them without losing the data you've collected.

&lt;orange_red&gt;* &lt;gray&gt;We recommend that you begin by typing the &lt;white&gt;info&lt;gray&gt; command by itself.&lt;orange_red&gt; *
  
]])
  
  helpLinks()
	
  elseif helpselect == '4' then
	HelpConsole:cecho([[&lt;white&gt;Gauges and the 'Setprompt' Command&lt;gray&gt;
  
Syntax:&lt;white&gt;setprompt &lt;gray&gt; (shows all options)
&lt;white&lt;setprompt &lt;steel_blue&gt;&lt;number&gt;

&lt;gray&gt;The gauges on the bottom console show your health, mana, movement and experience to next level based on the percentage of each. They gather those numbers from your prompt, from level-up messages, and from the SCORE command, when you use it.

&lt;gray&gt;The&lt;white&gt; setprompt &lt;gray&gt;command offers you 10 pre-made prompts designed to give you information while ensuring the gauges continue to work as well as possible. If you are playing on a tiny screen, you may elect to choose shorter or simpler prompts that may cause certain parts of the GUI to cease working.

]])
  
  helpLinks()
	
	elseif helpselect == '5' then
	HelpConsole:cecho([[&lt;white&gt;How to Write an Alias in Mudlet&lt;gray&gt;
  
&lt;gray&gt;We offer two ways to make aliases and triggers in Mudlet: a simple alias/trigger system, and the default Mudlet way.

For complicated aliases and triggers, we recommend using the more full-featured Mudlet system described below. To get started making simple ones, type &lt;white&gt;/alias help&lt;gray&gt; or &lt;white&gt;/trigger help&lt;gray&gt;.

&lt;gray&gt;Creating an alias in Mudlet is pretty easy, but there's a learning curve. 

First, click the 'Aliases' button at the top of the screen or go to the Toolbox-&gt;Script Editor and select 'Aliases' on the menu on the lefthand side. You'll see what looks like a file system. You can click 'Add Group' to create your own folder, or simply 'Add Item' to get started on your new alias. &lt;orange_red&gt;*&lt;white&gt; Do not put your unique aliases in the CFGUI folder, or they will be lost when you update the Carrion Fields skin. &lt;orange_red&gt;*&lt;gray&gt;

To make the command &lt;white&gt;hh&lt;gray&gt; do 'HIDE', you would merely need to fill out the form: For the name, enter something easily recognizable like 'Hide'. Pattern: &lt;white&gt;^h$&lt;gray&gt;. The &lt;white&gt;^&lt;gray&gt; indicates the beginning of a line and the &lt;white&gt;$&lt;gray&gt; indicates the end. So you're telling the client that &lt;white&gt;h&lt;gray&gt;, all alone, will be exactly what you will enter when you want to HIDE. In the 'Command' box: &lt;white&gt;hide&lt;gray&gt;. This is literally what will be sent to the MUD.

For more complicated aliases, Mudlet uses Regular Expressions, a powerful way of matching patterns in text. It looks overwhelmingly complicated - and it can be. But for aliases here, it's pretty simple.
Here are some examples: 

Pattern: &lt;white&gt;^(?:mm)(?: (.+))?$]]..""..[[&lt;gray&gt;Script box: &lt;white&gt;send("murder "..(matches[2] or target))]]..[[

&lt;gray&gt;This alias allows you to type &lt;white&gt;mm&lt;gray&gt; and, if you include no other argument, it will input &lt;white&gt;murder (target)&lt;gray&gt;. If you do include another argument, like &lt;white&gt;mm joe&lt;gray&gt;, it will input &lt;white&gt;murder joe&lt;gray&gt;. 

We encourage you to copy and modify of our aliases to make your own. Right-click on an alias in the Alias menu and click copy, paste it, then modify its name and function.

&lt;orange_red&gt;* &lt;white&gt;Caution: Be sure your simple alias/triggers are not the same as your Mudlet aliases/triggers to avoid double-firing! &lt;orange_red&gt;*

&lt;orange_red&gt;* &lt;white&gt;Scroll up to read this entire help article. &lt;orange_red&gt;*
	
]])
  
  helpLinks("Help with Regular Expressions:", "The Regular Expressions Cheat Sheet", [[www.rexegg.com/regex-quickstart.html]], "RegEx Cheat Sheet")
	
	elseif helpselect == '6' then
	HelpConsole:cecho([[&lt;white&gt;How to Set Hotkeys&lt;gray&gt;

Click the 'Keys' button at the top of the screen or go to the Toolbox-&gt;Script Editor and select Keys from the menu on the lefthand side of the window. From there, click 'Add Item'. Give your key macro a name, then click 'grab key'. Then, simply press the key you desire to define, and fill in the command you'd like it to send. If you want to use a variable - for instance, have F1 do &lt;white&gt;murder (target)&lt;gray&gt;, skip the command box (which only sends literal commands to the MUD) and in the bigger script box type: &lt;white&gt;send("murder "..target)&lt;gray&gt;

By default, we've set the keypad as follows: 8, 6, 2, and 4 are north, east, south and west, respectively. 7 is flee. 5 is look. 9 is up, 3 is down. 1 is where, and + executes your set Action against your set Target. Some classes, including rangers and warriors, can use some special directional skills by combining alt+keypad keys.

Additionally, your F1-F7 keys are set up for a Target Swapping system, which you can read about by entering &lt;white&gt;guihelp 7&lt;gray&gt;.

]])
	
	helpLinks()

	elseif helpselect == '7' then
	HelpConsole:cecho([[&lt;white&gt;Target Swapping&lt;gray&gt;
  
&lt;gray&gt;Syntax:&lt;white&gt; t1 &lt;steel_blue&gt;&lt;name&gt;&lt;gray&gt;
&lt;white&gt;t2 &lt;steel_blue&gt;&lt;name&gt;&lt;gray&gt; 
&lt;white&gt;t3 &lt;steel_blue&gt;&lt;name&gt;&lt;gray&gt;
&lt;white&gt;t4 &lt;steel_blue&gt;&lt;name&gt;&lt;gray&gt;	

&lt;gray&gt;Each of these commands adds an alternate target to buttons at the top of your interface. The &lt;white&gt;t1&lt;gray&gt; command sets a name that will become your &lt;white&gt;Target&lt;gray&gt; when you press the F1 key or click the button. The &lt;white&gt;t2&lt;gray&gt; command corresponds to your F2 key, and so on.

&lt;gray&gt;For example: Edward is your Target, and Jacob is your t1 alternate target. You press F1 or click on Jacob's name. Jacob then becomes your Target.
	
The &lt;white&gt;a5, a6, and a7&lt;gray&gt; commands can be used to add alternate actions to the buttons at the top of your interface.

See &lt;white&gt;guihelp 1&lt;gray&gt; for more on The Targeting System and &lt;white&gt;guihelp 6&lt;gray&gt; for more on hotkeys.
	
]])
  
	helpLinks()

	elseif helpselect == '8' then
	HelpConsole:cecho([[&lt;white&gt;Logging &amp; The Item Journal&lt;gray&gt;
  
&lt;gray&gt;Syntax:&lt;white&gt; log &lt;steel_blue&gt;&lt;filename&gt;&lt;white&gt;
searchlog &lt;filename&gt; &lt;word or phrase&gt;

&lt;gray&gt;Examples: &lt;white&gt;log cabalraid&lt;gray&gt;
&lt;white&gt;searchlog cabalraid is DEAD!!&lt;gray&gt;

&lt;gray&gt;You can use the &lt;white&gt;log&lt;gray&gt; command to start a log. If you enter a filename that doesn't exist, it will create it as a text file in the log folder, which can be easily accessed by clicking the 'Items &amp; Logs' button at the top right corner of the screen. Use &lt;white&gt;log off&lt;gray&gt; to stop logging. The &lt;white&gt;searchlog&lt;gray&gt; command will find instances of a word or set of words in a log.

&lt;gray&gt;Additionally, every time you identify an item, it will automatically be logged in items.txt. Again, you can access that file folder using the 'Items &amp; Logs' button.

&lt;gray&gt;This quick logging function was contributed by a member of the Mudlet community. If you want to create more robust logs, you may use Mudlet's stock logging or replay features, located in the row of buttons to the right of the input prompt.
	
]])
	
  helpLinks("See the Mudlet forums for more on", "The Simple Logger", "https://forums.mudlet.org/viewtopic.php?t=1424", "Simple Logger Forum Topic")

	elseif helpselect == '9' then
	HelpConsole:cecho([[&lt;white&gt;Maps&lt;gray&gt;

&lt;gray&gt;The map of The Newbie Academy is included with this skin. However, the map does not show hidden rooms.

You can create your own maps of areas that you can save and use across multiple characters. However, we ask that you respect the rules and not share secrets and especially do not share Explore Areas. Rule violations can result in character denials or a siteban.

To get started mapping, use the &lt;white&gt;map basics&lt;gray&gt; command.

&lt;gray&gt;Additionally, you can click the &lt;white&gt;World Map&lt;gray&gt; button to see an artistic rendering of the overworld, and the &lt;white&gt;Wiki Maps&lt;gray&gt; button to travel to an external website with text-based maps that are updated often by players.
  
]])
	
	helpLinks("For detailed help, see", "The Mudlet Mapping Manual", "https://wiki.mudlet.org/w/Manual:Technical_Manual#Mapper", "The Mudlet Mapping Manual")
	
  
  elseif helpselect == '0' then
	HelpConsole:cecho([[&lt;white&gt;Troubleshooting&lt;gray&gt;
  
&lt;gray&gt;Many issues with the GUI can be fixed by entering SCORE or AFF in-game. On rare occasions, you may need to use the setprompt command again. If something seems hopelessly broken, try restarting Mudlet. If that fails, try creating a new profile and reloading this package. If you have further questions, comments or suggestions, please email rahsael@carrionfields.com and I'll do my best to help you out. If you're having trouble with an alias or some other type of customization, and copying/modifying an existing one isn't cutting it, check out Mudlet's wiki and forums - they do a great job and the community there is extremely supportive.
	
  
]])
  
	helpLinks()

	else
	help_menu()
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^guihelp(?: (.+))?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>GUIsave</name>
					<script>GUIframe.saveSettings()
echo("\n\nGUI saving. To reset, use the 'guireset' command.\n\n")

-- To save and load settings, use the GUIframe.saveSettings() and
-- GUIframe.loadSettings(redraw) functions. If the redraw argument is true, the border
-- background color is changed to black to force the area of the borders to be redrawn.
-- Additionally, the GUIframe.reinitialize() function can be used to force the script to
-- initialize itself again, going back to default settings.</script>
					<command></command>
					<packageName></packageName>
					<regex>^guisave$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>GUIreset</name>
					<script>echo("\n\nGUI reinitializing.\n\n")
GUIframe.reinitialize()
GUIframe.saveSettings()
resetProfile()
--GUIframe.loadSettings(redraw)</script>
					<command></command>
					<packageName></packageName>
					<regex>^guireset$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>outgoing damage</name>
					<script>if outgoing ~= true then
	echo("\n\n * * * Outgoing damage highlighted to yellow * * *")
	outgoing = true
	enableTrigger("outgoing")
	end
	
if outgoing == true then
	echo("\n\n * * * Outgoing damage no longer highlighted. * * *")
	outgoing = false
	disableTrigger("outgoing")
	end
	
vt.outgoing = outgoing
table.save(PkgPath.."vt.lua", vt)</script>
					<command></command>
					<packageName></packageName>
					<regex>^outgoing$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Prompt</name>
					<script>-- Sends a custom prompt, but with the invisible section that informs the gauges, etc.

send("prompt ||%h %H %e %m %M %f %v %V %g %E||%-"..matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^prompt (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Format</name>
					<script>echo("Opening formatter...\n\n")
openWebPage("http://forums.carrionfields.com/dc/user_files/61.html")</script>
					<command></command>
					<packageName></packageName>
					<regex>^format$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>FormatReminder</name>
					<script>send(matches[1], false)
cecho("&lt;steel_blue&gt;Reminder: Use the &lt;white&gt;format&lt;steel_blue&gt; command to open your easy formatter.\n")
disableAlias("FormatReminder")
enableTimer("FormatReminderTimer")</script>
					<command></command>
					<packageName></packageName>
					<regex>^(note subject|note to|role subject|role|desc|note \+|role \+)(.*)$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>General</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>murder (target)</name>
					<script>send("murder "..(matches[2] or target))</script>
					<command></command>
					<packageName></packageName>
					<regex>^(?:mm|m)(?: (.+))?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>kill (target)</name>
					<script>send("kill "..(matches[2] or target))</script>
					<command></command>
					<packageName></packageName>
					<regex>^(?:kk|k)(?: (.+))?$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Friends and Enemies</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Friend/Enemy Add</name>
					<script>local person_data = {}
local success = false
local prelationship = matches[2]

if matches[3] == "add" then
	local pname = string.title(matches[4])
	if not people[pname] then		
			person_data = {race = "not entered", class = "not entered", cabal = "not entered", abilities = "not entered", reason = "not entered", note = "not entered", relationship = prelationship}
			people[pname] = person_data
			cecho("\n&lt;gray&gt;==========================================================================================\n\n")
			cecho("&lt;steel_blue&gt;"..pname.."&lt;gray&gt; added to "..prelationship.." list.\n\n")
      cecho("&lt;gray&gt;Enter &lt;white&gt;info "..pname.." &lt;gray&gt;to get started recording information about them, or &lt;white&gt;"..prelationship.." remove "..pname.."&lt;gray&gt; to remove them.\n\n")
			cecho("To change a friend to an enemy, or vice versa, use the &lt;white&gt;friend add&lt;gray&gt; or &lt;white&gt;enemy add&lt;gray&gt; commands.\n\n")
			cecho("To clear ALL friends and enemies from your list and start over, use &lt;white&gt;clearpeople&lt;gray&gt;.\n\n")
			cecho("&lt;gray&gt;==========================================================================================\n\n")
			success = true
	elseif people[pname]["relationship"] == prelationship then
		cecho("&lt;white&gt;"..pname.."&lt;gray&gt; is already on your "..prelationship.." list.\n\n")
	elseif people[pname] and people[pname]["relationship"] ~= nil then
			cecho("&lt;white&gt;"..pname.."&lt;gray&gt;, formerly a "..people[pname]["relationship"]..", has been moved to your "..prelationship.." list.\n\n")
			people[pname]["relationship"] = prelationship
			success = true
	else
	end
elseif matches[3] == "remove" then
	local pname = string.title(matches[4])
	if people[pname] then people[pname] = nil
				cecho("&lt;white&gt;"..pname.."&lt;gray&gt; has been removed from your list.\n\n")
				success = true
		else cecho("&lt;white&gt;"..pname.."was not found on your list.")
	end
elseif people[string.title(matches[3])] then
	local pname = string.title(matches[3])
	local pcategory = string.lower(matches[4])
	if pcategory == "class" 
	or pcategory == "race" 
	or pcategory == "cabal" 
	or pcategory == "abilities"
	or pcategory == "reason" 
	or pcategory == "note"
	and matches[5] ~= nil then
		local pinput = matches[5]
		people[pname][pcategory] = string.title(pinput)
		cecho(pname.."'s "..pcategory.." recorded as '"..string.title(pinput).."'.\n\n")
		success = true
	else
		cecho("&lt;gray&gt;Syntax: &lt;white&gt;friend/enemy &lt;steel_blue&gt;&lt;add/remove&gt;\n&lt;gray&gt;or&lt;white&gt; friend/enemy&lt;steel_blue&gt; &lt;name&gt; &lt;category&gt; &lt;message&gt;\n&lt;gray&gt;Examples:&lt;white&gt; friend add Joe &lt;gray&gt;or&lt;white&gt; enemy Bob spec sword/whip&lt;gray&gt;\nValid categories are: &lt;white&gt;class&lt;gray&gt;, &lt;white&gt;race&lt;gray&gt;, &lt;white&gt;cabal&lt;gray&gt;, &lt;white&gt;spec&lt;gray&gt;, &lt;white&gt;reason&lt;gray&gt;, and &lt;white&gt;note&lt;gray&gt;.\n\n")
	end
end

if success == true then
	table.save(PkgPath.."people.lua", people)
end
</script>
					<command></command>
					<packageName></packageName>
					<regex>^(enemy|friend|people)\s*(\w+)\s*(\w+)\s*(.*)</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Clear People</name>
					<script>people = {}
echo("Friends and enemies cleared.")
table.save(PkgPath.."people.lua", people)</script>
					<command></command>
					<packageName></packageName>
					<regex>^clearpeople$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Info</name>
					<script>local person = string.title(matches[2])
if people[person] then
		cecho("===============================================\n\n")
		cecho("&lt;steel_blue&gt;"..string.title(people[person]["relationship"])..": &lt;white&gt;"..person.."\n")
		cecho("&lt;steel_blue&gt;Race:&lt;gray&gt; "..people[person]["race"].."   &lt;steel_blue&gt;Class:&lt;gray&gt; "..people[person]["class"].."   &lt;steel_blue&gt;Cabal:&lt;gray&gt; "..people[person]["cabal"].."\n")
		cecho("&lt;steel_blue&gt;Abilities:&lt;gray&gt; "..people[person]["abilities"].."\n")
		cecho("&lt;steel_blue&gt;Reason for friendship or rivalry:&lt;gray&gt; "..people[person]["reason"].."\n")
		cecho("&lt;steel_blue&gt;Additional note:&lt;gray&gt; "..people[person]["note"].."\n\n")
    cecho("&lt;gray&gt;To add more information, use: &lt;white&gt;"..people[person]["relationship"].." "..person.." &lt;category&gt; &lt;information&gt; \n")
    cecho("&lt;gray&gt;Categories include: &lt;white&gt;race&lt;steel_blue&gt;,&lt;white&gt; class&lt;steel_blue&gt;,&lt;white&gt; cabal&lt;steel_blue&gt;,&lt;white&gt; abilities&lt;steel_blue&gt;,&lt;white&gt; reason&lt;steel_blue&gt;,&lt;white&gt; note&lt;steel_blue&gt;.\n\n")
    cecho("&lt;gray&gt;To change "..person.."'s status as a friend, neutral or enemy, use the &lt;white&gt;friend add&lt;gray&gt;,&lt;white&gt; people add&lt;gray&gt;, or &lt;white&gt;enemy add&lt;gray&gt; commands.\n\n")
		cecho("===============================================\n\n")
    else cecho("\n&lt;gray&gt;Could not find &lt;white&gt;"..person.."&lt;gray&gt; in your friends or enemies lists. Type &lt;white&gt;info&lt;gray&gt; to see a list of names, or add them with &lt;white&gt;enemy add&lt;gray&gt; or &lt;white&gt;friend add&lt;gray&gt;.\n\n")
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^info(?: )(\w+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Info list</name>
					<script>cecho("&lt;steel_blue&gt;You have notes on the following people:&lt;white&gt;\n\n")

for index, data in pairs(people) do

if data["relationship"] == "friend" then
  relationshipcolor = "&lt;steel_blue&gt;"
elseif data["relationship"] == "enemy" then
  relationshipcolor = "&lt;orange_red&gt;"
else relationshipcolor = "&lt;gainsboro&gt;"
end

  cecho("&lt;orange_red&gt;» &lt;white&gt;"..index.." ("..relationshipcolor..data["relationship"].."&lt;white&gt;)\n")
  
--  for key, value in pairs(data) do
--   echo('\t', key, value)
--  end
end

cecho("&lt;steel_blue&gt;\nUse &lt;white&gt;info &lt;name&gt;&lt;steel_blue&gt; to view more information, or &lt;white&gt;friend add &lt;name&gt;&lt;steel_blue&gt;, &lt;white&gt;enemy add &lt;name&gt;&lt;steel_blue&gt;, or&lt;white&gt; people add &lt;name&gt;&lt;steel_blue&gt; to add a new entry.\n") </script>
					<command></command>
					<packageName></packageName>
					<regex>^info\s*$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Logger</name>
				<script></script>
				<command></command>
				<packageName>Logger</packageName>
				<regex></regex>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Logging</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Search</name>
						<script>Logger:SearchLog(matches[2], matches[3])</script>
						<command></command>
						<packageName></packageName>
						<regex>^searchlog (\w+) (.*)</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Log Section</name>
						<script>if matches[2] == "off" then Logger:StopLogging()
else
	Logger:LogSection(matches[2], {"timestamp", split = 5000})
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^log (\w+)$</regex>
					</Alias>
					<Alias isActive="no" isFolder="no">
						<name>Item Journal alias</name>
						<script>if matches[2] == "" or matches[2] == nil or matches[2] == "score" or matches[2] == "sc" or matches[2] == "sco" or matches[2] == "scor" then
	cecho("&lt;gray&gt;Syntax: &lt;white&gt;journal &lt;steel_blue&gt;&lt;identification command&gt;\n&lt;gray&gt;Example: &lt;white&gt;journal c 'identify' sword&lt;gray&gt; or &lt;white&gt;journal recite identify boots\n\n")
	else
	send(matches[2])
	enableTrigger("IDlogStart")
	end</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?:journal|ij)(?: (.*))?$</regex>
					</Alias>
				</AliasGroup>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>DarkTheme</name>
				<script></script>
				<command></command>
				<packageName>DarkTheme</packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>ThemeToggle</name>
					<script>if matches[2] == "dark" then DarkTheme() echo("\nTheme set to Dark.")
   elseif matches[2] == "light" then setAppStyleSheet([[]]) echo("\nTheme reset.")
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^theme(?: (dark|light))$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="no" isFolder="yes">
				<name>* * * ALIAS TEMPLATES * * *</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="no" isFolder="no">
					<name>* * * ARGUMENT OR TARGET * * *</name>
					<script>--
--
-- FIRST: Right-click on the name of this alias in the window to the left and select "copy," and then right-click
-- and "paste" it into another folder before editing.
--
--** MAKE SURE THE NEW ALIAS IS UNLOCKED WHEN YOU'RE DONE! ** The box next to the name should have a green checkmark inside.
-- Double-click it if it isn't.
--
-- This alias will execute the command in quotes below on the person you specify after the command
-- OR, if you don't specify a victim, it will automatically aim at the person specified in your Target
-- variable, if you have one.
--
-- Let's say your Target variable is set to "Ishuli".
--
-- Example 1: ll Rahsael -&gt; c 'call lightning' Rahsael
-- Example 2: ll -&gt; c 'call lightning' Ishuli
--
-- Change the "ll" in the "Pattern" box above to change the alias. Test it before use to make sure it 
-- isn't the same as other active aliases, or Mudlet will enter both commands!
-- 
-- To change the command itself, edit the words in quotes below, leaving the empty space in place. 
-- For example: send("dirtkick "..matches[2] or target))
-- or, for more complicated commands, send("apply "..matches[2] or target.." knock-out inhaled"))

send("c 'call lightning' "..(matches[2] or target))</script>
					<command></command>
					<packageName></packageName>
					<regex>^ll(?: (.+))?$</regex>
				</Alias>
				<Alias isActive="no" isFolder="no">
					<name>* * * ARGUMENT OR ALLY * * *</name>
					<script>-- Right-click on the name of this alias in the window to the left and select "copy," and then right-click
-- and "paste" it into another folder before editing.
--
--** MAKE SURE THE NEW ALIAS IS UNLOCKED WHEN YOU'RE DONE! ** The box next to the name should have a green checkmark inside.
-- Double-click it if it isn't.
--
-- This alias will execute the command in quotes below on the person you specify after the command
-- OR, if you don't specify a victim, it will automatically aim at the person specified in your Ally
-- variable, if you have one.
--
-- Let's say your Target variable is set to "Korsgaard".
--
-- Example 1: heal Daphedee -&gt; co 'heal' Daphedee
-- Example 2: heal -&gt; co 'heal' Korsgaard
--
-- Change the "heal" in the "Pattern" box above to change the alias. Test it before use to make sure it 
-- isn't the same as other active aliases, or Mudlet will enter both commands! 
--
-- To change the command itself, edit the words in quotes below, leaving the empty space in place. 
-- For example: send("rescue "..matches[2] or ally))

send("co 'heal' "..(matches[2] or ally))</script>
					<command></command>
					<packageName></packageName>
					<regex>^heal(?: (.+))?$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="no" isFolder="yes">
				<name>Affects</name>
				<script>tracked_affects = {}</script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
			</AliasGroup>
		</AliasGroup>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>CFGUI</name>
			<packageName>CFGUI</packageName>
			<script></script>
			<eventHandlerList />
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>GUI</name>
				<packageName></packageName>
				<script>-- Built for Carrion Fields using a modified version of:
-- Jor'Mox's GUIframe Script
-- 3/07/2019
-- v1.4.2
--
-- Also uses Simple Logger by Wyd: https://forums.mudlet.org/viewtopic.php?t=1424
--
-- CF Add: Special thanks to:
--
-- Quixotic for contributing code, Kharne for contributing maps, and Tronimal, Merelith,
-- and many others for testing and sharing!
--
--  Contact rahsael@carrionfields.com for help.

-- To resize frames or move tabs, right click and drag either the resize label or the tab
-- until the desired result is achieved.

-- To add a window to a frame for the script to manage, use the
-- GUIframe.addWindow(window, name, container, hideText) function, where the window
-- variable contains the Geyser object you want to add, the name variable contains
-- the name you want it to be referred to as, which also is used as the text printed
-- on the associated tab that is created, the container variable is a string containing
-- one of the following: bottom, top, topleft, topright, bottomleft, bottomright,
-- and the hideText variable is an optional boolean which, if true, prevents text being
-- written on the tab for this window.

-- To remove a window from GUIframe, use the GUIframe.removeWindow(name, container)
-- function, where the name variable is the same name you gave the window when adding it,
-- and the optional container variable is a string specifying which container to remove
-- the window from. If no container is specified, the window is removed regardless of
-- which container it is in.

-- Resizing of frames can be enabled or disabled using the GUIframe.enable(side) and
-- GUIframe.disable(side, hide) functions respectively. If the second argument to
-- GUIframe.disable is false, then the entire set of frames on that side is hidden, and
-- the border is adjusted as if that side had be resized to zero.

-- To save and load settings, use the GUIframe.saveSettings() and
-- GUIframe.loadSettings(redraw) functions. If the redraw argument is true, the border
-- background color is changed to black to force the area of the borders to be redrawn.
-- Additionally, the GUIframe.reinitialize() function can be used to force the script to
-- initialize itself again, going back to default settings.

-- To activate a tab without it being clicked, use the GUIframe.activate(name) function.
-- And to apply a stylesheet to a tab that is different from the default stylesheet, use
-- the GUIframe.styleTab(name, style) function, where the style variable contains a string
-- with the CSS to be applied. Since tabs are styled only when created or when this
-- function is used, there should be no concern with this styling being overwritten.

GUI = GUI or {}
GUIframe = GUIframe or {}
vt = {}
people = {}
targets = {}
weaponsets = {}

-- To save and load settings, use the GUIframe.saveSettings() and
-- GUIframe.loadSettings(redraw) functions. If the redraw argument is true, the border
-- background color is changed to black to force the area of the borders to be redrawn.
-- Additionally, the GUIframe.reinitialize() function can be used to force the script to
-- initialize itself again, going back to default settings.

PkgPath = getMudletHomeDir().."/CFGUI/"
ImgPath = getMudletHomeDir().."/CFGUI/imgs/"

-- Loading previous variable settings...
if not (io.exists(PkgPath .. "vt.lua")) then
	echo("\n\nError: Can't find vt.lua\n\n")
	else
	table.load(PkgPath.."vt.lua", vt)	
end

--display(vt)
charname = tostring(vt.charname)
target = tostring(vt.target)
action = tostring(vt.action)
potion = tostring(vt.potion)
mainhand = tostring(vt.mainhand)
offhand = tostring(vt.offhand)
highlight = tostring(vt.highlight)
food = tostring(vt.food)
drink = tostring(vt.drink)
container = tostring(vt.container)
esay = tostring(vt.esay)
promptstyle = tostring(vt.promptstyle)
race = tostring(vt.race)
class = tostring(vt.class)
hometown = tostring(vt.hometown)
ethos = tostring(vt.ethos)
hours = tonumber(vt.hours)
years = tonumber(vt.years)
title = tostring(vt.title)
align = tostring(vt.align)
max_hp = tonumber(vt.max_hp)
max_mana = tonumber(vt.max_mana)
max_moves = tonumber(vt.max_moves)
level = tonumber(vt.level)
practices = tonumber(vt.practices)
outgoing = vt.outgoing
trains = tonumber(vt.trains)
sphere = tostring(vt.sphere)
ally = tostring(vt.ally)
aid = tostring(vt.aid)
t1 = tostring(vt.t1)
t2 = tostring(vt.t2)
t3 = tostring(vt.t3)
t4 = tostring(vt.t4)
a5 = tostring(vt.a5)
a6 = tostring(vt.a6)
a7 = tostring(vt.a7)
activeset = vt.activeset

if not (io.exists(PkgPath .. "people.lua")) then
	echo("\n\nError: Can't find people.lua\n\n")
	else
	table.load(PkgPath.."people.lua", people)
end

promptskip = false

local mainW, mainH = getMainWindowSize()
local halfW, halfH = math.floor(mainW/2), math.floor(mainH/2)
local thirdW = math.floor(mainW/3)
local thirdH = math.floor(mainH/3)
local twelveH = math.floor(mainH/18)
local fifteenH = math.floor(mainH/8)

GUIframe.configs = GUIframe.configs or {}

GUIframe.defaults = {
    tabHeight = 20,
    tabStyle = [[
        QLabel{
				background-color: #4d0000;
				border-style: outset;
        border-width: 2px;
        border-color: "#996600";
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        margin-right: 1px;
        margin-left: 1px;
        qproperty-alignment: 'AlignCenter | AlignCenter';
				}				
				QLabel::hover{
				background-color: #b30000;
				border-style: outset;
        border-width: 2px;
        border-color: "#996600";
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        margin-right: 1px;
        margin-left: 1px;
        qproperty-alignment: 'AlignCenter | AlignCenter';
				}				
				]],
		tabSelectedStyle = [[
				background-color: #b30000;
				border-style: outset;
        border-width: 2px;
        border-color: "#996600";
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        margin-right: 1px;
        margin-left: 1px;
        qproperty-alignment: 'AlignCenter | AlignCenter';
				]],
    tabEchoStyle = '&lt;center&gt;&lt;p style="font-size:14px; color:white; font-family: IM Fell DW Pica SC, serif;"&gt;',
    leftStartWidth = 10,
    leftStartHeight = halfH,
    rightStartWidth = thirdW,
    rightStartHeight = halfH,
    topStartHeight = twelveH,
    bottomStartHeight = fifteenH,
    resizeHeight = 30,
    resizeWidth = 30,
    resizeHoverImage = ImgPath.."blue_arrows.png",
--		resizeHoverImage = [[url("]]..getMudletHomeDir()..[[/imgs/blue_arrows.png"]],
    resizeRestImage = ImgPath.."blue_arrows_20t.png",
--   	resizeRestImage = [[url("]]..getMudletHomeDir()..[[/imgs/blue_arrows_20t.png"]],
    borderOffset = 5,
}

GUIframe.windows = GUIframe.windows or {}
GUIframe.tabs = GUIframe.tabs or {}
GUIframe.tabCoords = GUIframe.tabCoords or {}
GUIframe.sides = GUIframe.sides or {left = 'enabled', right = 'enabled', top = 'enabled', bottom = 'enabled'}

local resize_style = [[border-image: url("]].."%s%s"..[[");]]
--ORIG: local resize_style = "border-image: url(%s%s);"

local configs = table.update(GUIframe.defaults, GUIframe.configs)
local tabsInfo, containerInfo, resizeInfo

local container_names = {'topLeftContainer', 'bottomLeftContainer', 'topRightContainer',
    'bottomRightContainer', 'bottomContainer', 'topContainer'}
local tab_names = {'topLeftTabs', 'topRightTabs', 'bottomLeftTabs', 'bottomRightTabs'}
local resizeLabels = {'resizeLeft', 'resizeRight', 'resizeTop', 'resizeBottom'}
local sides = {"top","bottom","left","right"}
local side_containers = {
    left = {"topLeftContainer","bottomLeftContainer","topLeftTabs","bottomLeftTabs"},
    right = {"topRightContainer","bottomRightContainer","topRightTabs","bottomRightTabs"},
    top = {"topContainer"},
    bottom = {"bottomContainer"}
}

local function get_window_coords(win, update) -- gets coords for window, stores data in tabCoords table as needed
    local x, y = win:get_x(), win:get_y()
    local w, h = win:get_width(), win:get_height()
    if update then
        GUIframe.tabCoords[win.name]  = {x = x, y = y, w = w, h = h}
    end
    return x, y, w, h
end

local function check_overlap(tab, x, y) -- checks to see if given coords overlap tab or tab container
    if type(tab) == "string" then tab = GUIframe[tab] or GUIframe.tabs[tab] end
    if tab.hidden or tab.auto_hidden then return false end
    local info = GUIframe.tabCoords[tab.name]
    local x1, y1 = info.x, info.y
    local x2, y2 = x1 + info.w, y1 + info.h
    return (x &gt;= x1 and x &lt;= x2 and y &gt;= y1 and y &lt;= y2)
end

local function update_tab(tab, x, y, w, h) -- resizes and moves tab and updates tab coords table
    tab:move(x, y)
    tab:resize(w,h)
    local info = GUIframe.tabCoords[tab.name] or {}
    info.x, info.y = tab:get_x(), tab:get_y()
    info.w, info.h = tab:get_width(), tab:get_height()
    if table.contains(tab_names, tab.name) then
        info.container = true
    end
    GUIframe.tabCoords[tab.name] = info
end

local function get_containers(pos)
    if type(pos) == "table" then pos = pos.name end
    for _,w in ipairs({'right','left','container','tabs'}) do
        pos = pos:gsub(w,w:title())
    end
    local con, tab
    if string.find(pos,"Container") then
        con = GUIframe[pos]
        if not con then return end
        tabs = con.tabs
    elseif string.find(pos,"Tabs") then
        tabs = GUIframe[pos]
        if not tab then return end
        con = tabs.con
    else
        con = GUIframe[pos.."Container"]
        tabs = GUIframe[pos.."Tabs"]
    end
    return con, tabs
end

local function config()
    configs = table.update(GUIframe.defaults, GUIframe.configs)
    GUIframe.windows = {}
    GUIframe.tabCoords = {}

    tabsInfo = {
        topLeftTabs = {name = 'topLeftTabs', x = 0, y = 0, width = configs.leftStartWidth,
            height = configs.tabHeight},
        bottomLeftTabs = {name = 'bottomLeftTabs', x = 0, y = configs.leftStartHeight,
            width = configs.leftStartWidth, height = configs.tabHeight},
        topRightTabs = {name = 'topRightTabs', x = mainW - configs.rightStartWidth, y = 0,
            width = configs.rightStartWidth, height = configs.tabHeight},
        bottomRightTabs = {name = 'bottomRightTabs', x = mainW - configs.rightStartWidth,
            y = configs.rightStartHeight, width = configs.rightStartWidth, height = configs.tabHeight},
    }
    containerInfo = {
        topLeftContainer = {name = 'topLeftContainer', x = 0, y = configs.tabHeight,
            width = configs.leftStartWidth, height = configs.leftStartHeight - configs.tabHeight},
        bottomLeftContainer = {name = 'bottomLeftContainer', x = 0, y = configs.leftStartHeight + configs.tabHeight,
            width = configs.leftStartWidth, height = configs.leftStartHeight - configs.tabHeight},
        topRightContainer = {name = 'topRightContainer', x = mainW - configs.rightStartWidth,
            y = configs.tabHeight, width = configs.rightStartWidth,
            height = configs.rightStartHeight - configs.tabHeight},
        bottomRightContainer = {name = 'bottomRightContainer', x = mainW - configs.rightStartWidth,
            y = configs.rightStartHeight + configs.tabHeight, width = configs.rightStartWidth,
            height = configs.rightStartHeight - configs.tabHeight},
        bottomContainer = {name = 'bottomContainer', x = configs.leftStartWidth,
            y = mainH - configs.bottomStartHeight, height = configs.bottomStartHeight,
            width = mainW - configs.leftStartWidth - configs.rightStartWidth},
        topContainer = {name = 'topContainer', x = configs.leftStartWidth, y = 0, height = configs.topStartHeight,
            width = mainW - configs.leftStartWidth - configs.rightStartWidth}
    }
    resizeInfo = {
        resizeLeft = {name = 'resizeLeft', x = configs.leftStartWidth,
            y = configs.leftStartHeight - configs.resizeHeight / 2, height = configs.resizeHeight,
            width = configs.resizeWidth},
        resizeRight = {name = 'resizeRight', x = configs.rightStartWidth - configs.resizeWidth,
            y = configs.rightStartHeight - configs.resizeHeight / 2, height = configs.resizeHeight,
            width = configs.resizeWidth},
        resizeTop = {name = 'resizeTop', x = halfW - configs.resizeWidth / 2,
            y = configs.topStartHeight, height = configs.resizeHeight, width = configs.resizeWidth},
        resizeBottom = {name = 'resizeBottom', x = halfW - configs.resizeWidth / 2,
            y = mainH - configs.bottomStartHeight - configs.resizeHeight, height = configs.resizeHeight,
            width = configs.resizeWidth}
    }

    for name, cons in pairs(containerInfo) do
        GUIframe[name] = Geyser.Container:new(cons)
    end
    for name, cons in pairs(tabsInfo) do
        GUIframe[name] = Geyser.Container:new(cons)
        local cname = name:gsub("Tabs","Container")
        GUIframe[cname].tabs = GUIframe[name]
        GUIframe[name].con = GUIframe[cname]
    end

    for name, cons in pairs(resizeInfo) do
        GUIframe[name] = Geyser.Label:new(cons)
        GUIframe[name]:setColor(0,0,0,0)
				GUIframe[name]:setStyleSheet([[
				QLabel{ border-image: url("]]..ImgPath..[[blue_arrows_20t.png"); }
				QLabel::hover{
					border-image: url("]]..ImgPath..[[blue_arrows.png"); }
				]])

        GUIframe[name]:setClickCallback("GUIframe.buttonClick", name)
        GUIframe[name]:setReleaseCallback("GUIframe.buttonRelease", name)
        GUIframe[name]:setMoveCallback("GUIframe.buttonMove", name)
    end
    setBorderLeft(configs.leftStartWidth + configs.borderOffset)
    setBorderRight(configs.rightStartWidth + configs.borderOffset)
    setBorderTop(configs.topStartHeight + configs.borderOffset)
    setBorderBottom(configs.bottomStartHeight + configs.borderOffset)
    GUIframe.initialized = true
end

local function deselectContainer(container, tabs)
    -- hide all windows in container
    for _, win in pairs(container.windowList) do
        win:hide()
        win.active = false
    end
    -- unhighlight all tabs in tabs container
    if tabs then
        for _, tab in pairs(tabs.windowList) do
            local name = tab.name:gsub("Tab","")
            local show = GUIframe.windows[name].showText
            if show then
                tab:echo(configs.tabEchoStyle..name)
            end
	    end
	end
end

local function adjustTabs(tabs)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    -- remove duplicated window names
    local found = {}
    for k,v in ipairs(tabs.windows) do
        if not table.contains(found,v) and tabs.windowList[v] and not tabs.windowList[v].isClicked then
            table.insert(found,v)
        end
    end
    -- calculate tab width and set height
    local w, h = math.floor(100 / #tabs.windows), configs.tabHeight
    local function wrap(num) return tostring(num) .. "%" end
    -- resize and reposition all tabs
    local shown, first
    for k,v in ipairs(found) do
        local tab = tabs.windowList[v]
        if not first then first = v:gsub("Tab","") end
        if not shown and tab.active then
            shown = v
        elseif tab.active then
            tab.active = false
        end
        update_tab(tab, wrap(w * (k-1)), 0, wrap(w), h)
    end
    if first and not shown and GUIframe.windows[first] then GUIframe.windows[first]:show() end
    tabs.space_pos = nil
end

local function reorderTabs(tabs, name, pos)
    local windows = tabs.windows
    while table.contains(windows, name) do
        table.remove(windows, table.index_of(windows, name))
    end
    table.insert(windows, pos, name)
end

local function makeSpace(tabs, tab, pos)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    local windows = table.deepcopy(tabs.windows)
    local space_pos = tabs.space_pos
    local tab_pos = table.index_of(windows, tab.name)
    -- calculate tab width and set height
    local num_tabs = #windows + 1
    if tab_pos then
        num_tabs = num_tabs - 1
        if pos &gt; tab_pos then pos = pos - 1 end
        if pos == space_pos then pos = pos + 1 end
    elseif space_pos and pos &gt;= space_pos then
        pos = pos + 1
    end
    local w, h = math.floor(100 / num_tabs), configs.tabHeight
    local function wrap(num) return tostring(num) .. "%" end
    -- resize and reposition all tabs
    if tab_pos then table.remove(windows,tab_pos) end
    for k,v in ipairs(windows) do
        if k &gt;= pos then
            update_tab(tabs.windowList[v], wrap(w * k), 0, wrap(w), h)
        else
            update_tab(tabs.windowList[v], wrap(w * (k-1)), 0, wrap(w), h)
        end
    end
    tabs.space_pos = pos
end

local function round(num,roundTo)
	local b, r = math.modf(num/roundTo)
	if r &gt;= 0.5 then
		b = b + 1
	end
	return b * roundTo
end

local function setBorder(side, val)
    local funcs = {left = setBorderLeft, right = setBorderRight, top = setBorderTop, bottom = setBorderBottom}
    val = math.max(val,0)
	funcs[side](val)
end

local function resizeContainers(side, w, h)
    if table.contains({"left", "right"}, side) then
        local info = {
            left = {resize = "resizeLeft", cons = {"topLeftContainer","bottomLeftContainer"},
                tabs = {"topLeftTabs","bottomLeftTabs"}, x = 0, w = w},
            right = {resize = "resizeRight", cons = {"topRightContainer","bottomRightContainer"},
                tabs = {"topRightTabs","bottomRightTabs"}, x = w, w = mainW - w}
        }
        info = info[side]
        -- move and resize top, bottom and tab containers
        update_tab(GUIframe[info.tabs[1]], info.x, 0, info.w, configs.tabHeight)
        update_tab(GUIframe[info.tabs[2]], info.x, h, info.w, configs.tabHeight)
        GUIframe[info.cons[1]]:resize(info.w, h - configs.tabHeight)
        GUIframe[info.cons[1]]:move(info.x, configs.tabHeight)
        GUIframe[info.cons[2]]:resize(info.w, mainH - h - configs.tabHeight)
        GUIframe[info.cons[2]]:move(info.x, h + configs.tabHeight)
        -- adjust border size
        setBorder(side, info.w + configs.borderOffset)

        -- adjust width of top and bottom containers
        local x, y
        x = (GUIframe.sides.left ~= "hidden" and GUIframe.topLeftContainer:get_width()) or 0
        w = ((GUIframe.sides.right ~= "hidden" and GUIframe.topRightContainer:get_x()) or mainW) - x
        for _, con in ipairs({GUIframe.topContainer, GUIframe.bottomContainer}) do
            y, h = con:get_y(), con:get_height()
            con:resize(w, h)
            con:move(x, y)
        end
    elseif table.contains({"top", "bottom"}, side) then
        local x = 0
        w = mainW
        if GUIframe.sides.left ~= "hidden" then
            w = w - GUIframe.topLeftContainer:get_width()
            x = GUIframe.topLeftContainer:get_width()
        end
        if GUIframe.sides.right ~= "hidden" then w = w - GUIframe.topRightContainer:get_width() end
        local info = {top = {con = "topContainer", y = 0, h = h}, bottom = {con = "bottomContainer", y = h, h = mainH - h}}
        local con = GUIframe[info[side].con]
        con:resize(w, info[side].h)
        con:move(x, info[side].y)
        setBorder(side, info[side].h + configs.borderOffset)
    end
end

local function refresh()
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    mainW, mainH = getMainWindowSize()
    local rH, rW = configs.resizeHeight, configs.resizeWidth
    local x, y, w
    -- adjust bottom left and right container heights
    for _, C in ipairs({GUIframe.bottomLeftContainer, GUIframe.bottomRightContainer}) do
        C:resize(C:get_width(), mainH - C:get_y())
    end
    -- reposition right containers
    w = GUIframe.topRightContainer:get_width()
    for _, C in ipairs({GUIframe.topRightContainer, GUIframe.topRightTabs,
        GUIframe.bottomRightContainer, GUIframe.bottomRightTabs}) do
        C:move(mainW - w,C:get_y())
    end
    -- resize and reposition bottom and top containers
    w, x = mainW, 0
    if GUIframe.sides.left ~= "hidden" then
        w = w - GUIframe.topLeftContainer:get_width()
        x = GUIframe.topLeftContainer:get_width()
    end
    if GUIframe.sides.right ~= "hidden" then w = w - GUIframe.topRightContainer:get_width() end
    for _, C in ipairs({GUIframe.topContainer, GUIframe.bottomContainer}) do
        C:resize(w, C:get_height())
        C:move(x, C.name == "topContainer" and 0 or mainH - C:get_height())
    end
    -- reposition resize labels
    x, y = GUIframe.topLeftContainer:get_width(), GUIframe.bottomLeftTabs:get_y()
    GUIframe.resizeLeft:move(x, y - rH / 2)
    x, y = GUIframe.topRightContainer:get_x(), GUIframe.bottomRightTabs:get_y()
    GUIframe.resizeRight:move(x - rW, y - rH / 2)
    x = (GUIframe.topContainer:get_width() - rW) / 2
    if GUIframe.sides.left ~= "hidden" then x = x + GUIframe.topLeftContainer:get_width() end
    y = GUIframe.topContainer:get_height()
    GUIframe.resizeTop:move(x, y)
    y = GUIframe.bottomContainer:get_y()
    GUIframe.resizeBottom:move(x, y - rH)
end

-- enables the resize label for the given side and shows all associated containers if hidden
function GUIframe.enable(side)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    if not table.contains(sides,side) then error("GUIframe.enable: invalid side",2) end
    local cons = side_containers[side]
    for _, con in ipairs(cons) do
        GUIframe[con]:show()
        for _,win in pairs(GUIframe[con].windowList) do -- loop can be removed after Geyser fix comes in
            if win.active then win:show() end
        end
    end
    if table.contains({"left","right"}, side) then
        setBorder(side, GUIframe[cons[1]]:get_width() + configs.borderOffset)
    else
        setBorder(side, GUIframe[cons[1]]:get_height() + configs.borderOffset)
    end
    GUIframe["resize"..side:title()]:show()
    GUIframe.sides[side] = "enabled"
    refresh()
end

-- disables and hides the resize label for the given side, and hides all associated containers if indicated
function GUIframe.disable(side, hide)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    if not table.contains(sides,side) then error("GUIframe.disable: invalid side",2) end
    local cons = side_containers[side]
    GUIframe.sides[side] = "disabled"
    if hide then
        for _, con in ipairs(cons) do
            GUIframe[con]:hide()
            for _, win in pairs(GUIframe[con].windowList) do -- loop can be removed after Geyser fix comes in
                if win.type == "mapper" then win:hide() end
            end
        end
        local border = _G["setBorder"..side:title()]
        border(0)
        GUIframe.sides[side] = "hidden"
    end
    GUIframe["resize"..side:title()]:hide()
    refresh()
end

-- adds a Geyser window or container to the given container, with a tab showing the given name if applicable
function GUIframe.addWindow(window, name, container, hideText)
    if not GUIframe.initialized then config() end
    if type(container) == "table" then container = container.name end
    local con, tabs = get_containers(container)
    if not con then error("GUIframe.addWindow: invalid container name",2) end
    if not name then error("GUIframe.addWindow: name argument required",2) end
    -- remove window from any containers
    for _, tcon in ipairs(container_names) do
        if table.contains(GUIframe[tcon].windows, window.name) then
            GUIframe.removeWindow(name, tcon)
        end
    end
    deselectContainer(con,tabs)
    -- add tab for window, if applicable
    if tabs then
        local showText = not hideText
        window.showText = showText
        local lbl = Geyser.Label:new({name = name.."Tab", x = 0, y = 0, width = 10, height = 10},tabs)
        lbl:setStyleSheet(configs.tabStyle)
        if showText then
            lbl:echo(configs.tabEchoStyle.."&lt;b&gt;"..name)
        end
        lbl:setClickCallback("GUIframe.buttonClick", name)
        lbl:setReleaseCallback("GUIframe.buttonRelease", name)
        lbl:setMoveCallback("GUIframe.buttonMove", name)	
        GUIframe.tabs[name] = lbl
        adjustTabs(tabs)
    end
    -- add window to container and set size and position
    con:add(window)
    window:resize("100%","100%")
    window:move(0,0)
    window:show()
    GUIframe.windows[name] = window
	raiseEvent("sysWindowResizeEvent")
end

-- removes a named Geyser window or container from the named container (using name given in GUIframe.addWindow)
function GUIframe.removeWindow(name, container)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    if not container then container = GUIframe.windows[name].container end
    local con, tabs = get_containers(container)

    if not con or not table.contains(container_names, con.name) then
        error("GUIframe.removeWindow: invalid container name",2)
    end
    if not name then error("GUIframe.removeWindow: name argument required",2) end
    if tabs then
        local lbl = tabs.windowList[name.."Tab"]
        if lbl then
            tabs:remove(lbl)
            adjustTabs(tabs)
            lbl:hide()
        end
    end
    local window = GUIframe.windows[name]
    con:remove(window)
    window:hide()
end

-- saves the current GUI setup, including the size of the different containers and what windows go in which container
function GUIframe.saveSettings()
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    local saveTbl = {}
    local w, h = GUIframe.topLeftContainer:get_width(), GUIframe.bottomLeftTabs:get_y()
    saveTbl.left = {w = w, h = h}
    w, h = GUIframe.topRightContainer:get_width(), GUIframe.bottomRightTabs:get_y()
    saveTbl.right = {w = w, h = h}
    w, h = GUIframe.topContainer:get_width(), GUIframe.topContainer:get_height()
    saveTbl.top = {w = w, h = h}
    w, h = GUIframe.bottomContainer:get_width(), GUIframe.bottomContainer:get_height()
    saveTbl.bottom = {w = w, h = h}

    -- get added windows and containers they are assigned to
    local windows = {}
    local text = {}
    for k,v in pairs(GUIframe.windows) do
        local con = v.container.name
        windows[con] = windows[con] or {}
        table.insert(windows[con], k)
        text[con] = text[con] or {}
        text[con][k] = v.showText
    end
    -- reorder windows to match tab order for tabbed containers
    for con, wins in pairs(windows) do
        if con:find("Left") or con:find("Right") then
            local tabs = GUIframe[con].tabs.windows
            local new = {}
            for k,v in ipairs(tabs) do
                local wname = v:gsub("Tab","")
                table.insert(new, {wname, text[con][wname]})
            end
            windows[con] = new
        end
    end
    saveTbl.windows = windows
    saveTbl.sides = GUIframe.sides
    table.save(getMudletHomeDir() .. "/GUIframeSave.lua", saveTbl)
end

-- loads GUI setup from a previous save
function GUIframe.loadSettings(redraw)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    local saveTbl = {}
    local path = getMudletHomeDir() .. "/GUIframeSave.lua"
    path = path:gsub("\\","/")
    mainW, mainH = getMainWindowSize()
    if not io.exists(path) then debugc("GUIframe.loadSettings: save file doesn't exist.") return end
    table.load(path, saveTbl)
    resizeContainers("left", saveTbl.left.w, saveTbl.left.h)
    resizeContainers("right", mainW - saveTbl.right.w, saveTbl.right.h)
    resizeContainers("top", saveTbl.top.w, saveTbl.top.h)
    resizeContainers("bottom", saveTbl.bottom.w, mainH - saveTbl.bottom.h)
    for con, wins in pairs(saveTbl.windows) do
        for _,name in ipairs(wins) do
            if type(name) == "string" then
                GUIframe.addWindow(GUIframe.windows[name], name, con)
            else
                local n, s = name[1], not name[2]
                GUIframe.addWindow(GUIframe.windows[n], n, con, s)
            end
        end
    end

    for side, state in pairs(saveTbl.sides) do
        if state == "enabled" then
            GUIframe.enable(side)
        elseif state == "disabled" then
            GUIframe.disable(side,false)
        elseif state == "hidden" then
            GUIframe.disable(side,true)
        end
    end
    -- force redraw of screen
    if redraw then
        setBackgroundColor(1,1,1)
        setBackgroundColor(0,0,0)
    end
end

-- can be called to force the script to run its config function again
function GUIframe.reinitialize()
    config()
end

-- can be called to activate a given tab without clicking on it
function GUIframe.activate(name)
    if not GUIframe.initialized then error("GUIframe not initialized",1) end
	local window = GUIframe.windows[name]
	if window then
        local con, tabs = get_containers(window.container.name)
        -- hide and unhighlight other windows and tabs
        deselectContainer(con, tabs)
        -- show selected window
        window:show()
        window.active = true
        -- highlight selected tab
        if window.showText then
						GUIframe.styleTab(GUIframe.tabs[name], tabSelectedStyle)
						GUIframe.tabs[name]:echo(configs.tabEchoStyle.."&lt;b&gt;"..name)
        end
    end
end

-- can be called to apply a style to a given tab
function GUIframe.styleTab(name, style)
    if not GUIframe.initialized then error("GUIframe not initialized",1) end
	local tab = GUIframe.tabs[name]
	if tab then
	    tab:setStyleSheet(style)
    end
end

-- internally used function to handle button click callbacks
function GUIframe.buttonClick(name, event)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
	if table.contains(resizeLabels,name) then
	    if event.button == "RightButton" then
	        local lbl = GUIframe[name]
	        lbl.difX, lbl.difY = event.x, event.y
	        lbl.savedX, lbl.savedY = getMousePosition()
            GUIframe[name].isClicked = true
        end
	elseif event.button == "LeftButton" then
        local window = GUIframe.windows[name]
        local con, tabs = get_containers(window.container.name)
        -- hide and unhighlight other windows and tabs
        deselectContainer(con, tabs)
        -- show selected window
        window:show()
        window.active = true
        -- highlight selected tab
        if window.showText then
						GUIframe.styleTab(GUIframe.tabs[name], tabSelectedStyle)
            GUIframe.tabs[name]:echo(configs.tabEchoStyle.."&lt;b&gt;"..name)
        end
    elseif event.button == "RightButton" then
        local window, tab = GUIframe.windows[name], GUIframe.tabs[name]
        tab.savedX, tab.savedY = getMousePosition()
        tab.difX, tab.difY, tab.isClicked = event.x, event.y, true
        -- force update of coords for all tabs and tab containers
        GUIframe.tabCoords = {}
        for _, name in ipairs(tab_names) do
            get_window_coords(GUIframe[name], true)
            for tname, tab in pairs(GUIframe[name].windowList) do
                get_window_coords(tab, true)
            end
        end
    end
    raiseEvent("GUIframe.buttonClick",name,event)
end

-- internally used function to handle button release callbacks
function GUIframe.buttonRelease(name, event)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
	if table.contains(resizeLabels,name) then
	    if event.button == "RightButton"  then
            local lbl = GUIframe[name]
            lbl.savedX, lbl.savedY, lbl.difX, lbl.difY, lbl.isClicked = nil, nil, nil, nil, false
        end
	elseif event.button == "RightButton" then
	    local window, tab = GUIframe.windows[name], GUIframe.tabs[name]
	    local con, tabs = get_containers(window.container.name)
	    tab.difX, tab.difY, tab.savedX, tab.savedY, tab.isClicked = nil, nil, nil, nil, false
	    hideWindow("show_container")
	    for _, tname in ipairs(tab_names) do
	        local info = GUIframe[tname]
	        if info.mouse_over then
	            local pos = info.space_pos
	            info.mouse_over = nil
	            GUIframe.addWindow(window, name, tname:gsub("Tabs",""), not window.showText)
	            if pos then
    	            reorderTabs(info, tab.name, pos)
    	            adjustTabs(info)
    	        end
	        end
	    end
	    adjustTabs(tabs)
	end
	raiseEvent("GUIframe.buttonRelease",name,event)
end

-- internally used function to handle button move callbacks
function GUIframe.buttonMove(name, event)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
	if table.contains(resizeLabels,name) then
	    lbl = GUIframe[name]
	    if lbl.isClicked then
	        local w, h = getMousePosition()
	        w, h = round(w - lbl.difX, 10), round(h - lbl.difY, 10)
            mainW, mainH = getMainWindowSize()
            local side, cW, cH, rX, rY
            local minX = GUIframe.sides.left ~= "hidden" and GUIframe.topLeftContainer:get_width() or 0
            local maxX = GUIframe.sides.right ~= "hidden" and GUIframe.topRightContainer:get_x() or mainW
            local minY = GUIframe.sides.top ~= "hidden" and GUIframe.topContainer:get_height() or 0
            local maxY = GUIframe.sides.left ~= "hidden" and GUIframe.bottomContainer:get_y() or mainH
            local mid, min, max = GUIframe.topContainer:get_width(), math.min, math.max
            local tabH, rH, rW = configs.tabHeight, configs.resizeHeight, configs.resizeWidth
	        w, h = max(w, 0), max(h, 0)
            local info = { -- specify position of resize labels and size of containers
                resizeLeft = {side = "left", x = min(w, maxX - rW),
                    y = min(max(h + rH / 2,tabH), mainH - tabH) - rH / 2,
                    w = min(w, maxX - rW), h = min(max(h + rH / 2,tabH), mainH-tabH) },
                resizeRight = {side = "right", x = min(max(w, minX), mainW),
                    y = min(max(h + rH / 2, tabH), mainH - tabH) - rH / 2,
                    w = min(max(w, minX), mainW - rW) + rW, h = min(max(h + rH / 2, tabH), mainH - tabH) },
                resizeTop = {side = "top", x = minX + (mid - rW) / 2,
                    y = min(h, maxY - rH), w = maxX - minX, h = min(h, maxY - rH) },
                resizeBottom = {side = "bottom", x = minX + (mid - rW) / 2,
                    y = min(max(h, minY) - rH, mainH), w = maxX - minX, h = min(max(h, minY) + rH, mainH)} }
            info = info[name]
            lbl:move(info.x, info.y)
            resizeContainers(info.side, info.w, info.h)
        end
    else
        local window, tab = GUIframe.windows[name], GUIframe.tabs[name]
        local con, tabs = get_containers(window.container.name)
        local x, y = getMousePosition()
        local over_con, over_tab
        if tab and tab.isClicked then
            moveWindow(tab.name, x - tab.difX, y - tab.difY)
            -- check to see if mouse is over any tab containers
            for _, tcon in ipairs(tab_names) do
                if check_overlap(tcon, x, y) then
                    over_con = tcon
                    GUIframe[tcon].mouse_over = true
                    local info = GUIframe.tabCoords[tcon]
                    local tx, ty, tw, th = info.x, info.y, info.w, info.h
                    createLabel("show_container", 0, 0, 0, 0, 1)
                    moveWindow("show_container", tx, ty)
                    resizeWindow("show_container", tw, th)
                    setLabelStyleSheet("show_container",[[
                        background-color: black;
                        border: 2px solid white;]])
                    showWindow("show_container")
                    lowerWindow("show_container")
                    -- check to see if mouse is over any tabs
                    for tname, info in pairs(GUIframe.tabs) do
                        if tname ~= name and check_overlap(info, x, y) then
                            over_tab = info.name
                            local windows = GUIframe[tcon].windows
                            local index = table.index_of(windows,over_tab)
                            makeSpace(GUIframe[tcon],tab,index)
                            break
                        end
                    end
                    break
                end
            end
            -- remove any unnecessary spaces in tab containers
            for _, name in ipairs(tab_names) do
                if name ~= over_con then
                    adjustTabs(GUIframe[name])
                    GUIframe[name].mouse_over = nil
                end
            end
        end
	end
	raiseEvent("GUIframe.buttonMove",name,event)
end

-- internally used function to handle sysWindowResizeEvent
function GUIframe.eventHandler(event,...)
    if event == "sysWindowResizeEvent" and GUIframe.initialized then
        refresh()
    end
end

registerAnonymousEventHandler("sysWindowResizeEvent","GUIframe.eventHandler")</script>
				<eventHandlerList />
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>CSSman</name>
					<packageName>CSSman</packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>CSSMan</name>
						<packageName></packageName>
						<script>-- CSSMan by Vadi. Public domain.

CSSMan = {}
CSSMan.__index = CSSMan

function CSSMan.new(stylesheet)
  local obj  = { stylesheet = {} }
  setmetatable(obj,CSSMan)
  local trim = string.trim

  assert(type(stylesheet) == "string", "CSSMan.new: no stylesheet provided. A possible error is that you might have used CSSMan.new, not CSSMan:new")

  for line in stylesheet:gmatch("[^\r\n]+") do
    local attribute, value = line:match("^(.-):(.-);$")
    if attribute and value then
      attribute, value = trim(attribute), trim(value)
      obj.stylesheet[attribute] = value
    end
  end

  return obj
end

function CSSMan:set(key, value)
  self.stylesheet[key] = value
end

function CSSMan:get(key)
  return self.stylesheet[key]
end

function CSSMan:getCSS(key)
  local lines, concat = {}, table.concat
  for k,v in pairs(self.stylesheet) do lines[#lines+1] = concat({k,": ", v, ";"}) end
  return concat(lines, "\n")
end

function CSSMan:gettable()
  return self.stylesheet
end

function CSSMan:settable(tbl)
  assert(type(tbl) == "table", "CSSMan:settable: table expected, got "..type(tbl))

  self.stylesheet = tbl
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Elements</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Frames</name>
						<packageName></packageName>
						<script>--GUIframe.disable("top", false)
--GUIframe.disable("bottom")
GUIframe.disable("left")

GUIframe.loadSettings(redraw)</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Gauges</name>
						<packageName></packageName>
						<script>GUI.GaugeBackCSS = CSSMan.new([[
	background: black;
  border-style: inset;
  border-color: gray;
  border-width: 1px;
  border-radius: 4px;
  margin: 1px;
	padding: 1px;
	font-family: 'IM Fell DW Pica SC', serif;
]])

GUI.GaugeFrontCSS = CSSMan.new([[
  border-style: outset;
  border-color: gray;
  border-width: 1px;
  border-radius: 4px;
  margin: 1px;
	padding: 1px;
	font-family: 'IM Fell DW Pica SC', serif;
]])

GUI.GaugeCSS = CSSMan.new([[
font-family: 'IM Fell DW Pica SC', serif;
]])

GUI.ContainerCSS = CSSMan.new([[
	background-image: url("]]..ImgPath..[[bg_black.png") round;
	background-size: cover;
	border-width: 3px;
	border-radius: 5px;
	border-style: double solid;
	border-color: "#aa8822";
	padding: 5px;
	margin: 1px;
	]])

GUI.InfoBoxCSS = CSSMan.new([[
background-color: rgba(0,0,0,.3);
opacity: 0;
border-color: black;
border-width: 1px;
border-radius: 5px;
border-style: solid;
margin: 1px;
font-family: 'IM Fell DW Pica', serif;
qproperty-wordWrap: true;
padding: 5px;
]])

GUI.LabelBoxCSS = CSSMan.new([[
background-color: rgba(150,0,0,.3);
border-color: black;
border-width: 1px;
border-top-left-radius: 5px;
border-bottom-left-radius: 5px;
border-top-right-radius: 0px;
border-bottom-right-radius: 0px;
border-style: solid none solid solid;
font-family: 'IM Fell DW Pica SC', serif;
margin: 1px 0px 1px 0px;
padding: 1px;
]])

GUI.LabelBox2CSS = CSSMan.new([[
background-color: rgba(0,150,150,.3);
border-color: black;
border-width: 1px;
border-top-left-radius: 5px;
border-bottom-left-radius: 5px;
border-top-right-radius: 0px;
border-bottom-right-radius: 0px;
border-style: solid none solid solid;
font-family: 'IM Fell DW Pica SC', serif;
margin: 1px 0px 1px 0px;
padding: 1px;
]])

GUI.LabelBox3CSS = CSSMan.new([[
background-color: rgba(150,0,150,.3);
border-color: black;
border-width: 1px;
border-top-left-radius: 5px;
border-bottom-left-radius: 5px;
border-top-right-radius: 0px;
border-bottom-right-radius: 0px;
border-style: solid none solid solid;
font-family: 'IM Fell DW Pica SC', serif;
margin: 1px 0px 1px 0px;
padding: 1px;
]])

GUI.InputBoxCSS = CSSMan.new([[
background-color: rgba(0,0,0,.3);
opacity: 0;
border-color: black;
border-width: 1px;
border-top-right-radius: 5px;
border-bottom-right-radius: 5px;
border-top-left-radius: 0px;
border-bottom-left-radius: 0px;
border-style: solid solid solid none;
font-family: 'IM Fell DW Pica', serif;
margin: 1px 0px 1px 0px;
padding: 1px;
]])

GUI.LogoCSS = CSSMan.new([[
	background-image: url("]]..ImgPath..[[logo.png");
	background-position: center;
	background-repeat: no-repeat;
  border-width: 0px;
	font-family: 'IM Fell DW Pica SC', serif;
	]])
	
GUI.NameBoxCSS = CSSMan.new([[
background-color: rgba(0,0,0,.6);
opacity: 0;
border-color: black;
border-width: 1px;
border-radius: 5px;
border-style: none;
margin: 1px;
font-family: 'IM Fell DW Pica SC', serif;
qproperty-wordWrap: true;
padding: 5px;
]])


GUI.Footer = Geyser.Label:new({
  name = "GUI.Footer",
  x = 0, y = 0,
  width = "100%",
  height = "100%",
})
GUIframe.addWindow(GUI.Footer, 'Gauges', 'bottom')
GUI.Footer:setStyleSheet(GUI.ContainerCSS:getCSS())

GUI.FooterBox = Geyser.HBox:new({
name = "GUI.FooterBox",
x = 0, y = "7%",
width = "100%",
height = "90%",
},GUI.Footer)

-- VBox Columns in the footer, left to right

GUI.LogoBox = Geyser.VBox:new({
name = "GUI.LogoBox",
h_stretch_factor=0.5,
},GUI.FooterBox)

GUI.GaugeBox = Geyser.VBox:new({
name = "GUI.GaugeBox",
h_stretch_factor=1.25,
},GUI.FooterBox)

GUI.SpacerBox = Geyser.VBox:new({
name = "GUI.SpacerBox",
h_stretch_factor=0.10,
},GUI.FooterBox)

GUI.TargetBox = Geyser.VBox:new({
name = "GUI.TargetBox",
h_stretch_factor=1,
},GUI.FooterBox)

GUI.SpacerBox2 = Geyser.VBox:new({
name = "GUI.SpacerBox2",
h_stretch_factor=0.10,
},GUI.FooterBox)

GUI.MiscBox = Geyser.VBox:new({
name = "GUI.MiscBox",
h_stretch_factor=1,
},GUI.FooterBox)

GUI.SpacerBox3 = Geyser.VBox:new({
name = "GUI.SpacerBox3",
h_stretch_factor=0.10,
},GUI.FooterBox)

GUI.EnvironmentBox = Geyser.VBox:new({
name = "GUI.EnvironmentBox",
h_stretch_factor=0.5,
},GUI.FooterBox)

GUI.EndBox = Geyser.VBox:new({
name = "GUI.EndBox",
h_stretch_factor=0.05,
},GUI.FooterBox)

-- Left, to right, beginning with the Carrion Fields logo.

GUI.LogoLabel = Geyser.Label:new({
	name = "GUI.LogoLabel",
	},GUI.LogoBox)
	GUI.LogoLabel:setStyleSheet(GUI.LogoCSS:getCSS())
	GUI.LogoLabel:setFgColor("black")
	GUI.LogoLabel:setFontSize(14)

GUI.NameLabel = Geyser.Label:new({
	name = "GUI.NameLabel",
	y= "25%",
	width = "85%", height = "50%",
	},GUI.LogoLabel)
	
if charname ~= nil then
		GUI.NameLabel:setStyleSheet(GUI.NameBoxCSS:getCSS())
		GUI.NameLabel:setFontSize(14)
		GUI.NameLabel:echo("&lt;center&gt;"..charname.."\n")
		end
	
-- Health, Mana, Movement, &amp; Experience Gauges

GUI.Health = Geyser.Gauge:new({
  name = "GUI.Health",
},GUI.GaugeBox)
GUI.Health.back:setStyleSheet(GUI.GaugeBackCSS:getCSS())
GUI.GaugeFrontCSS:set("background-color","#800000")
GUI.Health.front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())
GUI.Health:setValue(100)
GUI.Health.front:echo("Health")

GUI.Mana = Geyser.Gauge:new({
  name = "GUI.Mana",
},GUI.GaugeBox)
GUI.Mana.back:setStyleSheet(GUI.GaugeBackCSS:getCSS())
GUI.GaugeFrontCSS:set("background-color","#0059b3")
GUI.Mana.front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())
GUI.Mana:setValue(100)
GUI.Mana.front:echo("Mana")

GUI.Movement = Geyser.Gauge:new({
  name = "GUI.Movement",
},GUI.GaugeBox)
GUI.Movement.back:setStyleSheet(GUI.GaugeBackCSS:getCSS())
GUI.GaugeFrontCSS:set("background-color","#1f6140")
GUI.Movement.front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())
GUI.Movement:setValue(100)
GUI.Movement.front:echo("Movement")

GUI.Experience = Geyser.Gauge:new({
  name = "GUI.Experience",
},GUI.GaugeBox)
GUI.Experience.back:setStyleSheet(GUI.GaugeBackCSS:getCSS())
GUI.GaugeFrontCSS:set("background-color","#e68a00")
GUI.Experience.front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())
GUI.Experience:setValue(100)
GUI.Experience.front:echo("Experience")

-- Targeting Boxes

GUI.TargetGrid = Geyser.HBox:new({
  name = "GUI.TargetGrid",
},GUI.TargetBox)

GUI.TargetLabel = Geyser.Label:new({
  name = "GUI.TargetLabel",
	h_stretch_factor=0.5,
},GUI.TargetGrid)
GUI.TargetLabel:setStyleSheet(GUI.LabelBoxCSS:getCSS())
GUI.TargetLabel:setFontSize(12)
GUI.TargetLabel:setFgColor("LightGoldenrod")
GUI.TargetLabel:echo("&lt;center&gt;Target")

GUI.TargetInput = Geyser.Label:new({
name="GUI.TargetInput",
},GUI.TargetGrid)
GUI.TargetInput:setStyleSheet(GUI.InputBoxCSS:getCSS())
GUI.TargetInput:setFontSize(14)
GUI.TargetInput:echo("&lt;center&gt;&lt;b&gt;"..target)

GUI.ActionGrid = Geyser.HBox:new({
  name = "GUI.ActionGrid",
},GUI.TargetBox)

GUI.ActionLabel = Geyser.Label:new({
  name = "GUI.ActionLabel",
	h_stretch_factor=0.5,
},GUI.ActionGrid)
GUI.ActionLabel:setStyleSheet(GUI.LabelBoxCSS:getCSS())
GUI.ActionLabel:setFontSize(12)
GUI.ActionLabel:setFgColor("LightGoldenrod")
GUI.ActionLabel:echo("&lt;center&gt;Action")

GUI.ActionInput = Geyser.Label:new({
name="GUI.ActionInput",
},GUI.ActionGrid)
GUI.ActionInput:setStyleSheet(GUI.InputBoxCSS:getCSS())
GUI.ActionInput:setFontSize(14)
GUI.ActionInput:echo("&lt;center&gt;"..action)

GUI.MainhandGrid = Geyser.HBox:new({
  name = "GUI.MainhandGrid",
},GUI.TargetBox)

GUI.MainhandLabel = Geyser.Label:new({
  name = "GUI.MainhandLabel",
	h_stretch_factor=0.5,
},GUI.MainhandGrid)
GUI.MainhandLabel:setStyleSheet(GUI.LabelBox3CSS:getCSS())
GUI.MainhandLabel:setFontSize(12)
GUI.MainhandLabel:setFgColor("LightGoldenrod")
GUI.MainhandLabel:echo("&lt;center&gt;Mainhand")

GUI.MainhandInput = Geyser.Label:new({
name="GUI.MainhandInput",
},GUI.MainhandGrid)
GUI.MainhandInput:setStyleSheet(GUI.InputBoxCSS:getCSS())
GUI.MainhandInput:setFontSize(14)
GUI.MainhandInput:echo("&lt;center&gt;"..mainhand)

-- Misc Boxes
GUI.AllyGrid = Geyser.HBox:new({
  name = "GUI.AllyGrid",
},GUI.MiscBox)

GUI.AllyLabel = Geyser.Label:new({
  name = "GUI.AllyLabel",
	h_stretch_factor=0.5,
},GUI.AllyGrid)
GUI.AllyLabel:setStyleSheet(GUI.LabelBox2CSS:getCSS())
GUI.AllyLabel:setFontSize(12)
GUI.AllyLabel:setFgColor("LightGoldenrod")
GUI.AllyLabel:echo("&lt;center&gt;Ally")

GUI.AllyInput = Geyser.Label:new({
name="GUI.AllyInput",
},GUI.AllyGrid)
GUI.AllyInput:setStyleSheet(GUI.InputBoxCSS:getCSS())
GUI.AllyInput:setFontSize(14)
GUI.AllyInput:echo("&lt;center&gt;"..ally)

GUI.AidGrid = Geyser.HBox:new({
  name = "GUI.AidGrid",
},GUI.MiscBox)

GUI.AidLabel = Geyser.Label:new({
  name = "GUI.AidLabel",
	h_stretch_factor=0.5,
},GUI.AidGrid)
GUI.AidLabel:setStyleSheet(GUI.LabelBox2CSS:getCSS())
GUI.AidLabel:setFontSize(12)
GUI.AidLabel:setFgColor("LightGoldenrod")
GUI.AidLabel:echo("&lt;center&gt;Aid")

GUI.AidInput = Geyser.Label:new({
name="GUI.AidInput",
},GUI.AidGrid)
GUI.AidInput:setStyleSheet(GUI.InputBoxCSS:getCSS())
GUI.AidInput:setFontSize(14)
GUI.AidInput:echo("&lt;center&gt;"..aid)

GUI.OffhandGrid = Geyser.HBox:new({
  name = "GUI.OffhandGrid",
},GUI.MiscBox)

GUI.OffhandLabel = Geyser.Label:new({
  name = "GUI.OffhandLabel",
	h_stretch_factor=0.5,
},GUI.OffhandGrid)
GUI.OffhandLabel:setStyleSheet(GUI.LabelBox3CSS:getCSS())
GUI.OffhandLabel:setFontSize(12)
GUI.OffhandLabel:setFgColor("LightGoldenrod")
GUI.OffhandLabel:echo("&lt;center&gt;Offhand")

GUI.OffhandInput = Geyser.Label:new({
name="GUI.OffhandInput",
},GUI.OffhandGrid)
GUI.OffhandInput:setStyleSheet(GUI.InputBoxCSS:getCSS())
GUI.OffhandInput:setFontSize(14)
GUI.OffhandInput:echo("&lt;center&gt;"..offhand)

-- Environment/Time Boxes
GUI.Terrain = Geyser.Label:new({
  name = "GUI.Terrain",
	v_stretch_factor = 1.5
},GUI.EnvironmentBox)
GUI.Terrain:setStyleSheet(GUI.InfoBoxCSS:getCSS())
GUI.Terrain:setFontSize(11)
GUI.Terrain:echo("&lt;center&gt;Wilderness")

GUI.Time = Geyser.Gauge:new({
name = "GUI.Time",
},GUI.EnvironmentBox)
GUI.Time.back:setStyleSheet(GUI.GaugeBackCSS:getCSS())
GUI.GaugeFrontCSS:set("background-color","rgba(100,0,100,.3)")
GUI.Time.front:setStyleSheet(GUI.GaugeFrontCSS:getCSS())
GUI.Time.front:setFontSize(12)</script>
						<eventHandlerList />
					</Script>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Boxes</name>
						<packageName></packageName>
						<script>GUI.PaperCSS = CSSMan.new([[
	background-image: url("]]..ImgPath..[[parchment.png");
	background-position: center;
	background-repeat: no-repeat;
  border-width: 1px;
  border-radius: 5px;
  margin: 5px;
	font-family: 'IM Fell DW Pica SC', serif;
	color: black;
  qproperty-wordWrap: true;
]])

GUI.ReflexCSS = CSSMan.new([[
	background-color : transparent;
	background-position: center;
	background-repeat: no-repeat;
  margin: 5px;
	font-family: 'IM Fell DW Pica SC', serif;
	color: black;
  qproperty-wordWrap: true;
]])

GUI.ReflexInfoCSS = CSSMan.new([[
	background-color : transparent;
	background-position: center;
	background-repeat: no-repeat;
  margin: 5px;
	font-family: 'IM Fell DW Pica', serif;
	color: black;
  qproperty-wordWrap: true;
]])

GUI.CommsCSS = CSSMan.new([[
  background-color : transparent;
	border-width: 3px;
	border-radius: 5px;
	border-style: double solid;
	border-color: "#aa8822";
	padding: 5px;
	margin: 1px;
  qproperty-wordWrap: true;
]])

GUI.GearCSS = CSSMan.new([[
  background-color : #330000;
	border-width: 3px;
	border-radius: 5px;
	border-style: double solid;
	border-color: "#aa8822";
	padding: 5px;
	margin: 1px;
  qproperty-wordWrap: true;
]])



</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Boxes Top Right</name>
							<packageName></packageName>
							<script>GUI.HelpBox = Geyser.Label:new({'GUI.HelpBox', width='1', height='1'})
GUIframe.addWindow(GUI.HelpBox, 'Help', 'topright')
GUI.HelpBox:setColor("black")
GUI.HelpBox:setStyleSheet(GUI.CommsCSS:getCSS())

GUI.ReflexBox = Geyser.Label:new({'GUI.ReflexBox', width='1', height='1'})
GUIframe.addWindow(GUI.ReflexBox, 'Reflexes', 'topright')
GUI.ReflexBox:setColor("black")
GUI.ReflexBox:setStyleSheet(GUI.CommsCSS:getCSS())

GUI.GearBox = Geyser.Label:new({'GUI.GearBox', width='1', height='1'})
GUIframe.addWindow(GUI.GearBox, 'Gear', 'topright')
GUI.GearBox:setStyleSheet(GUI.GearCSS:getCSS())

GUI.WeaponBox = Geyser.Label:new({'GUI.WeaponBox', width='1', height='1'})
GUIframe.addWindow(GUI.WeaponBox, 'Weapon Sets', 'topright')
GUI.WeaponBox:setColor("black")
GUI.WeaponBox:setStyleSheet(GUI.CommsCSS:getCSS())</script>
							<eventHandlerList />
							<Script isActive="yes" isFolder="no">
								<name>Reflex Console</name>
								<packageName></packageName>
								<script>ReflexConsole = Geyser.MiniConsole:new({ 
name = 'ReflexConsole',
x="2%", y="3%",
width = "96%", height = "95%",
autoWrap = true, 
scrollBar = true,
fontSize = 10,
}, GUI.ReflexBox)
ReflexConsole:setColor("black") -- background

function update_reflex_console()
  clearWindow("ReflexConsole")

  ReflexConsole:cecho("\n&lt;dodger_blue&gt;* * * Container&lt;gray&gt;: &lt;gold&gt;"..container.."&lt;gray&gt; \nSet with &lt;white&gt;cont, container, &lt;gray&gt;or&lt;white&gt; setcontainer&lt;gray&gt;.\n&lt;white&gt;gg &lt;object&gt;&lt;gray&gt; (get object from the container)\n&lt;white&gt;pc &lt;object&gt; &lt;gray&gt;(put object into the container)\n\n")
  ReflexConsole:cecho("&lt;dodger_blue&gt;* * * Drink&lt;gray&gt;: &lt;gold&gt;"..drink.."&lt;gray&gt; \nSet with &lt;white&gt;setdrink&lt;gray&gt;.\n&lt;white&gt;dr &lt;gray&gt; or &lt;white&gt;dc&lt;gray&gt; (drink from the container)\n&lt;white&gt;fc &lt;gray&gt;(fill container)\n\n")
  ReflexConsole:cecho("&lt;dodger_blue&gt;* * * Food&lt;gray&gt;: &lt;gold&gt;"..food.."&lt;gray&gt; \nSet with &lt;white&gt;'food'&lt;gray&gt; or&lt;white&gt; 'setfood'.\n&lt;white&gt;gf&lt;gray&gt; (get food from the set container)\n&lt;white&gt;eat &lt;gray&gt;&lt;without any argument&gt; (eat set food)\n\n")
  ReflexConsole:cecho("&lt;dodger_blue&gt;* * * Esay&lt;gray&gt;: &lt;gold&gt;"..esay.."&lt;gray&gt; \nSet with &lt;white&gt;'setesay'&lt;gray&gt;.\n&lt;white&gt;es &lt;gray&gt; (esays in the set fashion. See HELP ESAY in-game.)\n\n") 
  ReflexConsole:cecho("&lt;dodger_blue&gt;* * * Potion&lt;gray&gt;: &lt;gold&gt;"..potion.."&lt;gray&gt; \nSet with &lt;white&gt;'pot' or 'potion'\n&lt;white&gt;qq&lt;gray&gt; (quaff potion)\n&lt;white&gt;gp&lt;gray&gt; (get potion from set container)\n\n")
  ReflexConsole:cecho("&lt;dodger_blue&gt;* * * Highlight&lt;gray&gt;: &lt;gold&gt;"..highlight.."&lt;gray&gt; \nSet with &lt;white&gt;'high' or 'highlight'\n\n")

end

update_reflex_console()</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Help</name>
								<packageName></packageName>
								<script>

HelpConsole = Geyser.MiniConsole:new({ 
name = 'HelpConsole',
x="2%", y="3%",
width = "96%", height = "95%",
autoWrap = true, 
scrollBar = true,
fontSize = 10,
}, GUI.HelpBox)
clearWindow("HelpConsole")
HelpConsole:setColor("black") -- background

function help_menu()
	HelpConsole:cecho("\n&lt;white&gt;Welcome!\n\n&lt;gray&gt;Questions related to Carrion Fields can be answered using the in-game &lt;white&gt;HELP&lt;gray&gt; command, or by visiting our forums.\n\n")
	HelpConsole:cecho("Enter: &lt;white&gt;guihelp &lt;number&gt;&lt;gray&gt; to learn about a feature.\n\n")
	HelpConsole:cecho("   &lt;dodger_blue&gt;1&lt;gray&gt; - The Targeting System\n")
	HelpConsole:cecho("   &lt;dodger_blue&gt;2&lt;gray&gt; - Pre-Set Aliases and 'Reflexes'\n")
	HelpConsole:cecho("   &lt;dodger_blue&gt;3&lt;gray&gt; - The Friends and Enemies System\n")
	HelpConsole:cecho("   &lt;dodger_blue&gt;4&lt;gray&gt; - Gauges and the 'Setprompt' Command\n")
	HelpConsole:cecho("   &lt;dodger_blue&gt;5&lt;gray&gt; - How to Write an Alias in Mudlet\n")
	HelpConsole:cecho("   &lt;dodger_blue&gt;6&lt;gray&gt; - How to Set Hotkeys\n")
	HelpConsole:cecho("   &lt;dodger_blue&gt;7&lt;gray&gt; - Target Swapping\n")	
	HelpConsole:cecho("   &lt;dodger_blue&gt;8&lt;gray&gt; - Logging &amp; The Item Journal\n")	
	HelpConsole:cecho("   &lt;dodger_blue&gt;9&lt;gray&gt; - Mapping\n")	
	HelpConsole:cecho("   &lt;dodger_blue&gt;0&lt;gray&gt; - Troubleshooting\n\n")
	HelpConsole:cecho("&lt;white&gt;Note:&lt;gray&gt; &lt;steel_blue&gt;*&lt;white&gt;Right-click&lt;steel_blue&gt;*&lt;gray&gt; the blue arrows at the center of the top, bottom and right frames to resize the interface. This will solve most layout-related problems. Red frame-label tabs (like the above 'Help' tab) can be right-click dragged and moved between windows. Use &lt;white&gt;guisave&lt;gray&gt; to save the layout once you're satisfied, and &lt;white&gt;guireset&lt;gray&gt; to return to default.\n\n")
	--HelpConsole:cecho("&lt;white&gt;Also:&lt;gray&gt; Type &lt;white&gt;/alias help&lt;gray&gt; or &lt;white&gt;/trigger help&lt;gray&gt; to create simple aliases or triggers, or &lt;white&gt;guihelp 5&lt;gray&gt; for more involved features.\n\n")
end


function helpLinks(htext, hlinktext, hurl, hcaption)
  HelpConsole:cecho("&lt;steel_blue&gt;Helpful Links:&lt;gray&gt;\n\n")
  HelpConsole:cecho("&lt;gray&gt;Chat our friendly immortals and playerbase for help: ")
  HelpConsole:cechoLink("&lt;dodger_blue&gt;Carrion Fields Discord&lt;gray&gt;\n\n", [[openURL("https://discord.gg/tK8Q5px"]], "Carrion Fields Discord", true)
  HelpConsole:cecho("&lt;gray&gt;For help with the client, visit ")
  HelpConsole:cechoLink("&lt;dodger_blue&gt;The Mudlet Manual\n\n", [[openWebPage("https://wiki.mudlet.org/w/Manual:Introduction")]], "The Mudlet Manual", true)
  
  if htext ~= nil
  and hlinktext ~= nil
  and hurl ~= nil
  and hcaption ~= nil then
    HelpConsole:cecho("&lt;gray&gt;"..htext.." ")
    HelpConsole:cechoLink("&lt;dodger_blue&gt;"..hlinktext.."\n\n", [[openWebPage("https://]]..hurl..[[")]], hcaption, true)
  end
  
  HelpConsole:cecho("&lt;white&gt;Enter 'guihelp' alone to return to the main help menu.")
end


help_menu()</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Inventory and Equipment</name>
								<packageName></packageName>
								<script>EquipmentConsole = Geyser.MiniConsole:new({
name = 'EquipmentConsole', 
x="2%",y="3%",
width="47%",height="95%",
autoWrap = true,
scrollBar = false,
fontSize = 8,
}, GUI.GearBox)
clearWindow("EquipmentConsole")
EquipmentConsole:setColor("black") -- background

EquipmentConsole:cecho('\r\n\r\n&lt;steel_blue&gt;Use the &lt;white&gt;EQUIPMENT &lt;steel_blue&gt;command to refresh this window.')

InventoryConsole = Geyser.MiniConsole:new({
name = 'InventoryConsole', 
x="50%",y="3%",
width="48%",height="95%",
autoWrap = true,
scrollBar = true,
fontSize = 8,
}, GUI.GearBox)
clearWindow("InventoryConsole")
InventoryConsole:setColor("black") -- background
InventoryConsole:cecho('\r\n\r\n&lt;steel_blue&gt;Use the &lt;white&gt;INVENTORY &lt;steel_blue&gt;command to refresh this window.')</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>Weapon Sets</name>
								<packageName></packageName>
								<script>WeaponConsole = Geyser.MiniConsole:new({ 
name = 'WeaponConsole',
x="2%", y="3%",
width = "96%", height = "95%",
autoWrap = true, 
scrollBar = true,
fontSize = 10,
}, GUI.WeaponBox)
clearWindow("WeaponConsole")
WeaponConsole:setColor("black") -- setBackgroundColor

function displayWeaponSets()
  cecho("&lt;steel_blue&gt;You have memorized the following weapon sets:&lt;white&gt;\n\n")
  for index, data in pairs(weaponsets) do
    if index == activeset then
      cecho("&lt;orange_red&gt;» ")
    end
    cecho("&lt;white&gt;"..string.title(index).."\r\n &lt;steel_blue&gt;Wield: &lt;gray&gt;"..data["wield"].." &lt;white&gt;|&lt;steel_blue&gt; Dual: &lt;gray&gt;"..data["dual"].."&lt;white&gt; | &lt;steel_blue&gt;Hold: &lt;gray&gt;"..data["hold"].."\r\n")
  end
  echo("\r\n")
end

function updateWeaponConsole()
  clearWindow("WeaponConsole")
  
  for index, data in pairs(weaponsets) do
    weaponsetentry1 = "&lt;white&gt;"..string.title(index).."\r\n &lt;steel_blue&gt;Wield: &lt;gray&gt;"..data["wield"] 
    
    if data["dual"] ~= "none" then
    weaponsetentry2 = "&lt;white&gt; | &lt;steel_blue&gt;Dual: &lt;gray&gt;"..data["dual"].."\r\n"
    else
    weaponsetentry2 = "&lt;white&gt; | &lt;steel_blue&gt;Hold: &lt;gray&gt;"..data["hold"].."\r\n"
    end
    if index == activeset then
      WeaponConsole:cecho("&lt;orange_red&gt;» ")
    end
    WeaponConsole:cecho(weaponsetentry1..weaponsetentry2.."\r\n")
  end
  WeaponConsole:cecho("\r\n&lt;gray&gt;Useful aliases include:\r\n")
  WeaponConsole:cecho("&lt;white&gt;ws &lt;steel_blue&gt;» &lt;gray&gt;to view defined weapon sets or switch to a different weapon set.\n")
  WeaponConsole:cecho("&lt;white&gt;wi &lt;steel_blue&gt;» &lt;white&gt;wield "..mainhand.."\n&lt;white&gt;gw &lt;steel_blue&gt;» &lt;white&gt;get "..mainhand.."&lt;gray&gt; and&lt;white&gt; wield "..mainhand.."\n")
  WeaponConsole:cecho("&lt;white&gt;du &lt;steel_blue&gt;» &lt;white&gt;dual "..offhand.."&lt;gray&gt; (weapons only)\n&lt;white&gt;gd &lt;steel_blue&gt;»&lt;white&gt; get "..offhand.." &lt;gray&gt;and &lt;white&gt;dualwield "..offhand.." &lt;gray&gt;(weapons only)\n")
  WeaponConsole:cecho("&lt;white&gt;ho&lt;steel_blue&gt; » &lt;white&gt;hold "..offhand.."&lt;gray&gt; (shields and held items only)\n&lt;white&gt;gh &lt;steel_blue&gt;»&lt;white&gt; get "..offhand.."&lt;gray&gt; and &lt;white&gt;hold "..offhand.."&lt;gray&gt; (shields and held items only)\n")
end

updateWeaponConsole()</script>
								<eventHandlerList />
							</Script>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Boxes Bottom Right</name>
							<packageName></packageName>
							<script>--BOTTOM RIGHT, tabbed

GUI.CommunicationBox = Geyser.Label:new({'GUI.CommunicationBox', width='1', height='1'})
GUI.CommunicationBox:setStyleSheet(GUI.CommsCSS:getCSS())
GUIframe.addWindow(GUI.CommunicationBox, 'Communication', 'bottomright')

CommunicationConsole = Geyser.MiniConsole:new({ 
name = 'CommunicationConsole',
x="3%", y="3%",
width = "95%", height = "95%",
autoWrap = true, 
scrollBar = true,
fontSize = 9,
}, GUI.CommunicationBox)
CommunicationConsole:setColor("black") -- background

GUI.TellBox = Geyser.Label:new({'GUI.TellBox', width='1', height='1'})
GUI.TellBox:setStyleSheet(GUI.CommsCSS:getCSS())
GUIframe.addWindow(GUI.TellBox, 'Tells', 'bottomright')

TellConsole = Geyser.MiniConsole:new({ 
name = 'TellConsole',
x="3%", y="3%",
width = "95%", height = "95%",
autoWrap = true, 
scrollBar = true,
fontSize = 9,
}, GUI.TellBox)
TellConsole:setColor("black") -- background

GUI.CabalBox = Geyser.Label:new({'GUI.CabalBox', width='1', height='1'})
GUI.CabalBox:setStyleSheet(GUI.CommsCSS:getCSS())
GUIframe.addWindow(GUI.CabalBox, 'Cabal', 'bottomright')

CabalConsole = Geyser.MiniConsole:new({ 
name = 'CabalConsole',
x="3%", y="3%",
width = "95%", height = "95%",
autoWrap = true, 
scrollBar=true,
fontSize = 9,
}, GUI.CabalBox)
CabalConsole:setColor("black") -- background

GUI.AffectBox = Geyser.Label:new({'GUI.AffectBox', width='1', height='1'})
GUI.AffectBox:setStyleSheet(GUI.CommsCSS:getCSS())
GUIframe.addWindow(GUI.AffectBox, 'Affects', 'bottomright')

AffectConsole = Geyser.MiniConsole:new({ 
name = 'AffectConsole',
x="3%", y="3%",
width = "95%", height = "95%",
autoWrap = true,
scrollBar=true, 
fontSize = 8,
}, GUI.AffectBox)
AffectConsole:setColor("black") -- background</script>
							<eventHandlerList />
							<Script isActive="yes" isFolder="no">
								<name>Affects</name>
								<packageName></packageName>
								<script>function updateAffects(affects)
	clearWindow("AffectConsole")
	
	for affect, _ in ipairs(affects) do
		local aff_type = affects[affect][1]
		local aff_name = affects[affect][2]
		local aff_loc = affects[affect][3]
		local aff_mod = affects[affect][4]
		local aff_dur = affects[affect][5]
		local aff_active = affects[affect][6]
		local message = ""
		local gauge = true
		local dropped = nil		
          
          
		if affect == 1
		or affect &gt; 1 and aff_name ~= affects[affect-1][2]
		or aff_type ~= affects[affect-1][1]
		or aff_name == affects[affect-1][2] and aff_dur ~= affects[affect-1][5] then
			message = message.."&lt;gold&gt;"..string.title(aff_name)
			gauge = true
		elseif aff_type == nil then
			gauge = false
		else
			gauge = false
		end
		
		if gauge == true 
		and aff_active == "permanent" then
			gauge = false
			message = message.."&lt;white&gt; persists indefinitely.\n"
			cecho("AffectConsole", message)
			elseif gauge == true and type(aff_dur) == "string" then
        gauge = false
        message = message.."&lt;white&gt; lasts for a "..aff_dur..".\n"
        cecho("AffectConsole", message)
      elseif aff_dur == nil then
				gauge = false
				message = message.."&lt;white&gt; lasts for an uncertain duration.\n"
				cecho("AffectConsole", message)
			else
			end
			
		if gauge == true then
			cecho("AffectConsole", message.." &lt;gray&gt;║")
				if aff_type == "Timer" then barcolor = "&lt;dark_slate_blue&gt;"
				elseif aff_type == "Spell" then barcolor = "&lt;CornflowerBlue&gt;"
				elseif aff_type == "Physical effect" then barcolor = "&lt;maroon&gt;"
				elseif aff_type == "Commune" then barcolor = "&lt;antique_white&gt;"
				elseif aff_type == "Song" then barcolor = "&lt;forest_green&gt;"
				elseif aff_type == "Power" then barcolor = "&lt;coral&gt;"
				else barcolor = "&lt;maroon&gt;"
				end
				
				if aff_active == "active" and aff_dur &gt;= 0 then
					for count=1, aff_dur do
						cecho("AffectConsole",barcolor.."█")
					end
					cecho("AffectConsole","&lt;gray&gt;║&lt;white&gt; "..aff_dur.." hours.\n\n")
				elseif aff_active == "active" and aff_dur &lt; 0 then
          cecho("AffectConsole", "&lt;white&gt; ** &lt;firebrick&gt;EXPIRED&lt;white&gt; ** &lt;gray&gt;║\n")
          aff_active = "expired"
				elseif aff_active == "dispeled" then
					cecho("AffectConsole", "&lt;white&gt; ** &lt;OrangeRed&gt;DISPELED!&lt;white&gt; ** &lt;gray&gt;║\n")
				end
		end
	end
cecho("AffectConsole","\n&lt;gray&gt;Note: Refresh using &lt;white&gt;AFF&lt;gray&gt; or &lt;white&gt;SCORE&lt;gray&gt;.")
end</script>
								<eventHandlerList />
							</Script>
						</Script>
					</ScriptGroup>
					<Script isActive="yes" isFolder="no">
						<name>Header Icons</name>
						<packageName></packageName>
						<script>local mapcount = 0

GUI.Header = Geyser.HBox:new({
  name = "GUI.Header",
  x = 0, y = 0,
  width = "100%",
  height = "100%",
})
GUIframe.addWindow(GUI.Header, 'Action Keys', 'top')

GUI.IconCSS = CSSMan.new([[
  background-color: rgba(0,0,0,.3);
  border-style: inset;
  border-width: 1px;
  border-color: "#aa8822";
  border-radius: 5px;
  margin: 5px;
	font-family: 'IM Fell DW Pica', serif;
  qproperty-wordWrap: true;
]])

GUI.WorldMapCSS = CSSMan.new([[
	background-image: url("]]..ImgPath..[[worldmap.png");
	background-position: center;
	background-repeat: no-repeat;
  border-width: 1px;
  border-radius: 5px;
  margin: 5px;
	font-family: 'IM Fell DW Pica SC', serif;
	color: black;
  qproperty-wordWrap: true;
]])

for i=1,4 do
  GUI["Icon"..i] = Geyser.Label:new({
    name = "GUI.Icon"..i,
  },GUI.Header)
  GUI["Icon"..i]:setStyleSheet(GUI.IconCSS:getCSS())
	GUI["Icon"..i]:setFontSize(11)
	GUI["Icon"..i]:setFgColor("LightGoldenrod")
	
	GUI["Icon"..i]:setStyleSheet([[
	QLabel{ 
  background-color: rgba(150,0,0,.3);
  border-style: outset;
  border-width: 1px;
  border-color: "#aa8822";
  border-radius: 5px;
  margin: 5px;
	font-family: 'IM Fell DW Pica', serif;
  qproperty-wordWrap: true;
	}
	QLabel::hover{
	background-color: rgba(150,0,0,1);
  border-style: outset;
  border-width: 1px;
  border-color: "#aa8822";
  border-radius: 5px;
  margin: 5px;
	font-family: 'IM Fell DW Pica', serif;
  qproperty-wordWrap: true;
	}
]])

	if vt["t"..i] ~= nil then
		GUI["Icon"..i]:echo("&lt;center&gt;F"..i..": "..vt["t"..i])
	else
		GUI["Icon"..i]:echo("&lt;center&gt;Set with 't"..i.."'")
	end	

GUI["Icon"..i]:setClickCallback("tbutton"..i)
end

for i=5,7 do
  GUI["Icon"..i] = Geyser.Label:new({
    name = "GUI.Icon"..i,
  },GUI.Header)
  GUI["Icon"..i]:setStyleSheet(GUI.IconCSS:getCSS())
	GUI["Icon"..i]:setFontSize(11)
	GUI["Icon"..i]:setFgColor("LightGoldenrod")
	GUI["Icon"..i]:echo("&lt;center&gt;Set with 'a"..i.."'")
	GUI["Icon"..i]:setStyleSheet([[
	QLabel{ 
  background-color: rgba(0,150,150,.3);
  border-style: outset;
  border-width: 1px;
  border-color: "#aa8822";
  border-radius: 5px;
  margin: 5px;
	font-family: 'IM Fell DW Pica', serif;
  qproperty-wordWrap: true;
	}
	QLabel::hover{
	background-color: rgba(0,150,150,1);
  border-style: outset;
  border-width: 1px;
  border-color: "#aa8822";
  border-radius: 5px;
  margin: 5px;
	font-family: 'IM Fell DW Pica', serif;
  qproperty-wordWrap: true;
	}
]])

if vt["a"..i] ~= nil then
		GUI["Icon"..i]:echo("&lt;center&gt;F"..i..": "..vt["a"..i])
	else
		GUI["Icon"..i]:echo("&lt;center&gt;Set with 'a"..i.."'")
	end	

	GUI["Icon"..i]:setClickCallback("abutton"..i)
end

for i=8,13 do
  GUI["Icon"..i] = Geyser.Label:new({
    name = "GUI.Icon"..i,
  },GUI.Header)
	GUI["Icon"..i]:setFontSize(11)
	GUI["Icon"..i]:setFgColor("LightGoldenrod")
	GUI["Icon"..i]:setStyleSheet([[
	QLabel{ 
  background-color: rgba(150,0,150,.4);
  border-style: outset;
  border-width: 1px;
  border-color: "#aa8822";
  border-radius: 5px;
  margin: 5px;
	font-family: 'IM Fell DW Pica', serif;
  qproperty-wordWrap: true;
	}
	QLabel::hover{
	background-color: rgba(150,0,150,1);
  border-style: outset;
  border-width: 1px;
  border-color: "#aa8822";
  border-radius: 5px;
  margin: 5px;
	font-family: 'IM Fell DW Pica', serif;
  qproperty-wordWrap: true;
	}
]])
	GUI["Icon"..i]:setClickCallback("abutton"..i)
  end

GUI.Icon8:echo("&lt;center&gt;World Map")
GUI.Icon8:setClickCallback("worldmap_button")

GUI.WorldMap = Geyser.Label:new({'GUI.WorldMap', 
--width='1024', height='768',
width='1', height='1',
x = "-1035", y = 33,
})
GUI.WorldMap:setBackgroundImage(ImgPath.."worldmap.png")
GUI.WorldMap:hide()
GUI.WorldMap:setClickCallback("hide_map_on_click")

function tbutton1()
	if t1 ~= nil then
	target = t1
	cecho("&lt;white&gt;Target set to &lt;firebrick&gt;"..target.."&lt;white&gt;.\n\n")
	GUI.TargetInput:echo("&lt;center&gt;"..target)

	table.save(PkgPath.."vt.lua", vt)
else
	cecho("&lt;white&gt;You do not have a target assigned to F1. Use the 't1' command to add an alternate target.\n\n")
	end
end

function tbutton2()
	if t2 ~= nil then
	target = t2
	cecho("&lt;white&gt;Target set to &lt;firebrick&gt;"..target.."&lt;white&gt;.\n\n")
	GUI.TargetInput:echo("&lt;center&gt;"..target)

	table.save(PkgPath.."vt.lua", vt)
else
	cecho("&lt;white&gt;You do not have a target assigned to F2. Use the 't2' command to add an alternate target.\n\n")
	end
end

function tbutton3()
	if t3 ~= nil then
	target = t3
	cecho("&lt;white&gt;Target set to &lt;firebrick&gt;"..target.."&lt;white&gt;.\n\n")
	GUI.TargetInput:echo("&lt;center&gt;"..target)

	table.save(PkgPath.."vt.lua", vt)
else
	cecho("&lt;white&gt;You do not have a target assigned to F3. Use the 't3' command to add an alternate target.\n\n")
	end
end

function tbutton4()
	if t4 ~= nil then
	target = t4
	cecho("&lt;white&gt;Target set to &lt;firebrick&gt;"..target.."&lt;white&gt;.\n\n")
	GUI.TargetInput:echo("&lt;center&gt;"..target)

	table.save(PkgPath.."vt.lua", vt)
else
	cecho("&lt;white&gt;You do not have a target assigned to F4. Use the 't4' command to add an alternate target.\n\n")
	end
end


function abutton5()
	if a5 ~= nil then
	action = a5
	cecho("&lt;white&gt;Action set to &lt;steel_blue&gt;"..action.."&lt;white&gt;.\n\n")
	GUI.ActionInput:echo("&lt;center&gt;"..action)

	table.save(PkgPath.."vt.lua", vt)
else
	cecho("&lt;white&gt;You do not have an action assigned to F5. Use the 'a5' command to add an alternate action.\n\n")
	end
end

function abutton6()
	if a6 ~= nil then
	action = a6
	cecho("&lt;white&gt;Action set to &lt;steel_blue&gt;"..action.."&lt;white&gt;.\n\n")
	GUI.ActionInput:echo("&lt;center&gt;"..action)

	table.save(PkgPath.."vt.lua", vt)
else
	cecho("&lt;white&gt;You do not have an action assigned to F6. Use the 'a6' command to add an alternate action.\n\n")
	end
end

function abutton7()
	if a7 ~= nil then
	action = a7
	cecho("&lt;white&gt;Action set to &lt;steel_blue&gt;"..action.."&lt;white&gt;.\n\n")
	GUI.ActionInput:echo("&lt;center&gt;"..action)

	table.save(PkgPath.."vt.lua", vt)
else
	cecho("&lt;white&gt;You do not have an action assigned to F7. Use the 'a7' command to add an alternate action.\n\n")
	end
end


function hide_map_on_click()
	GUI.WorldMap:resize(1,1)
	GUI.WorldMap:hide()
	mapcount = 0
end

function worldmap_button()
	if mapcount == 0 then
	GUI.WorldMap:resize(1024,768)
	GUI.WorldMap:show()
	mapcount = 1
	else
	GUI.WorldMap:hide()
	mapcount = 0
	end
	
end

GUI.Icon9:echo("&lt;center&gt;Wiki Maps")

GUI.Icon9:setClickCallback("wiki_maps_button")
function wiki_maps_button()
	openWebPage("http://wiki.qhcf.net/index.php?title=WorldMap")
end

GUI.Icon10:echo("&lt;center&gt;Homepage")
GUI.Icon10:setClickCallback("homepage_button")

function homepage_button()
	openWebPage("http://www.carrionfields.net")
end

GUI.Icon11:echo("&lt;center&gt;Item Search")
GUI.Icon11:setClickCallback("itemsearch_button")

function itemsearch_button()
	openWebPage("http://www.carrionfields.net/itemsearch/")
end

GUI.Icon12:echo("&lt;center&gt;Forums")
GUI.Icon12:setClickCallback("forums_button")

GUI.Icon13:echo("&lt;center&gt;Items &amp; Logs")
GUI.Icon13:setClickCallback("itemjournal_button")

function forums_button()
	openWebPage("http://forums.carrionfields.com")
end

function itemjournal_button()
  openWebPage("file:///"..getMudletHomeDir().."/log/")
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Logger</name>
				<packageName>Logger</packageName>
				<script></script>
				<eventHandlerList />
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Logging</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Logging</name>
						<packageName></packageName>
						<script>Logger = Logger or {
		_currFileNum 	= 0,

		_fileName = nil,

		_keepOpen = {}
	}

function Logger:getLogDirectory()
	if string.char(getMudletHomeDir():byte()) == "/" then _sep = "/" else  _sep = "\\" end
	local logdir = getMudletHomeDir() ..  _sep .. "log" .. _sep
	return logdir
end

function Logger:echo(message)
	cecho("\n&lt;red&gt;Logger: ")
	cecho("&lt;white&gt;" .. message)
end

function Logger:Log(file, val, options)
	options = options or Logger.options or {}

	local line = ""
   if table.contains(options, "timestamp") then
		local time_format = "'['dd'/'MM'/'yyyy' - 'hh':'mm':'ss'.'zzz]: "
		line = line .. getTime(true, time_format)
	end

	if table.contains(options, "split") then
		local maxSize = options.split
		self:_checkFileSize(file, maxSize)
	end
	
	local keepopen = table.contains(options, "keepOpen")

	local f
	
	if not self._keepOpen[file] then
		local filename = self:getLogDirectory()  .. file .. ".txt"
		f = io.open(filename, "a+")
		self._keepOpen[file] = f
	else
		f = self._keepOpen[file]
	end

	line = line .. val
	f:write(line .. "\n")

	if not keepopen then
		self:_closeLog(file)
	end
end

function Logger:CloseLog(file)
	if file then
		self:_closeLog(file)
	else
		for f, _ in pairs(self._keepOpen) do
			self:_closeLog(f)
		end
	end
end

function Logger:SearchLog(file, pattern)
	self:_closeLog(file) -- close the log if its open, so we can access it

	local filename = self:getLogDirectory() .. file .. ".txt"
	if not io.exists(filename) then
		self:echo("File '" .. file .. "' does not exist!")
		return
	end

	local counter = 0

	local numBackups = self:_getCurrentFileNumber(file)

	Logger:echo("Searching for '&lt;steel_blue&gt;" .. pattern .. "&lt;white&gt;' in file '" .. file .. "'")
	
	local t = 1;
	local lines = 0
	local r = rex.new(pattern)

	while t &lt;= numBackups do
		local bfilename = self:getLogDirectory() .. file .. "." .. tostring(t) .. ".txt"
		local f = io.open(bfilename, "r")

		for line in f:lines() do
			lines = lines + 1
			if r:match(line) then
				cecho("\n&lt;grey&gt;" .. line .. "  &lt;white&gt;(in " .. file .. "." .. tostring(t) .. ".txt)")
				counter = counter + 1
			end
		end

		f:close()

		t = t + 1
	end

	local f = io.open(filename, "r")

	for line in f:lines() do
		lines = lines + 1
		if r:match(line) then
			cecho("\n&lt;grey&gt;" .. line .. "  &lt;white&gt;(in " .. file .. ".txt)")
			counter = counter + 1
		end
	end

	f:close()

	Logger:echo("Term matched " .. counter .. " times in " .. lines .. " lines.")
end

function Logger:LogSection(file, options)
		if self.trigger_id then 
			Logger:echo("Already logging a section. Do Logger:StopLogging() first")
			return
		end

		options = options or {}
		
		if not table.contains(options, "keepOpen") then table.insert(options, "keepOpen") end
		
		local splitSize = 0
		if table.contains(options, "split") then
			splitSize = options.split
			self:_checkFileSize(file, splitSize)
		end

		-- we don't want to pass this on
		options.split = nil

		self:Log(file, "\n\n", {"keepOpen"})
		self:Log(file, "[[[START OF SECTION]]]", {"timestamp", "keepOpen"})

		self.logging_file = file
		self.options = options
		self.trigger_id = tempRegexTrigger(".*", [[ Logger:Log("]] .. file .. [[", matches[1], Logger.options)]])	
		
		if splitSize ~= 0 then
			self.splitSize = splitSize
			enableTimer("Check File Size")
		end
		Logger:echo("Started logging!")
end

function Logger:StopLogging()
	if self.trigger_id then
		killTrigger(self.trigger_id)
		self:_closeLog(self.logging_file)
		self.trigger_id = nil
		self.options = nil
		self.splitSize = 0
		disableTimer("Check File Size")
		self:Log(self.logging_file, "[[[END OF SECTION]]]", {"timestamp"})

		self.logging_file = nil
		Logger:echo("Logging stopped!")
	end
end

function Logger:_checkFileSize(file, maxSize)
	--Check whether our file size is to big
	if self:_getFileSize(file) &gt;= maxSize then
		-- if it is, we need to rename the current file.txt to file.n.text
		self:_closeLog(file)
		local t = self:_getNextFileNumber(file)
		os.rename(self:getLogDirectory() .. file .. ".txt", self:getLogDirectory() .. file .. "." .. t .. ".txt")
	end
end

function Logger:_getFileSize(file)
	local filename = self:getLogDirectory()  .. file .. ".txt"
	local f = io.open(filename, "r")

	if not f then return 0 end
	local size = f:seek("end")    -- get file size
  	
	f:close()
	return size / 1024 -- We want size in kb's, not bytes
end

function Logger:_getCurrentFileNumber(file)
	local t = 1
	local stop = false
	while not stop do
		local filename = self:getLogDirectory() .. file .. "." .. tostring(t) .. ".txt"
		if io.exists(filename) then
			t = t + 1
		else
			stop = true
		end
	end

	self._currFileNum = t - 1

	return self._currFileNum
end

function Logger:_getNextFileNumber(file)
	local current = self:_getCurrentFileNumber(file)
	self._currFileNum = current + 1
	return self._currFileNum
end


function Logger:_closeLog(file)
	if self._keepOpen[file] then
		self._keepOpen[file]:close()
		self._keepOpen[file] = nil
	end
end
</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>DarkTheme</name>
				<packageName>DarkTheme</packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>DarkTheme</name>
					<packageName></packageName>
					<script>local packagepath = getMudletHomeDir():gsub("\\", "/")
local txt_col =  "#808080"
local txt_col2 = "#404040"
local bg_col =  "#181818"
local bg_col2 = "#1c1c1c"
local bg_col3 = "#202020"
local bg_col_hover = "#282828"
local bd_col =  "#383838"
local bd_col2 = "#404040"
local bd_col_hover = "#909090"
local dim_col =  "#080808"
local dim_col2 = "#0e0e0e"
local hi_col = "#303030"
local test_col = "#ff0000"
--border styles: ridge, outset, inset, groove, double, dotted, dashed, dot-dash, and dot-dot-dash

dark_style1 = [[
QMainWindow, 
QSplitter, 
QSplitterHandle, 
QWidget#mainArea, 
dlgConnectionProfiles, 
QWidget#panel, 
QWidget#widget_searchAreaTop,
QMessageBox {
   background-color: ]]..bg_col..[[; 
	 color: ]]..txt_col..[[;
}
QCheckBox[enabled="false"] {
   color: ]]..txt_col2..[[;
}
QToolTip {
    background-color:]]..bg_col2..[[; 
    color: ]]..txt_col..[[;
    padding: 5px;
    opacity: 220;
		border-width: 1px;
		border-style: solid;
		border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
}
QWidget {
   color: ]]..txt_col..[[;
}
QDialog {
    background-color: ]]..bg_col..[[; 
}
QDockWidget {
    background-color: ]]..bg_col3..[[;
		color: ]]..txt_col..[[;
}
QDockWidget::close-button, QDockWidget::float-button {
    background: transparent;
}
QDockWidget::close-button:hover, QDockWidget::float-button:hover {
    background: rgba(255, 255, 255, 60);
		border-width: 1px;
		border-style: solid;
		border-color: ]]..bd_col..[[;
}
QDockWidget::close-button:pressed, QDockWidget::float-button:pressed {
    padding: 1px -1px -1px 1px;
    background: rgba(255, 255, 255, 60);
}
QWidget:item:selected {
    background-color: ]]..hi_col..[[;
}
QMenuBar {
    background-color: ]]..bg_col..[[;
		color: ]]..txt_col..[[;
}
QMenu {
    border-width: 1px;
		border-style: solid;
    border-color: ]]..bd_col..[[;
		background-color: ]]..bg_col..[[;
    color: ]]..txt_col..[[;
    margin: 0px;
}
QMenu::separator {
    height: 1px;
    background-color: ]]..dim_col..[[;
    padding-left: 4px;
    margin-left: 5px;
    margin-right: 5px;
}
QMenuBar::item:pressed {
    border-width: 1px;
		border-style: solid;
		border-color: ]]..bd_col..[[;
    color: ]]..txt_col..[[;
    margin-bottom:-1px;
    padding-bottom:1px;
}
QMenu::item:selected {
    color: ]]..txt_col..[[;
}
QMenu::item:disabled {
    background-color: ]]..bg_col..[[;
    color: ]]..txt_col2..[[;
}
QMenu:hover {
    background-color: ]]..bg_col..[[;
}
QMenu::item:hover {
    background-color: ]]..dim_col..[[;
}
QMenu::indicator {
    width: 18px;
    height: 18px;
}
QComboBox {
    background-color: ]]..dim_col..[[;
    selection-background-color: ]]..hi_col..[[;
    border-width: 1px;
    border-left-color: ]]..dim_col..[[;
		border-top-color: ]]..dim_col..[[;
		border-right-color: ]]..hi_col..[[;
		border-bottom-color: ]]..hi_col..[[;
    border-style: solid;
}
QComboBox::drop-down {
    background-color: ]]..bg_col..[[;
		color: #ff0000;
    subcontrol-origin: padding;
    subcontrol-position: top right;
    width: 12px;
		border-width: 2px;
		border-style: solid;
		border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
    border-radius: 0px;
}
QAbstractSpinBox {
    padding: 2px;
		border-style: solid;
    border-left-color: ]]..dim_col..[[;
		border-top-color: ]]..dim_col..[[;
		border-right-color: ]]..hi_col..[[;
		border-bottom-color: ]]..hi_col..[[;
    background-color: ]]..dim_col..[[;
    color: ]]..txt_col..[[;
    border-radius: 0px;
    min-width: 30px;
}
QAbstractSpinBox:up-button {
    background-color: ]]..bg_col2..[[;
		border-width: 1px;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
    border-style: solid;
    border-radius: 0px;
}
QAbstractSpinBox:down-button {
    background-color: ]]..bg_col2..[[;
		border-width: 1px;
		border-style: solid;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
    border-radius: 0px;
}

QToolBar {
    background-color: ]]..bg_col..[[;
		border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
}
QToolButton {
    background-color: ]]..bg_col..[[;
    border-radius: 0px;
    padding: 3px;
}
QToolButton:hover, QToolButton::menu-button:hover {
    background-color: ]]..bg_col2..[[;
		border-width: 2px;
		border-style: solid;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;		
}
QToolButton:checked, QToolButton:pressed,
QToolButton::menu-button:pressed {
    background-color: ]]..dim_col..[[;;
		border-width: 2px;
		border-style: solid;
    border-left-color: ]]..dim_col..[[;
		border-top-color: ]]..dim_col..[[;
		border-right-color: ]]..hi_col..[[;
		border-bottom-color: ]]..hi_col..[[;
}
QToolButton:checked {
    background-color: transparent;
    border-width: 1px;
		border-style: solid;
		border-color: ]]..bd_col..[[;
}
QToolButton#togglePanel {
    background-color: ]]..bg_col..[[;
		border-width: 1px;
		border-style: solid;
		border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
}
QToolButton#togglePanel:hover {
    background-color: ]]..bg_col2..[[;
}
QPushButton::menu-indicator  {
    background-color: ]]..bg_col..[[;
    subcontrol-origin: padding;
    subcontrol-position: bottom right;
    left: 0px;
}
QPushButton {
    color: ]]..txt_col..[[;
    background-color: ]]..bg_col2..[[;
}
QPushButton:disabled {
    background-color: ]]..bg_col2..[[;
    border-width: 1px;
    border-color: ]]..dim_col..[[;
    border-style: solid;
    border-radius: 0px;
    color: ]]..txt_col..[[;
		padding-top: 4px;
    padding-bottom: 4px;
    padding-left: 10px;
    padding-right: 10px;
}
QPushButton:focus {
    background-color: ]]..bg_col2..[[;
    color: ]]..txt_col..[[;
}
QPushButton:pressed
{
    background-color: ]]..bg_col2..[[;
    padding-top: -15px;
    padding-bottom: -17px;
}
/* scrolling window background */
QAbstractScrollArea {
    border-radius: 0px;
    border-top:    1px solid ]]..dim_col..[[;
		border-left:   1px solid ]]..dim_col..[[;
		border-bottom: 1px solid ]]..hi_col..[[;
		border-right:  1px solid ]]..hi_col..[[;
    background-color: ]]..dim_col..[[;
		color: ]]..txt_col..[[;
}
]]
--
-- ================================== PART TWO ====================================
--
dark_style2 = [[
QListView::item:!selected:hover, QTreeView::item:!selected:hover  {
    background: rgba(40, 40, 40, 0.6);
    color:]]..txt_col..[[;
}
QListView::item:selected:hover, QTreeView::item:selected:hover  {
    background: #404040;
    color: ]]..txt_col..[[;
}
QListView::item:selected, QTreeView::item:selected  {
    background: ]]..bg_col2..[[;
    color: ]]..txt_col..[[;
}
QHeaderView::section  {
    background-color: ]]..bg_col..[[;
    color: ]]..txt_col..[[;
    padding: 1px;
		border-width: 1px;
		border-style: solid;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
    border-radius: 0px;
    text-align: center;
}
QHeaderView {
    background-color: ]]..bg_col..[[;
    border: 1px transparent;
    border-radius: 0px;
    margin: 0px;
    padding: 0px;
}
QLineEdit {
    background-color: ]]..dim_col..[[;
    padding: 1px;
    border-radius: 0px;
		border-top:    1px solid ]]..dim_col..[[;
		border-left:   1px solid ]]..dim_col..[[;
		border-bottom: 1px solid ]]..hi_col..[[;
		border-right:  1px solid ]]..hi_col..[[;
}
QLineEdit#pattern {
    background-color: ]]..test_col..[[;
    padding: 1px;
		border-width: 1px;
		border-style: solid;
    border-color: ]]..bd_col..[[;
    border-radius: 0px;
}
QLineEdit#qt_spinbox_lineedit {
    padding: 1px;
		background-color: ]]..dim_col..[[;
}

/* --------profile area---------*/
QDialog#profile_preferences {
    background-color: ]]..dim_col2..[[;
}
QStackedWidget {
    color: ]]..txt_col..[[;
    background-color: ]]..bg_col3..[[;
}

/* PREFERENCES TABS */
/* unselected tabs */
QTabBar::tab:!selected {
    padding: 5px;
		margin-top: 2px;
    color: ]]..txt_col..[[;
    background-color: ]]..bg_col..[[;
		border-width: 1px;
		border-style: solid;
		border-top-color: ]]..bd_col..[[;
		border-left-color: ]]..bd_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom: 0px transparent black;
		border-top-left-radius: 1px;
    border-top-right-radius: 1px;
}
/*selected tab*/
QTabBar::tab:selected {  
    padding: 5px;
    color: ]]..txt_col..[[;
		background-color: ]]..bg_col3..[[;
    border-top-left-radius: 1px;
    border-top-right-radius: 1px;
		border-width: 1px;
		border-style: solid;
		border-top-color: ]]..bd_col..[[;
		border-left-color: ]]..bd_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom: 0px transparent black;
}
QTabBar::tab:top:!selected:hover {
    color: ]]..txt_col..[[;
    background-color: ]]..bg_col_hover..[[;
}
QTabBar::tab:top:selected:hover {
    color: ]]..txt_col..[[;
    background-color: ]]..bg_col_hover..[[;
}
QColorDialog, QColorLuminancePicker {
    background-color: ]]..bg_col..[[;
}
QTabWidget::pane {
    border-width: 1px;
		border-style: solid;
    border-color-top: ]]..bg_col..[[;
		border-color-left: ]]..bg_col2..[[;
	  border-color-bottom: ]]..dim_col..[[;
		border-color-right: ]]..dim_col..[[;
    padding: 0px;
    margin: 0px;
}
QGroupBox {
    border-radius: 0px;
    margin-top: 5px;
		border-width: 1px;
		border-style: solid;
		border-top: ]]..bg_col..[[;
		border-left: ]]..bg_col..[[;
	  border-bottom: ]]..dim_col..[[;
		border-right: ]]..dim_col..[[;
}
QGroupBox::title {
    subcontrol-origin: margin;
    subcontrol-position: top center;
    padding-left:  0px;
    padding-right: 1px;
    margin-top: -5px;
}
QGroupBox {
    border: 1px solid ]]..bd_col..[[;
		padding: 5px;
		margin: 5px;
}
dlgRoomExits {
    background-color: ]]..bg_col..[[;
}
QGroupBox#groupBox_normalExits, QGroupBox#groupBox_specialExits {
    background-color: ]]..bg_col2..[[;
}
QFrame#frame_key {
    background-color: ]]..bg_col..[[;
		border-width: 1px;
		border-style: solid;
		border-color: ]]..bd_col..[[;
}
/* SCROLLBAR AREA */
/*vertical scroll*/
  QScrollBar:vertical {
    background: ]]..dim_col2..[[;
    width: 15px;
    margin: 16px 0 16px 0;
  }
  QScrollBar::handle:vertical {
    background-color: ]]..bg_col..[[;
    min-height: 20px;
		border-width: 2px;
		border-style: solid;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
  }
  QScrollBar::add-line:vertical {
    background-color: ]]..bg_col..[[;
    height: 12px;
    subcontrol-position: bottom;
    subcontrol-origin: margin;
	  border-width: 2px;
		border-style: solid;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
  }

  QScrollBar::sub-line:vertical {
    background-color: ]]..bg_col..[[;
    height: 12px;
    subcontrol-position: top;
    subcontrol-origin: margin;
		border-width: 2px;
		border-style: solid;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
  }
  QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical {
    background: grey;
    width: 4px;
    height: 4px;
  }
  QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
    background: none;
  }
	
/* --- horizontal scroll --- */
  QScrollBar:horizontal {
    background: ]]..dim_col2..[[;
    height: 16px;
    margin: 0 16px 0 16px;
  }
	
  QScrollBar::handle:horizontal {
    background-color: ]]..bg_col..[[;
    min-width: 20px;
		height: 15px;
    border-radius: 1px;
		border-width: 2px;
		border-style: solid;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
  }
	
  QScrollBar::add-line:horizontal {
    background-color: ]]..bg_col..[[;
    height: 12px;
    width: 12px;
    subcontrol-position: right;
    subcontrol-origin: margin;
		border-width: 2px;
		border-style: solid;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
  }
	
  QScrollBar::sub-line:horizontal {
    background-color: ]]..bg_col..[[;
    height: 12px;
    width: 12px;
    subcontrol-position: left;
    subcontrol-origin: margin;
		border-width: 2px;
		border-style: solid;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
  }
	QScrollBar::left-arrow:horizontal, QScrollBar::right-arrow:horizontal {
    background: grey;
    width: 4px;
    height: 4px;
  }
  QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal {
    background: none;
  }
 ]]
 dark_style3 = [[
 
 /* Trigger Area Elements */
 QWidget#widget_top, QLabel#label_patternNumber {
     background-color: #252530;
 }
 QWidget#widget_4 {
      background-color: ]]..bg_col..[[;
 }
 QGroupBox#checkBox_stayOpen {
     background-color: #2a2a20;
 }
 QGroupBox#soundTrigger {
     background-color: #202a20;
 }
 QWidget#widget_13, QWidget#widget_3 {
     background-color: ]]..bg_col..[[;
 }
 QGroupBox#checkBox_multlinetrigger {
     background-color: #252530;
 }
 QWidget#widget_12 {
     background-color: ]]..bg_col..[[;
 }
 QGroupBox#filterTrigger {
      background-color: #302530;
 }
 QWidget#widget_11 {
     background-color: ]]..bg_col..[[;
 }
 QGroupBox#perlSlashGOption {
     background-color: #382525;
 }
 QWidget#widget_10 {
     background-color: ]]..bg_col..[[;
 }
 QGroupBox#colorizerTrigger {
     background-color: #203038;
 }
 /* ------ variable area things-------- */
 QWidget#widget_variable_key_type { background-color: #352535; }
 QWidget#widget_variable_var_type { background-color: #352525; }
 QWidget#widget_variable_hide { background-color: #353525; }
 QTabBar QToolButton::right-arrow:enabled {
     image: url(]]..packagepath..[[/DarkTheme/Images/right_arrow.png);
 }
 QTabBar QToolButton::left-arrow:enabled {
     image: url(]]..packagepath..[[/DarkTheme/Images/left_arrow.png);
 }
QTabBar QToolButton::right-arrow:disabled {
     image: url(]]..packagepath..[[/DarkTheme/Images/right_arrow_disabled.png);
}
 QTabBar QToolButton::left-arrow:disabled {
     image: url(]]..packagepath..[[/DarkTheme/Images/left_arrow_disabled.png);
}


QTreeView::branch {
        border-image: url(]]..packagepath..[[/DarkTheme/Images/transparent.png);
    }
    QTreeView::branch:closed:has-children {
        image: url(]]..packagepath..[[/DarkTheme/Images/branch_closed.png);
    }
    QTreeView::branch:open:has-children {
        image: url(]]..packagepath..[[/DarkTheme/Images/branch_open.png);
    }
    QTreeView::branch:closed:has-children:hover {
        image: url(]]..packagepath..[[/DarkTheme/Images/branch_closed-on.png);
    }
    QTreeView::branch:open:has-children:hover  {
        image: url(]]..packagepath..[[/DarkTheme/Images/branch_open-on.png);
    }
 
 
QSizeGrip {
    image: url(]]..packagepath..[[/DarkTheme/Images/sizegrip.png);
    width: 12px;
    height: 12px;
}
QToolBar::handle:horizontal {
    image: url(]]..packagepath..[[/DarkTheme/Images/Hmovetoolbar.png);
}
QToolBar::handle:vertical {
    image: url(]]..packagepath..[[/DarkTheme/Images/Vmovetoolbar.png);
}
QToolBar::separator:horizontal {
    image: url(]]..packagepath..[[/DarkTheme/Images/Hsepartoolbar.png);
}
QToolBar::separator:vertical {
    image: url(]]..packagepath..[[/DarkTheme/Images/Vsepartoolbar.png);
}
QAbstractSpinBox::up-arrow,QAbstractSpinBox::up-arrow:disabled,QAbstractSpinBox::up-arrow:off {
    image: url(]]..packagepath..[[/DarkTheme/Images/up_arrow_disabled.png);
    width: 8px;
    height: 8px;
}
QAbstractSpinBox::up-arrow:hover {
    image: url(]]..packagepath..[[/DarkTheme/Images/up_arrow.png);
}
QAbstractSpinBox::down-arrow,QAbstractSpinBox::down-arrow:disabled,QAbstractSpinBox::down-arrow:off {
    image: url(]]..packagepath..[[/DarkTheme/Images/down_arrow_disabled.png);
    width: 8px;
    height: 8px;
}
QAbstractSpinBox::down-arrow:hover {
    image: url(]]..packagepath..[[/DarkTheme/Images/down_arrow.png);
}
]]
DarkStyle = dark_style1..dark_style2..dark_style3
function DarkTheme()
setAppStyleSheet(DarkStyle)
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Simple Alias &amp; Trigger</name>
				<packageName></packageName>
				<script>-- Jor'Mox's Command Line Simple Triggers and Aliases Script
-- 
-- use /alias pattern &gt;&gt; commands to send    to create an alias
-- use /trigger pattern &gt;&gt; commands to send   to create a trigger
-- 
-- use * to indicate an argument or word(s) that must be provided
-- use ? to indicate an argument or word(s) that is optional
-- use %# to indicate the appropriately numbered argument or captured words
-- use wait # to wait that many seconds, including decimal seconds, before continuing to the next command
--
-- use /alias or /trigger to show a list of all aliases or triggers managed by this script
-- use /delete alias # or /delete trigger # to delete that alias or trigger, using the number matching that shown on the list
-- 

cmd_line = cmd_line or {data = {}}
cmd_line.data.triggers = cmd_line.triggers or {}
cmd_line.data.aliases = cmd_line.aliases or {}
local script_aliases = script_aliases or {}

local runQueue
function runQueue(fnc,tbl)
    local info = table.remove(tbl,1)
    if info then
        local run = function()
                fnc(info[2])
                runQueue(fnc,tbl)
            end
        if info[1] ~= 0 then
            tempTimer(info[1], run)
        else
            run()
        end
    end
end

local function doQueue(fnc,...)
    local tbl = {}
    local args = arg
    if type(arg[1]) == "table" then args = arg[1] end
    for k,v in ipairs(args) do
        if k % 2 == 1 and type(v) ~= "number" then
            table.insert(args,k,0)
        end
    end
    for k = 1,#args,2 do
        tbl[(k + 1) / 2] = {args[k],args[k+1]}
    end
    runQueue(fnc,tbl)
end

function sendQueue(...)
    doQueue(send,...)
end

function expandQueue(...)
    doQueue(expandAlias,...)
end

local function parse_pattern(ptrn)
    ptrn = string.gsub(ptrn,"([^/])%*","%1(.*)")
    ptrn = string.gsub(ptrn,"^%*","(.*)")
    ptrn = string.gsub(ptrn,"([^/])%?","%1\\s*(.*)")
    ptrn = string.gsub(ptrn,"^%?%s*","(.-)\s*")
    ptrn = string.gsub(ptrn,"%s+\\s%*","\\s*")
    ptrn = "^" .. ptrn .. "$"
    return ptrn
end

local function parse_cmds(cmds)
    cmds = string.split(cmds,"%s*;%s*")
    local str = "expandQueue("
    local start, match, stop, tmp
		local comma = ""
    for k,v in ipairs(cmds) do
        if string.match(v,"wait [%d%.]+") then
            str = str .. comma .. string.match(v,"^wait ([%d%.]+)$")
        elseif string.match(v,"%%%d+") then
            tmp = ""
			for start, match, stop in string.gmatch(v,"(.-)%%(%d+)([^%%]*)") do
                tmp = tmp .. string.format([[%s" .. matches[%s] .. "%s]], start, match + 1, stop)
            end
            str = str .. comma .. [["]] .. tmp .. [["]]
        else
            str = str .. comma .. [["]] .. v .. [["]]
        end
		comma = ","
    end
    str = str .. ")"
    return str
end

local function save_cmd()
    table.save(getMudletHomeDir().."/mycmd_data.lua", cmd_line.data)
end

local function check_duplicate(ptrn, is_trigger)
    local tbl
    local func
    if is_trigger then
        tbl = cmd_line.data.triggers
        func = killTrigger
    else
        tbl = cmd_line.data.aliases
        func = killAlias
    end
    
    for i,v in ipairs(tbl) do
        if v[2] == ptrn then
            func(v[1])
            print(string.format("Existing %s with identical pattern has been replaced.",is_trigger and "trigger" or "alias"))
            table.remove(tbl,i)
            break
        end
    end
end

local function make_item(ptrn, cmds, is_trigger, is_config)
    local pattern = parse_pattern(ptrn)
    local commands = parse_cmds(cmds)
    if not is_config then
        check_duplicate(ptrn,is_trigger)
    end
    if is_trigger then
        table.insert(cmd_line.data.triggers,{tempRegexTrigger(pattern,commands),ptrn,cmds})
    else
        table.insert(cmd_line.data.aliases,{tempAlias(pattern,commands),ptrn,cmds})
    end
    if not is_config then
        save_cmd()
        print(string.format("New %s with pattern %s has been created.",is_trigger and "trigger" or "alias",ptrn))
    end
end

local function show_items(triggers)
    local tbl
    local str, strs = "alias", "aliases"
    if triggers then
        tbl = cmd_line.data.triggers
        str, strs = "trigger", "triggers"
    else
        tbl = cmd_line.data.aliases
    end
    if not tbl or table.is_empty(tbl) then
        print("Sorry, you don't have any " .. strs .. ".\n")
        print("Syntax for " .. strs .. ": /" .. str .. " pattern &gt;&gt; commands to send")
        print("You can type '/" .. str .. " help' for additional information.")
    else
        for i,v in ipairs(tbl) do
            print(string.format("%3s: %s  &gt;&gt;  %s",i,v[2],v[3]))
        end
    end
end

local function delete_item(number, is_trigger)
    local info, func
    if is_trigger then
        info = table.remove(cmd_line.data.triggers,number)
        func = killTrigger
    else
        info = table.remove(cmd_line.data.aliases,number)
        func = killAlias
    end
    if info then
        func(info[1])
        save_cmd()
        print(string.format("%s number %s has been deleted.",is_trigger and "Trigger" or "Alias",number))
    end
end

local function load_cmd()
    local file = getMudletHomeDir().."/mycmd_data.lua"
	local tmp = {}
	cmd_line.data = {aliases = {}, triggers = {}}
    if io.exists(file) then
        table.load(file, tmp)
		for i,v in ipairs(tmp.triggers) do
        	make_item(v[2],v[3],true,true)
    	end
    	for i,v in ipairs(tmp.aliases) do
        	make_item(v[2],v[3],false,true)
    	end
    end
end

local function disp_help(cmd)
    if cmd == "trigger" then
        print([[Syntax for triggers: /trigger pattern &gt;&gt; commands to send
Example: /trigger You are thirsty. &gt;&gt; drink decanter
/trigger * walks in * &gt;&gt; strangle %1 ; wait 1.5 ; zap %1]])
    else
        print([[Syntax for aliases: /alias pattern &gt;&gt; commands to send
Example: /alias dt &gt;&gt; cast 'detect hidden' ; cast 'detect invis'
Example: /alias ff ? &gt;&gt; cast 'fireball' %1]])
    end
    print([[--------------------------------------------------------------------------------------------
use * to indicate an argument or word(s) that must be provided
use ? to indicate an argument or word(s) that is optional
use %# to indicate the appropriately numbered argument or captured words
use wait # to wait that many seconds, including decimal seconds, before continuing to the next command

use /alias or /trigger to show a list of all aliases or triggers managed by this script
use /delete alias # or /delete trigger # to delete that alias or trigger, using the number matching that shown on the list

NOTE: If you're having issues with multiple commands not working, please check your Settings &gt; Input line and make sure your Command Separator is not a single ;
]])
end

local function config()
    for i,v in ipairs(cmd_line.data.triggers) do
        killTrigger(v[1])
    end
    for i,v in ipairs(cmd_line.data.aliases) do
        killAlias(v[1])
    end
    for i,v in ipairs(script_aliases) do
        killAlias(v)
    end
    load_cmd()
    
    script_aliases = {}
    table.insert(script_aliases,tempAlias([[^/(alias|trigger) (.*) &gt;&gt; (.*)$]],[[raiseEvent("cmdMakeItem",matches[2],matches[3],matches[4])]]))
    table.insert(script_aliases,tempAlias([[^/(alias|trigger)$]],[[raiseEvent("cmdShowList",matches[2])]]))
    table.insert(script_aliases,tempAlias([[^/(alias|trigger) help$]],[[raiseEvent("cmdShowHelp",matches[2])]]))
    table.insert(script_aliases,tempAlias([[^/delete (alias|trigger) (\d+)$]],[[raiseEvent("cmdDeleteItem",matches[2],matches[3])]]))
end

function cmd_line.event_handler(event,...)
    if event == "sysConnectionEvent" or event == "sysInstall" then
        config()
    elseif event == "cmdMakeItem" then
        make_item(arg[2],arg[3],arg[1] == "trigger")
    elseif event == "cmdShowList" then
        show_items(arg[1] == "trigger")
    elseif event == "cmdDeleteItem" then
        delete_item(arg[2], arg[1] == "trigger")
    elseif event == "cmdShowHelp" then
        disp_help(arg[1])
    end
end

registerAnonymousEventHandler("sysConnectionEvent", "cmd_line.event_handler")
registerAnonymousEventHandler("sysInstall", "cmd_line.event_handler")
registerAnonymousEventHandler("cmdMakeItem", "cmd_line.event_handler")
registerAnonymousEventHandler("cmdShowList", "cmd_line.event_handler")
registerAnonymousEventHandler("cmdDeleteItem", "cmd_line.event_handler")
registerAnonymousEventHandler("cmdShowHelp", "cmd_line.event_handler")</script>
				<eventHandlerList />
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage>
		<KeyGroup isActive="yes" isFolder="yes">
			<name>CFGUI</name>
			<packageName>CFGUI</packageName>
			<script></script>
			<command></command>
			<keyCode>0</keyCode>
			<keyModifier>0</keyModifier>
			<KeyGroup isActive="yes" isFolder="yes">
				<name>Keys</name>
				<packageName></packageName>
				<script>	</script>
				<command></command>
				<keyCode>16777301</keyCode>
				<keyModifier>67108864</keyModifier>
				<KeyGroup isActive="yes" isFolder="yes">
					<name>Keypad</name>
					<packageName></packageName>
					<script></script>
					<command></command>
					<keyCode>-1</keyCode>
					<keyModifier>-1</keyModifier>
					<Key isActive="yes" isFolder="no">
						<name>kp1 (where)</name>
						<packageName></packageName>
						<script></script>
						<command>where</command>
						<keyCode>49</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>kp4 w</name>
						<packageName></packageName>
						<script></script>
						<command>west</command>
						<keyCode>52</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>kp6 e</name>
						<packageName></packageName>
						<script></script>
						<command>east</command>
						<keyCode>54</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>kp5 look</name>
						<packageName></packageName>
						<script></script>
						<command>look</command>
						<keyCode>53</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>kp0 (who pk)</name>
						<packageName></packageName>
						<script></script>
						<command>who pk</command>
						<keyCode>48</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>kp9 up</name>
						<packageName></packageName>
						<script></script>
						<command>up</command>
						<keyCode>57</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>kp2 south</name>
						<packageName></packageName>
						<script></script>
						<command>south</command>
						<keyCode>50</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>keypad-plus (action-&gt;target)</name>
						<packageName></packageName>
						<script>send(action.." "..target)</script>
						<command></command>
						<keyCode>43</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>kp8 north</name>
						<packageName></packageName>
						<script></script>
						<command>north</command>
						<keyCode>56</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>kp3 down</name>
						<packageName></packageName>
						<script></script>
						<command>down</command>
						<keyCode>51</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>kp7 (flee)</name>
						<packageName></packageName>
						<script></script>
						<command>flee</command>
						<keyCode>55</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<KeyGroup isActive="yes" isFolder="yes">
						<name>Scan (ctrl + kp)</name>
						<packageName></packageName>
						<script></script>
						<command></command>
						<keyCode>-1</keyCode>
						<keyModifier>-1</keyModifier>
						<Key isActive="yes" isFolder="no">
							<name>scan n</name>
							<packageName></packageName>
							<script></script>
							<command>scan north</command>
							<keyCode>56</keyCode>
							<keyModifier>603979776</keyModifier>
						</Key>
						<Key isActive="yes" isFolder="no">
							<name>scan s</name>
							<packageName></packageName>
							<script></script>
							<command>scan south</command>
							<keyCode>50</keyCode>
							<keyModifier>603979776</keyModifier>
						</Key>
						<Key isActive="yes" isFolder="no">
							<name>scan e</name>
							<packageName></packageName>
							<script></script>
							<command>scan east</command>
							<keyCode>54</keyCode>
							<keyModifier>603979776</keyModifier>
						</Key>
						<Key isActive="yes" isFolder="no">
							<name>scan w</name>
							<packageName></packageName>
							<script></script>
							<command>scan west</command>
							<keyCode>52</keyCode>
							<keyModifier>603979776</keyModifier>
						</Key>
						<Key isActive="yes" isFolder="no">
							<name>scan u</name>
							<packageName></packageName>
							<script></script>
							<command>scan u</command>
							<keyCode>57</keyCode>
							<keyModifier>603979776</keyModifier>
						</Key>
						<Key isActive="yes" isFolder="no">
							<name>scan d</name>
							<packageName></packageName>
							<script></script>
							<command>scan down</command>
							<keyCode>51</keyCode>
							<keyModifier>603979776</keyModifier>
						</Key>
						<Key isActive="yes" isFolder="no">
							<name>scan all (ctrl+*)</name>
							<packageName></packageName>
							<script></script>
							<command>scan all</command>
							<keyCode>42</keyCode>
							<keyModifier>603979776</keyModifier>
						</Key>
						<Key isActive="yes" isFolder="no">
							<name>scan all (*)</name>
							<packageName></packageName>
							<script></script>
							<command>scan all</command>
							<keyCode>42</keyCode>
							<keyModifier>536870912</keyModifier>
						</Key>
						<Key isActive="yes" isFolder="no">
							<name>ctrl+kp1 where</name>
							<packageName></packageName>
							<script></script>
							<command>where</command>
							<keyCode>49</keyCode>
							<keyModifier>603979776</keyModifier>
						</Key>
					</KeyGroup>
				</KeyGroup>
				<KeyGroup isActive="no" isFolder="yes">
					<name>Ranger Camo &amp; Creep (alt + kp)</name>
					<packageName></packageName>
					<script></script>
					<command></command>
					<keyCode>-1</keyCode>
					<keyModifier>-1</keyModifier>
					<Key isActive="yes" isFolder="no">
						<name>creep n</name>
						<packageName></packageName>
						<script></script>
						<command>creep north</command>
						<keyCode>56</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>creep south</name>
						<packageName></packageName>
						<script></script>
						<command>creep south</command>
						<keyCode>50</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>creep east</name>
						<packageName></packageName>
						<script></script>
						<command>creep east</command>
						<keyCode>54</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>creep west</name>
						<packageName></packageName>
						<script></script>
						<command>creep west</command>
						<keyCode>52</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>creep up</name>
						<packageName></packageName>
						<script></script>
						<command>creep up</command>
						<keyCode>57</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>creep down</name>
						<packageName></packageName>
						<script></script>
						<command>creep down</command>
						<keyCode>51</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>alt+slash camo</name>
						<packageName></packageName>
						<script></script>
						<command>camo</command>
						<keyCode>47</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>slash camo</name>
						<packageName></packageName>
						<script></script>
						<command>camo</command>
						<keyCode>47</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
				</KeyGroup>
				<KeyGroup isActive="no" isFolder="yes">
					<name>Conjurer Familiar (alt+kp)</name>
					<packageName></packageName>
					<script></script>
					<command></command>
					<keyCode>-1</keyCode>
					<keyModifier>-1</keyModifier>
					<Key isActive="yes" isFolder="no">
						<name>fam n</name>
						<packageName></packageName>
						<script></script>
						<command>fam north</command>
						<keyCode>56</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>fam south</name>
						<packageName></packageName>
						<script></script>
						<command>fam south</command>
						<keyCode>50</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>fam east</name>
						<packageName></packageName>
						<script></script>
						<command>fam east</command>
						<keyCode>54</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>fam west</name>
						<packageName></packageName>
						<script></script>
						<command>fam west</command>
						<keyCode>52</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>fam up</name>
						<packageName></packageName>
						<script></script>
						<command>fam up</command>
						<keyCode>57</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>fam down</name>
						<packageName></packageName>
						<script></script>
						<command>fam down</command>
						<keyCode>51</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>fam release</name>
						<packageName></packageName>
						<script></script>
						<command>fam release</command>
						<keyCode>47</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>fam release (slash)</name>
						<packageName></packageName>
						<script></script>
						<command>fam release</command>
						<keyCode>47</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
				</KeyGroup>
				<KeyGroup isActive="no" isFolder="yes">
					<name>Shapeshifter Run (alt+kp)</name>
					<packageName></packageName>
					<script></script>
					<command></command>
					<keyCode>-1</keyCode>
					<keyModifier>-1</keyModifier>
					<Key isActive="yes" isFolder="no">
						<name>run n</name>
						<packageName></packageName>
						<script></script>
						<command>run north</command>
						<keyCode>56</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>run south</name>
						<packageName></packageName>
						<script></script>
						<command>run south</command>
						<keyCode>50</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>run east</name>
						<packageName></packageName>
						<script></script>
						<command>run east</command>
						<keyCode>54</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>run west</name>
						<packageName></packageName>
						<script></script>
						<command>run west</command>
						<keyCode>52</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>run up</name>
						<packageName></packageName>
						<script></script>
						<command>run up</command>
						<keyCode>57</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>run down</name>
						<packageName></packageName>
						<script></script>
						<command>run down</command>
						<keyCode>51</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
				</KeyGroup>
				<KeyGroup isActive="yes" isFolder="yes">
					<name>Warrior Dash (alt + kp)</name>
					<packageName></packageName>
					<script></script>
					<command></command>
					<keyCode>-1</keyCode>
					<keyModifier>-1</keyModifier>
					<Key isActive="yes" isFolder="no">
						<name>dash north + action + target</name>
						<packageName></packageName>
						<script>send("dash north "..action.." "..target)</script>
						<command></command>
						<keyCode>56</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>dash south + action + target</name>
						<packageName></packageName>
						<script>send("dash south "..action.." "..target)</script>
						<command></command>
						<keyCode>50</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>dash east + action + target</name>
						<packageName></packageName>
						<script>send("dash east "..action.." "..target)</script>
						<command></command>
						<keyCode>54</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>dash west + action + target</name>
						<packageName></packageName>
						<script>send("dash west "..action.." "..target)</script>
						<command></command>
						<keyCode>52</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>dash up + action + target</name>
						<packageName></packageName>
						<script>send("dash up "..action.." "..target)</script>
						<command></command>
						<keyCode>57</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>dash down + action + target</name>
						<packageName></packageName>
						<script>send("dash down "..action.." "..target)</script>
						<command></command>
						<keyCode>51</keyCode>
						<keyModifier>671088640</keyModifier>
					</Key>
				</KeyGroup>
				<KeyGroup isActive="yes" isFolder="yes">
					<name>F-Keys</name>
					<packageName></packageName>
					<script></script>
					<command></command>
					<keyCode>-1</keyCode>
					<keyModifier>-1</keyModifier>
					<KeyGroup isActive="yes" isFolder="yes">
						<name>Target Swapping</name>
						<packageName></packageName>
						<script></script>
						<command></command>
						<keyCode>-1</keyCode>
						<keyModifier>-1</keyModifier>
						<Key isActive="yes" isFolder="no">
							<name>F1 target</name>
							<packageName></packageName>
							<script>--if target ~= nil and t1 ~= nil then
--local target_holder = target
--target = t1
--t1 = target_holder
--cecho("&lt;white&gt;Target set to &lt;firebrick&gt;"..target.."&lt;white&gt;. "..t1.." can be restored by pressing F1 again.\n\n")
--GUI.Icon1:echo("&lt;center&gt;F1: "..t1)
--GUI.TargetInput:echo("&lt;center&gt;"..target)
--else
--end

if t1 ~= nil then
target = t1
cecho("&lt;white&gt;Target set to &lt;firebrick&gt;"..target.."&lt;white&gt;.\n\n")
GUI.TargetInput:echo("&lt;center&gt;"..target)
vt.target = target
table.save(PkgPath.."vt.lua", vt)
else
cecho("&lt;white&gt;You do not have a target assigned to F1. Use the 't1' command to add an alternate target.\n\n")
end</script>
							<command></command>
							<keyCode>16777264</keyCode>
							<keyModifier>0</keyModifier>
						</Key>
						<Key isActive="yes" isFolder="no">
							<name>F2 target</name>
							<packageName></packageName>
							<script>if t2 ~= nil then
target = t2
cecho("&lt;white&gt;Target set to &lt;firebrick&gt;"..target.."&lt;white&gt;.\n\n")
GUI.TargetInput:echo("&lt;center&gt;"..target)
vt.target = target
table.save(PkgPath.."vt.lua", vt)
else
cecho("&lt;white&gt;You do not have a target assigned to F2. Use the 't2' command to add an alternate target.\n\n")
end</script>
							<command></command>
							<keyCode>16777265</keyCode>
							<keyModifier>0</keyModifier>
						</Key>
						<Key isActive="yes" isFolder="no">
							<name>F3 target</name>
							<packageName></packageName>
							<script>if t3 ~= nil then
target = t3
cecho("&lt;white&gt;Target set to &lt;firebrick&gt;"..target.."&lt;white&gt;.\n\n")
GUI.TargetInput:echo("&lt;center&gt;"..target)
vt.target = target
table.save(PkgPath.."vt.lua", vt)
else
cecho("&lt;white&gt;You do not have a target assigned to F3. Use the 't3' command to add an alternate target.\n\n")
end</script>
							<command></command>
							<keyCode>16777266</keyCode>
							<keyModifier>0</keyModifier>
						</Key>
						<Key isActive="yes" isFolder="no">
							<name>F4 target</name>
							<packageName></packageName>
							<script>if t4 ~= nil then
target = t4
cecho("&lt;white&gt;Target set to &lt;firebrick&gt;"..target.."&lt;white&gt;.\n\n")
GUI.TargetInput:echo("&lt;center&gt;"..target)
vt.target = target
table.save(PkgPath.."vt.lua", vt)
else
cecho("&lt;white&gt;You do not have a target assigned to F4. Use the 't4' command to add an alternate target.\n\n")
end</script>
							<command></command>
							<keyCode>16777267</keyCode>
							<keyModifier>0</keyModifier>
						</Key>
						<Key isActive="yes" isFolder="no">
							<name>F5 action</name>
							<packageName></packageName>
							<script>--if action ~= nil and a5 ~= nil then
--local action_holder = action
--action = a5
--a5 = action_holder
--cecho("&lt;white&gt;Action set to &lt;steel_blue&gt;"..action.."&lt;white&gt;. "..a5.." can be restored by pressing F5 again.\n\n")
--GUI.Icon5:echo("&lt;center&gt;F5: "..a5)
--GUI.ActionInput:echo("&lt;center&gt;"..action)
--else
--end
--table.save(PkgPath.."vt.lua", vt)

if a5 ~= nil then
  action = a5
  cecho("&lt;white&gt;Action set to &lt;steel_blue&gt;"..action.."&lt;white&gt;.\n\n")
  GUI.ActionInput:echo("&lt;center&gt;"..action)
  vt.action = action
  table.save(PkgPath.."vt.lua", vt)
  else
  cecho("&lt;white&gt;You do not have an action assigned to F5. Use the 'a5' command to add an alternate action.\n\n")
end</script>
							<command></command>
							<keyCode>16777268</keyCode>
							<keyModifier>0</keyModifier>
						</Key>
						<Key isActive="yes" isFolder="no">
							<name>F6 action</name>
							<packageName></packageName>
							<script>if a6 ~= nil then
action = a6
cecho("&lt;white&gt;Action set to &lt;steel_blue&gt;"..action.."&lt;white&gt;.\n\n")
GUI.ActionInput:echo("&lt;center&gt;"..action)
vt.action = action
table.save(PkgPath.."vt.lua", vt)
else
cecho("&lt;white&gt;You do not have an action assigned to F6. Use the 'a6' command to add an alternate action.\n\n")
end</script>
							<command></command>
							<keyCode>16777269</keyCode>
							<keyModifier>0</keyModifier>
						</Key>
						<Key isActive="yes" isFolder="no">
							<name>F7 action</name>
							<packageName></packageName>
							<script>if a7 ~= nil then
action = a7
cecho("&lt;white&gt;Action set to &lt;steel_blue&gt;"..action.."&lt;white&gt;.\n\n")
GUI.ActionInput:echo("&lt;center&gt;"..action)
vt.action = action
table.save(PkgPath.."vt.lua", vt)
else
cecho("&lt;white&gt;You do not have an action assigned to F7. Use the 'a7' command to add an alternate action.\n\n")
end</script>
							<command></command>
							<keyCode>16777270</keyCode>
							<keyModifier>0</keyModifier>
						</Key>
					</KeyGroup>
					<KeyGroup isActive="no" isFolder="yes">
						<name>Shapeshifter Forms</name>
						<packageName></packageName>
						<script>--Not finished</script>
						<command></command>
						<keyCode>-1</keyCode>
						<keyModifier>-1</keyModifier>
						<Key isActive="yes" isFolder="no">
							<name>Shapeshift Major</name>
							<packageName></packageName>
							<script>send("shapeshift "..majorform)</script>
							<command></command>
							<keyCode>16777268</keyCode>
							<keyModifier>0</keyModifier>
						</Key>
						<Key isActive="yes" isFolder="no">
							<name>Shapeshift Minor</name>
							<packageName></packageName>
							<script>send("shapeshift "..minorform)</script>
							<command></command>
							<keyCode>-1</keyCode>
							<keyModifier>-1</keyModifier>
						</Key>
					</KeyGroup>
				</KeyGroup>
			</KeyGroup>
		</KeyGroup>
	</KeyPackage>
	<VariablePackage>
		<HiddenVariables />
	</VariablePackage>
</MudletPackage>
